=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event. The Events returned depends on your grants.
  class GetEvents200ResponseDataInner
    # __Filterable__, __Read-only__ If this Event has been read.
    attr_accessor :read

    # __Filterable__, __Read-only__ The unique ID of this Event.
    attr_accessor :id

    # Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
    attr_accessor :message

    # __Filterable__, __Read-only__ When this Event was created.
    attr_accessor :created

    # __Read-only__ The username of the User who caused the Event.
    attr_accessor :username

    attr_accessor :secondary_entity

    # __Read-only__ The current status of this Event.
    attr_accessor :status

    # __Read-only__ The total duration in seconds that it takes for the Event to complete.
    attr_accessor :duration

    # __Read-only__ The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
    attr_accessor :rate

    # __Read-only__ If this Event has been seen.
    attr_accessor :seen

    # __Read-only__ A percentage estimating the amount of time remaining for an Event. Returns `null` for notification events.
    attr_accessor :percent_complete

    attr_accessor :entity

    # __Read-only__ The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.
    attr_accessor :time_remaining

    # __Filterable__, __Read-only__ The action that caused this Event. New actions may be added in the future.
    attr_accessor :action

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'read' => :'read',
        :'id' => :'id',
        :'message' => :'message',
        :'created' => :'created',
        :'username' => :'username',
        :'secondary_entity' => :'secondary_entity',
        :'status' => :'status',
        :'duration' => :'duration',
        :'rate' => :'rate',
        :'seen' => :'seen',
        :'percent_complete' => :'percent_complete',
        :'entity' => :'entity',
        :'time_remaining' => :'time_remaining',
        :'action' => :'action'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'read' => :'Boolean',
        :'id' => :'Integer',
        :'message' => :'String',
        :'created' => :'Time',
        :'username' => :'String',
        :'secondary_entity' => :'GetEvents200ResponseDataInnerSecondaryEntity',
        :'status' => :'String',
        :'duration' => :'Float',
        :'rate' => :'String',
        :'seen' => :'Boolean',
        :'percent_complete' => :'Integer',
        :'entity' => :'GetEvents200ResponseDataInnerEntity',
        :'time_remaining' => :'String',
        :'action' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'message',
        :'username',
        :'time_remaining',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::GetEvents200ResponseDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::GetEvents200ResponseDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'read')
        self.read = attributes[:'read']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'secondary_entity')
        self.secondary_entity = attributes[:'secondary_entity']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'seen')
        self.seen = attributes[:'seen']
      end

      if attributes.key?(:'percent_complete')
        self.percent_complete = attributes[:'percent_complete']
      end

      if attributes.key?(:'entity')
        self.entity = attributes[:'entity']
      end

      if attributes.key?(:'time_remaining')
        self.time_remaining = attributes[:'time_remaining']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["failed", "finished", "notification", "scheduled", "started"])
      return false unless status_validator.valid?(@status)
      action_validator = EnumAttributeValidator.new('String', ["account_update", "account_settings_update", "aclb_create", "aclb_update", "aclb_delete", "aclb_config_create", "aclb_config_update", "aclb_config_delete", "aclb_route_create", "aclb_route_update", "aclb_route_delete", "aclb_servicetarget_create", "aclb_servicetarget_update", "aclb_servicetarget_delete", "aclb_certificate_create", "aclb_certificate_update", "aclb_certificate_delete", "backups_enable", "backups_cancel", "backups_restore", "community_question_reply", "community_like", "credit_card_updated", "disk_create", "disk_delete", "disk_update", "disk_duplicate", "disk_imagize", "disk_resize", "dns_record_create", "dns_record_delete", "dns_record_update", "dns_zone_create", "dns_zone_delete", "dns_zone_import", "dns_zone_update", "entity_transfer_accept", "entity_transfer_cancel", "entity_transfer_create", "entity_transfer_fail", "entity_transfer_stale", "firewall_create", "firewall_delete", "firewall_disable", "firewall_enable", "firewall_update", "firewall_device_add", "firewall_device_remove", "host_reboot", "image_delete", "image_update", "image_upload", "ipaddress_update", "lassie_reboot", "lish_boot", "linode_addip", "linode_boot", "linode_clone", "linode_create", "linode_delete", "linode_update", "linode_deleteip", "linode_migrate", "linode_migrate_datacenter", "linode_migrate_datacenter_create", "linode_mutate", "linode_mutate_create", "linode_reboot", "linode_rebuild", "linode_resize", "linode_resize_create", "linode_shutdown", "linode_snapshot", "linode_config_create", "linode_config_delete", "linode_config_update", "lke_node_create", "longviewclient_create", "longviewclient_delete", "longviewclient_update", "managed_disabled", "managed_enabled", "managed_service_create", "managed_service_delete", "nodebalancer_create", "nodebalancer_delete", "nodebalancer_update", "nodebalancer_config_create", "nodebalancer_config_delete", "nodebalancer_config_update", "nodebalancer_node_create", "nodebalancer_node_delete", "nodebalancer_node_update", "oauth_client_create", "oauth_client_delete", "oauth_client_secret_reset", "oauth_client_update", "obj_access_key_create", "obj_access_key_delete", "obj_access_key_update", "password_reset", "payment_method_add", "payment_submitted", "placement_group_assign", "placement_group_became_compliant", "placement_group_became_non_compliant", "placement_group_create", "placement_group_delete", "placement_group_unassign", "placement_group_update", "profile_update", "stackscript_create", "stackscript_delete", "stackscript_update", "stackscript_publicize", "stackscript_revise", "subnet_create", "subnet_delete", "subnet_update", "tag_create", "tag_delete", "tfa_disabled", "tfa_enabled", "ticket_attachment_upload", "ticket_create", "ticket_update", "token_create", "token_delete", "token_update", "user_create", "user_update", "user_delete", "user_ssh_key_add", "user_ssh_key_delete", "user_ssh_key_update", "vlan_attach", "vlan_detach", "volume_attach", "volume_clone", "volume_create", "volume_delete", "volume_update", "volume_detach", "volume_resize", "vpc_create", "vpc_delete", "vpc_update"])
      return false unless action_validator.valid?(@action)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["failed", "finished", "notification", "scheduled", "started"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["account_update", "account_settings_update", "aclb_create", "aclb_update", "aclb_delete", "aclb_config_create", "aclb_config_update", "aclb_config_delete", "aclb_route_create", "aclb_route_update", "aclb_route_delete", "aclb_servicetarget_create", "aclb_servicetarget_update", "aclb_servicetarget_delete", "aclb_certificate_create", "aclb_certificate_update", "aclb_certificate_delete", "backups_enable", "backups_cancel", "backups_restore", "community_question_reply", "community_like", "credit_card_updated", "disk_create", "disk_delete", "disk_update", "disk_duplicate", "disk_imagize", "disk_resize", "dns_record_create", "dns_record_delete", "dns_record_update", "dns_zone_create", "dns_zone_delete", "dns_zone_import", "dns_zone_update", "entity_transfer_accept", "entity_transfer_cancel", "entity_transfer_create", "entity_transfer_fail", "entity_transfer_stale", "firewall_create", "firewall_delete", "firewall_disable", "firewall_enable", "firewall_update", "firewall_device_add", "firewall_device_remove", "host_reboot", "image_delete", "image_update", "image_upload", "ipaddress_update", "lassie_reboot", "lish_boot", "linode_addip", "linode_boot", "linode_clone", "linode_create", "linode_delete", "linode_update", "linode_deleteip", "linode_migrate", "linode_migrate_datacenter", "linode_migrate_datacenter_create", "linode_mutate", "linode_mutate_create", "linode_reboot", "linode_rebuild", "linode_resize", "linode_resize_create", "linode_shutdown", "linode_snapshot", "linode_config_create", "linode_config_delete", "linode_config_update", "lke_node_create", "longviewclient_create", "longviewclient_delete", "longviewclient_update", "managed_disabled", "managed_enabled", "managed_service_create", "managed_service_delete", "nodebalancer_create", "nodebalancer_delete", "nodebalancer_update", "nodebalancer_config_create", "nodebalancer_config_delete", "nodebalancer_config_update", "nodebalancer_node_create", "nodebalancer_node_delete", "nodebalancer_node_update", "oauth_client_create", "oauth_client_delete", "oauth_client_secret_reset", "oauth_client_update", "obj_access_key_create", "obj_access_key_delete", "obj_access_key_update", "password_reset", "payment_method_add", "payment_submitted", "placement_group_assign", "placement_group_became_compliant", "placement_group_became_non_compliant", "placement_group_create", "placement_group_delete", "placement_group_unassign", "placement_group_update", "profile_update", "stackscript_create", "stackscript_delete", "stackscript_update", "stackscript_publicize", "stackscript_revise", "subnet_create", "subnet_delete", "subnet_update", "tag_create", "tag_delete", "tfa_disabled", "tfa_enabled", "ticket_attachment_upload", "ticket_create", "ticket_update", "token_create", "token_delete", "token_update", "user_create", "user_update", "user_delete", "user_ssh_key_add", "user_ssh_key_delete", "user_ssh_key_update", "vlan_attach", "vlan_detach", "volume_attach", "volume_clone", "volume_create", "volume_delete", "volume_update", "volume_detach", "volume_resize", "vpc_create", "vpc_delete", "vpc_update"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          read == o.read &&
          id == o.id &&
          message == o.message &&
          created == o.created &&
          username == o.username &&
          secondary_entity == o.secondary_entity &&
          status == o.status &&
          duration == o.duration &&
          rate == o.rate &&
          seen == o.seen &&
          percent_complete == o.percent_complete &&
          entity == o.entity &&
          time_remaining == o.time_remaining &&
          action == o.action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [read, id, message, created, username, secondary_entity, status, duration, rate, seen, percent_complete, entity, time_remaining, action].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
