=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.
  class Domain5
    # The amount of time in seconds before this Domain should be refreshed.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
    attr_accessor :refresh_sec

    # __Read-only__ This Domain's unique ID.
    attr_accessor :id

    # __Filterable__ An array of tags applied to this object.  Tags are for organizational purposes only.
    attr_accessor :tags

    # __Filterable__ The group this Domain belongs to.  This is for display purposes only.
    attr_accessor :group

    # The amount of time in seconds that may pass before this Domain is no longer authoritative.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 1209600.
    attr_accessor :expire_sec

    # Used to control whether this Domain is currently being rendered.
    attr_accessor :status

    # __Filterable__ The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
    attr_accessor :domain

    # The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
    attr_accessor :master_ips

    # \"Time to Live\" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200. - Any other value is rounded up to the nearest valid value. - A value of 0 is equivalent to the default value of 86400.
    attr_accessor :ttl_sec

    # The interval, in seconds, at which a failed refresh should be retried.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
    attr_accessor :retry_sec

    # The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.  __Note__. This is potentially dangerous, and should be set to an empty list unless you intend to use it.
    attr_accessor :axfr_ips

    # A description for this Domain. This is for display purposes only.
    attr_accessor :description

    # Whether this Domain represents the authoritative source of information for the domain it describes (`master`), or whether it is a read-only copy of a master (`slave`).
    attr_accessor :type

    # Start of Authority email address. This is required for `type` master Domains.
    attr_accessor :soa_email

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'refresh_sec' => :'refresh_sec',
        :'id' => :'id',
        :'tags' => :'tags',
        :'group' => :'group',
        :'expire_sec' => :'expire_sec',
        :'status' => :'status',
        :'domain' => :'domain',
        :'master_ips' => :'master_ips',
        :'ttl_sec' => :'ttl_sec',
        :'retry_sec' => :'retry_sec',
        :'axfr_ips' => :'axfr_ips',
        :'description' => :'description',
        :'type' => :'type',
        :'soa_email' => :'soa_email'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'refresh_sec' => :'Integer',
        :'id' => :'Integer',
        :'tags' => :'Array<String>',
        :'group' => :'String',
        :'expire_sec' => :'Integer',
        :'status' => :'String',
        :'domain' => :'String',
        :'master_ips' => :'Array<String>',
        :'ttl_sec' => :'Integer',
        :'retry_sec' => :'Integer',
        :'axfr_ips' => :'Array<String>',
        :'description' => :'String',
        :'type' => :'String',
        :'soa_email' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::Domain5` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::Domain5`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'refresh_sec')
        self.refresh_sec = attributes[:'refresh_sec']
      else
        self.refresh_sec = 0
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'expire_sec')
        self.expire_sec = attributes[:'expire_sec']
      else
        self.expire_sec = 0
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = 'active'
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'master_ips')
        if (value = attributes[:'master_ips']).is_a?(Array)
          self.master_ips = value
        end
      end

      if attributes.key?(:'ttl_sec')
        self.ttl_sec = attributes[:'ttl_sec']
      else
        self.ttl_sec = 0
      end

      if attributes.key?(:'retry_sec')
        self.retry_sec = attributes[:'retry_sec']
      else
        self.retry_sec = 0
      end

      if attributes.key?(:'axfr_ips')
        if (value = attributes[:'axfr_ips']).is_a?(Array)
          self.axfr_ips = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'soa_email')
        self.soa_email = attributes[:'soa_email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@group.nil? && @group.to_s.length > 50
        invalid_properties.push('invalid value for "group", the character length must be smaller than or equal to 50.')
      end

      if !@group.nil? && @group.to_s.length < 1
        invalid_properties.push('invalid value for "group", the character length must be great than or equal to 1.')
      end

      if !@domain.nil? && @domain.to_s.length > 253
        invalid_properties.push('invalid value for "domain", the character length must be smaller than or equal to 253.')
      end

      if !@domain.nil? && @domain.to_s.length < 1
        invalid_properties.push('invalid value for "domain", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$/)
      if !@domain.nil? && @domain !~ pattern
        invalid_properties.push("invalid value for \"domain\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 253
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 253.')
      end

      if !@description.nil? && @description.to_s.length < 1
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@group.nil? && @group.to_s.length > 50
      return false if !@group.nil? && @group.to_s.length < 1
      status_validator = EnumAttributeValidator.new('String', ["disabled", "active"])
      return false unless status_validator.valid?(@status)
      return false if !@domain.nil? && @domain.to_s.length > 253
      return false if !@domain.nil? && @domain.to_s.length < 1
      return false if !@domain.nil? && @domain !~ Regexp.new(/^(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$/)
      return false if !@description.nil? && @description.to_s.length > 253
      return false if !@description.nil? && @description.to_s.length < 1
      type_validator = EnumAttributeValidator.new('String', ["master", "slave"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group Value to be assigned
    def group=(group)
      if group.nil?
        fail ArgumentError, 'group cannot be nil'
      end

      if group.to_s.length > 50
        fail ArgumentError, 'invalid value for "group", the character length must be smaller than or equal to 50.'
      end

      if group.to_s.length < 1
        fail ArgumentError, 'invalid value for "group", the character length must be great than or equal to 1.'
      end

      @group = group
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["disabled", "active"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] domain Value to be assigned
    def domain=(domain)
      if domain.nil?
        fail ArgumentError, 'domain cannot be nil'
      end

      if domain.to_s.length > 253
        fail ArgumentError, 'invalid value for "domain", the character length must be smaller than or equal to 253.'
      end

      if domain.to_s.length < 1
        fail ArgumentError, 'invalid value for "domain", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$/)
      if domain !~ pattern
        fail ArgumentError, "invalid value for \"domain\", must conform to the pattern #{pattern}."
      end

      @domain = domain
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 253
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 253.'
      end

      if description.to_s.length < 1
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 1.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["master", "slave"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          refresh_sec == o.refresh_sec &&
          id == o.id &&
          tags == o.tags &&
          group == o.group &&
          expire_sec == o.expire_sec &&
          status == o.status &&
          domain == o.domain &&
          master_ips == o.master_ips &&
          ttl_sec == o.ttl_sec &&
          retry_sec == o.retry_sec &&
          axfr_ips == o.axfr_ips &&
          description == o.description &&
          type == o.type &&
          soa_email == o.soa_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [refresh_sec, id, tags, group, expire_sec, status, domain, master_ips, ttl_sec, retry_sec, axfr_ips, description, type, soa_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
