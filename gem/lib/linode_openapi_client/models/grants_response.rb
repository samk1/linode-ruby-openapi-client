=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.
  class GrantsResponse
    # The grants this User has for each Domain that is owned by this Account.
    attr_accessor :domain

    # The grants this User has for each Longview Client that is owned by this Account.
    attr_accessor :longview

    # The grants this User has for each Cloud Load Balancer that is owned by this Account.
    attr_accessor :loadbalancer

    # The grants this User has for each VPC that is owned by this Account.
    attr_accessor :vpc

    # The grants this User has for each Block Storage Volume that is owned by this Account.
    attr_accessor :volume

    # The grants this User has for each StackScript that is owned by this Account.
    attr_accessor :stackscript

    # The grants this User has for each NodeBalancer that is owned by this Account.
    attr_accessor :nodebalancer

    # The grants this User has for each Database that is owned by this Account.
    attr_accessor :database

    # The grants this User has for each Image that is owned by this Account.
    attr_accessor :image

    # The grants this User has for each Linode that is owned by this Account.
    attr_accessor :linode

    # The grants this User has for each Placement Group that is owned by this Account.
    attr_accessor :placement_group

    attr_accessor :global

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain' => :'domain',
        :'longview' => :'longview',
        :'loadbalancer' => :'loadbalancer',
        :'vpc' => :'vpc',
        :'volume' => :'volume',
        :'stackscript' => :'stackscript',
        :'nodebalancer' => :'nodebalancer',
        :'database' => :'database',
        :'image' => :'image',
        :'linode' => :'linode',
        :'placement_group' => :'placement_group',
        :'global' => :'global'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'domain' => :'Array<PutUserGrantsRequestStackscriptInner>',
        :'longview' => :'Array<GetUserGrants200ResponseStackscriptInner>',
        :'loadbalancer' => :'Array<PutUserGrantsRequestStackscriptInner>',
        :'vpc' => :'Array<PutUserGrantsRequestStackscriptInner>',
        :'volume' => :'Array<PutUserGrantsRequestStackscriptInner>',
        :'stackscript' => :'Array<GetUserGrants200ResponseLongviewInner>',
        :'nodebalancer' => :'Array<GetUserGrants200ResponseStackscriptInner>',
        :'database' => :'Array<GetUserGrants200ResponseLongviewInner>',
        :'image' => :'Array<GetUserGrants200ResponsePlacementGroupInner>',
        :'linode' => :'Array<GetUserGrants200ResponseLongviewInner>',
        :'placement_group' => :'Array<GetUserGrants200ResponseStackscriptInner>',
        :'global' => :'GrantsResponseGlobal'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::GrantsResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::GrantsResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'domain')
        if (value = attributes[:'domain']).is_a?(Array)
          self.domain = value
        end
      end

      if attributes.key?(:'longview')
        if (value = attributes[:'longview']).is_a?(Array)
          self.longview = value
        end
      end

      if attributes.key?(:'loadbalancer')
        if (value = attributes[:'loadbalancer']).is_a?(Array)
          self.loadbalancer = value
        end
      end

      if attributes.key?(:'vpc')
        if (value = attributes[:'vpc']).is_a?(Array)
          self.vpc = value
        end
      end

      if attributes.key?(:'volume')
        if (value = attributes[:'volume']).is_a?(Array)
          self.volume = value
        end
      end

      if attributes.key?(:'stackscript')
        if (value = attributes[:'stackscript']).is_a?(Array)
          self.stackscript = value
        end
      end

      if attributes.key?(:'nodebalancer')
        if (value = attributes[:'nodebalancer']).is_a?(Array)
          self.nodebalancer = value
        end
      end

      if attributes.key?(:'database')
        if (value = attributes[:'database']).is_a?(Array)
          self.database = value
        end
      end

      if attributes.key?(:'image')
        if (value = attributes[:'image']).is_a?(Array)
          self.image = value
        end
      end

      if attributes.key?(:'linode')
        if (value = attributes[:'linode']).is_a?(Array)
          self.linode = value
        end
      end

      if attributes.key?(:'placement_group')
        if (value = attributes[:'placement_group']).is_a?(Array)
          self.placement_group = value
        end
      end

      if attributes.key?(:'global')
        self.global = attributes[:'global']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain == o.domain &&
          longview == o.longview &&
          loadbalancer == o.loadbalancer &&
          vpc == o.vpc &&
          volume == o.volume &&
          stackscript == o.stackscript &&
          nodebalancer == o.nodebalancer &&
          database == o.database &&
          image == o.image &&
          linode == o.linode &&
          placement_group == o.placement_group &&
          global == o.global
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [domain, longview, loadbalancer, vpc, volume, stackscript, nodebalancer, database, image, linode, placement_group, global].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
