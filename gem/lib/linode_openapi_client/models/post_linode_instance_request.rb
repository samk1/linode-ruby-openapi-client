=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  class PostLinodeInstanceRequest
    attr_accessor :metadata

    # This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](https://www.linode.com/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.  This field is required to be valid JSON.  Total length cannot exceed 65,535 characters.
    attr_accessor :stackscript_data

    # __Write-only__ This field defaults to `true` if the Linode is created with an Image or from a Backup. If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
    attr_accessor :booted

    # __Write-only__ This sets the root user's password on a newly-created Linode Disk when deploying from an Image.  - __Required__ when creating a Linode Disk from an Image, including when using a StackScript.  - Must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
    attr_accessor :root_pass

    # __Write-only__ A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
    attr_accessor :authorized_users

    # __Write-only__ A list of public SSH keys that will be automatically appended to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
    attr_accessor :authorized_keys

    # An Image ID to deploy the Linode Disk from.  Run the [List images](https://techdocs.akamai.com/linode-api/reference/get-images) operation with authentication to view all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Run the [Update a user's grants](https://techdocs.akamai.com/linode-api/reference/put-user-grants) operation to adjust permissions for an Account Image.
    attr_accessor :image

    # A StackScript ID that will cause the referenced StackScript to be run during deployment of this Linode. A compatible `image` is required to use a StackScript. To get a list of available StackScript and their permitted Images, run [List StackScripts](https://techdocs.akamai.com/linode-api/reference/get-stack-scripts). This field cannot be used when deploying from a Backup or a Private Image.
    attr_accessor :stackscript_id

    # __Filterable__ The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.  Linode labels have the following constraints:  - Must begin and end with an alphanumeric character. - May only consist of alphanumeric characters, hyphens (`-`), underscores (`_`) or periods (`.`). - Cannot have two hyphens (`--`), underscores (`__`) or periods (`..`) in a row.
    attr_accessor :label

    # If this field is set to `true`, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.  This option is always treated as `true` if the account-wide `backups_enabled` setting is `true`.  See [Get account settings](https://techdocs.akamai.com/linode-api/reference/get-account-settings) for more information.  Backup pricing is included in the response from [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types)
    attr_accessor :backups_enabled

    # The [Linode type](https://techdocs.akamai.com/linode-api/reference/get-linode-types) of the Linode you are creating.
    attr_accessor :type

    attr_accessor :placement_group

    # When deploying from an Image, this field is optional, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
    attr_accessor :swap_size

    # The `id` of the Firewall to attach this Linode to upon creation.
    attr_accessor :firewall_id

    # A Backup ID from another Linode's available backups. Your User must have `read_write` access to that Linode, the Backup must have a `status` of `successful`, and the Linode must be deployed to the same `region` as the Backup. Run [List backups](https://techdocs.akamai.com/linode-api/reference/get-backups) for a Linode's available backups.  This field and the `image` field are mutually exclusive.
    attr_accessor :backup_id

    # __Filterable__ A deprecated property denoting a group label for this Linode.
    attr_accessor :group

    # __Filterable__ An array of tags applied to this object.  Tags are for organizational purposes only.
    attr_accessor :tags

    # An array of Network Interfaces to add to this Linode's Configuration Profile. At least one and up to three Interface objects can exist in this array. The position in the array determines which of the Linode's network Interfaces is configured:  - First [0]:  eth0 - Second [1]: eth1 - Third [2]:  eth2  When updating a Linode's Interfaces, _each Interface must be redefined_. An empty `interfaces` array results in a default `public` type Interface configuration only.  If no public Interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.  __Note__. Changes to Linode Interface configurations can be enabled by rebooting the Linode.  `vpc` details  See the [VPC documentation](https://www.linode.com/docs/products/networking/vpc/#technical-specifications) guide for its specifications and limitations.  `vlan` details  - Only Next Generation Network (NGN) data centers support VLANs. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the capabilities of data center regions. If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center, the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support. - See the [VLANs Overview](https://www.linode.com/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
    attr_accessor :interfaces

    # The [region](https://techdocs.akamai.com/linode-api/reference/get-regions) where the Linode will be located.
    attr_accessor :region

    # If true, the created Linode will have private networking enabled and assigned a private IPv4 address.
    attr_accessor :private_ip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'metadata' => :'metadata',
        :'stackscript_data' => :'stackscript_data',
        :'booted' => :'booted',
        :'root_pass' => :'root_pass',
        :'authorized_users' => :'authorized_users',
        :'authorized_keys' => :'authorized_keys',
        :'image' => :'image',
        :'stackscript_id' => :'stackscript_id',
        :'label' => :'label',
        :'backups_enabled' => :'backups_enabled',
        :'type' => :'type',
        :'placement_group' => :'placement_group',
        :'swap_size' => :'swap_size',
        :'firewall_id' => :'firewall_id',
        :'backup_id' => :'backup_id',
        :'group' => :'group',
        :'tags' => :'tags',
        :'interfaces' => :'interfaces',
        :'region' => :'region',
        :'private_ip' => :'private_ip'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'metadata' => :'PostLinodeInstanceRequestAllOfMetadata',
        :'stackscript_data' => :'Object',
        :'booted' => :'Boolean',
        :'root_pass' => :'String',
        :'authorized_users' => :'Array<String>',
        :'authorized_keys' => :'Array<String>',
        :'image' => :'String',
        :'stackscript_id' => :'Integer',
        :'label' => :'String',
        :'backups_enabled' => :'Boolean',
        :'type' => :'String',
        :'placement_group' => :'PostLinodeInstanceRequestAllOfPlacementGroup',
        :'swap_size' => :'Integer',
        :'firewall_id' => :'Integer',
        :'backup_id' => :'Integer',
        :'group' => :'String',
        :'tags' => :'Array<String>',
        :'interfaces' => :'Array<PostLinodeInstanceRequestAllOfInterfacesInner>',
        :'region' => :'String',
        :'private_ip' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::PostLinodeInstanceRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::PostLinodeInstanceRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'stackscript_data')
        self.stackscript_data = attributes[:'stackscript_data']
      end

      if attributes.key?(:'booted')
        self.booted = attributes[:'booted']
      else
        self.booted = true
      end

      if attributes.key?(:'root_pass')
        self.root_pass = attributes[:'root_pass']
      end

      if attributes.key?(:'authorized_users')
        if (value = attributes[:'authorized_users']).is_a?(Array)
          self.authorized_users = value
        end
      end

      if attributes.key?(:'authorized_keys')
        if (value = attributes[:'authorized_keys']).is_a?(Array)
          self.authorized_keys = value
        end
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'stackscript_id')
        self.stackscript_id = attributes[:'stackscript_id']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'backups_enabled')
        self.backups_enabled = attributes[:'backups_enabled']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'placement_group')
        self.placement_group = attributes[:'placement_group']
      end

      if attributes.key?(:'swap_size')
        self.swap_size = attributes[:'swap_size']
      else
        self.swap_size = 512
      end

      if attributes.key?(:'firewall_id')
        self.firewall_id = attributes[:'firewall_id']
      end

      if attributes.key?(:'backup_id')
        self.backup_id = attributes[:'backup_id']
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'interfaces')
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      else
        self.region = nil
      end

      if attributes.key?(:'private_ip')
        self.private_ip = attributes[:'private_ip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@root_pass.nil? && @root_pass.to_s.length > 128
        invalid_properties.push('invalid value for "root_pass", the character length must be smaller than or equal to 128.')
      end

      if !@root_pass.nil? && @root_pass.to_s.length < 7
        invalid_properties.push('invalid value for "root_pass", the character length must be great than or equal to 7.')
      end

      if !@label.nil? && @label.to_s.length > 64
        invalid_properties.push('invalid value for "label", the character length must be smaller than or equal to 64.')
      end

      if !@label.nil? && @label.to_s.length < 3
        invalid_properties.push('invalid value for "label", the character length must be great than or equal to 3.')
      end

      pattern = Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      if !@label.nil? && @label !~ pattern
        invalid_properties.push("invalid value for \"label\", must conform to the pattern #{pattern}.")
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if !@interfaces.nil? && @interfaces.length > 3
        invalid_properties.push('invalid value for "interfaces", number of items must be less than or equal to 3.')
      end

      if !@interfaces.nil? && @interfaces.length < 1
        invalid_properties.push('invalid value for "interfaces", number of items must be greater than or equal to 1.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@root_pass.nil? && @root_pass.to_s.length > 128
      return false if !@root_pass.nil? && @root_pass.to_s.length < 7
      return false if !@label.nil? && @label.to_s.length > 64
      return false if !@label.nil? && @label.to_s.length < 3
      return false if !@label.nil? && @label !~ Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      return false if @type.nil?
      return false if !@interfaces.nil? && @interfaces.length > 3
      return false if !@interfaces.nil? && @interfaces.length < 1
      return false if @region.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] stackscript_data Value to be assigned
    def stackscript_data=(stackscript_data)
      if stackscript_data.nil?
        fail ArgumentError, 'stackscript_data cannot be nil'
      end

      @stackscript_data = stackscript_data
    end

    # Custom attribute writer method with validation
    # @param [Object] root_pass Value to be assigned
    def root_pass=(root_pass)
      if root_pass.nil?
        fail ArgumentError, 'root_pass cannot be nil'
      end

      if root_pass.to_s.length > 128
        fail ArgumentError, 'invalid value for "root_pass", the character length must be smaller than or equal to 128.'
      end

      if root_pass.to_s.length < 7
        fail ArgumentError, 'invalid value for "root_pass", the character length must be great than or equal to 7.'
      end

      @root_pass = root_pass
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if label.nil?
        fail ArgumentError, 'label cannot be nil'
      end

      if label.to_s.length > 64
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 64.'
      end

      if label.to_s.length < 3
        fail ArgumentError, 'invalid value for "label", the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      if label !~ pattern
        fail ArgumentError, "invalid value for \"label\", must conform to the pattern #{pattern}."
      end

      @label = label
    end

    # Custom attribute writer method with validation
    # @param [Object] interfaces Value to be assigned
    def interfaces=(interfaces)
      if interfaces.nil?
        fail ArgumentError, 'interfaces cannot be nil'
      end

      if interfaces.length > 3
        fail ArgumentError, 'invalid value for "interfaces", number of items must be less than or equal to 3.'
      end

      if interfaces.length < 1
        fail ArgumentError, 'invalid value for "interfaces", number of items must be greater than or equal to 1.'
      end

      @interfaces = interfaces
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          metadata == o.metadata &&
          stackscript_data == o.stackscript_data &&
          booted == o.booted &&
          root_pass == o.root_pass &&
          authorized_users == o.authorized_users &&
          authorized_keys == o.authorized_keys &&
          image == o.image &&
          stackscript_id == o.stackscript_id &&
          label == o.label &&
          backups_enabled == o.backups_enabled &&
          type == o.type &&
          placement_group == o.placement_group &&
          swap_size == o.swap_size &&
          firewall_id == o.firewall_id &&
          backup_id == o.backup_id &&
          group == o.group &&
          tags == o.tags &&
          interfaces == o.interfaces &&
          region == o.region &&
          private_ip == o.private_ip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [metadata, stackscript_data, booted, root_pass, authorized_users, authorized_keys, image, stackscript_id, label, backups_enabled, type, placement_group, swap_size, firewall_id, backup_id, group, tags, interfaces, region, private_ip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
