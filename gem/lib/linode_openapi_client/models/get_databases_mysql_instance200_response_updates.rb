=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # Configuration settings for automated patch update maintenance for the Managed Database.
  class GetDatabasesMysqlInstance200ResponseUpdates
    # The week of the month to perform `monthly` frequency updates. Defaults to `null`.  - Required for `monthly` frequency updates.  - Must be `null` for `weekly` frequency updates.
    attr_accessor :week_of_month

    # The day to perform maintenance. 1=Monday, 2=Tuesday, etc.
    attr_accessor :day_of_week

    # Whether maintenance occurs on a weekly or monthly basis.
    attr_accessor :frequency

    # The maximum maintenance window time in hours.
    attr_accessor :duration

    # The hour to begin maintenance based in UTC time.
    attr_accessor :hour_of_day

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'week_of_month' => :'week_of_month',
        :'day_of_week' => :'day_of_week',
        :'frequency' => :'frequency',
        :'duration' => :'duration',
        :'hour_of_day' => :'hour_of_day'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'week_of_month' => :'Integer',
        :'day_of_week' => :'Integer',
        :'frequency' => :'String',
        :'duration' => :'Integer',
        :'hour_of_day' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'week_of_month',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::GetDatabasesMysqlInstance200ResponseUpdates` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::GetDatabasesMysqlInstance200ResponseUpdates`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'week_of_month')
        self.week_of_month = attributes[:'week_of_month']
      end

      if attributes.key?(:'day_of_week')
        self.day_of_week = attributes[:'day_of_week']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      else
        self.frequency = 'weekly'
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'hour_of_day')
        self.hour_of_day = attributes[:'hour_of_day']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@week_of_month.nil? && @week_of_month > 4
        invalid_properties.push('invalid value for "week_of_month", must be smaller than or equal to 4.')
      end

      if !@week_of_month.nil? && @week_of_month < 1
        invalid_properties.push('invalid value for "week_of_month", must be greater than or equal to 1.')
      end

      if !@day_of_week.nil? && @day_of_week > 7
        invalid_properties.push('invalid value for "day_of_week", must be smaller than or equal to 7.')
      end

      if !@day_of_week.nil? && @day_of_week < 1
        invalid_properties.push('invalid value for "day_of_week", must be greater than or equal to 1.')
      end

      if !@duration.nil? && @duration > 3
        invalid_properties.push('invalid value for "duration", must be smaller than or equal to 3.')
      end

      if !@duration.nil? && @duration < 1
        invalid_properties.push('invalid value for "duration", must be greater than or equal to 1.')
      end

      if !@hour_of_day.nil? && @hour_of_day > 23
        invalid_properties.push('invalid value for "hour_of_day", must be smaller than or equal to 23.')
      end

      if !@hour_of_day.nil? && @hour_of_day < 0
        invalid_properties.push('invalid value for "hour_of_day", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@week_of_month.nil? && @week_of_month > 4
      return false if !@week_of_month.nil? && @week_of_month < 1
      return false if !@day_of_week.nil? && @day_of_week > 7
      return false if !@day_of_week.nil? && @day_of_week < 1
      frequency_validator = EnumAttributeValidator.new('String', ["weekly", "monthly"])
      return false unless frequency_validator.valid?(@frequency)
      return false if !@duration.nil? && @duration > 3
      return false if !@duration.nil? && @duration < 1
      return false if !@hour_of_day.nil? && @hour_of_day > 23
      return false if !@hour_of_day.nil? && @hour_of_day < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] week_of_month Value to be assigned
    def week_of_month=(week_of_month)
      if !week_of_month.nil? && week_of_month > 4
        fail ArgumentError, 'invalid value for "week_of_month", must be smaller than or equal to 4.'
      end

      if !week_of_month.nil? && week_of_month < 1
        fail ArgumentError, 'invalid value for "week_of_month", must be greater than or equal to 1.'
      end

      @week_of_month = week_of_month
    end

    # Custom attribute writer method with validation
    # @param [Object] day_of_week Value to be assigned
    def day_of_week=(day_of_week)
      if day_of_week.nil?
        fail ArgumentError, 'day_of_week cannot be nil'
      end

      if day_of_week > 7
        fail ArgumentError, 'invalid value for "day_of_week", must be smaller than or equal to 7.'
      end

      if day_of_week < 1
        fail ArgumentError, 'invalid value for "day_of_week", must be greater than or equal to 1.'
      end

      @day_of_week = day_of_week
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frequency Object to be assigned
    def frequency=(frequency)
      validator = EnumAttributeValidator.new('String', ["weekly", "monthly"])
      unless validator.valid?(frequency)
        fail ArgumentError, "invalid value for \"frequency\", must be one of #{validator.allowable_values}."
      end
      @frequency = frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] duration Value to be assigned
    def duration=(duration)
      if duration.nil?
        fail ArgumentError, 'duration cannot be nil'
      end

      if duration > 3
        fail ArgumentError, 'invalid value for "duration", must be smaller than or equal to 3.'
      end

      if duration < 1
        fail ArgumentError, 'invalid value for "duration", must be greater than or equal to 1.'
      end

      @duration = duration
    end

    # Custom attribute writer method with validation
    # @param [Object] hour_of_day Value to be assigned
    def hour_of_day=(hour_of_day)
      if hour_of_day.nil?
        fail ArgumentError, 'hour_of_day cannot be nil'
      end

      if hour_of_day > 23
        fail ArgumentError, 'invalid value for "hour_of_day", must be smaller than or equal to 23.'
      end

      if hour_of_day < 0
        fail ArgumentError, 'invalid value for "hour_of_day", must be greater than or equal to 0.'
      end

      @hour_of_day = hour_of_day
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          week_of_month == o.week_of_month &&
          day_of_week == o.day_of_week &&
          frequency == o.frequency &&
          duration == o.duration &&
          hour_of_day == o.hour_of_day
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [week_of_month, day_of_week, frequency, duration, hour_of_day].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
