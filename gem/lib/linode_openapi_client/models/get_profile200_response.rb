=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
  class GetProfile200Response
    # The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
    attr_accessor :timezone

    # The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](https://www.linode.com/docs/guides/lish/).  - `keys_only` is the most secure if you intend to use Lish. - `disabled` is recommended if you do not intend to use Lish at all. - If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [Get a profile](https://techdocs.akamai.com/linode-api/reference/get-profile) operation.
    attr_accessor :lish_auth_method

    # __Read-only__ Your unique ID in our system. This value will never change, and can safely be used to identify your User.
    attr_accessor :uid

    # The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is `disabled`.
    attr_accessor :authorized_keys

    # If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled. If you disable this setting, you will not be able to re-enable it.
    attr_accessor :ip_whitelist_enabled

    # If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, run [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants).
    attr_accessor :restricted

    # If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
    attr_accessor :email_notifications

    # Your email address.  This address will be used for communication with Linode as necessary.
    attr_accessor :email

    attr_accessor :referrals

    # __Read-only__ Your username, used for logging in to our system.
    attr_accessor :username

    # __Read-only__ The phone number verified for this Profile with the [Verify a phone number](https://techdocs.akamai.com/linode-api/reference/post-profile-phone-number-verify) operation.  `null` if this Profile has no verified phone number.
    attr_accessor :verified_phone_number

    # If true, logins from untrusted computers will require Two Factor Authentication.  Run [Create a two factor secret](https://techdocs.akamai.com/linode-api/reference/post-tfa-enable) to enable Two Factor Authentication.
    attr_accessor :two_factor_auth

    # __Read-only__ This account's Cloud Manager authentication type. Authentication types are chosen through Cloud Manager and authorized when logging into your account. These authentication types are either the user's password (in conjunction with their username), or the name of their identity provider such as GitHub. For example, if a user:  - Has never used Third-Party Authentication, their authentication type will be `password`. - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`). - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.  __Note__. This functionality may not yet be available in Cloud Manager. See the [Cloud Manager Changelog](https://www.linode.com/docs/products/tools/cloud-manager/release-notes/) for the latest updates.
    attr_accessor :authentication_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timezone' => :'timezone',
        :'lish_auth_method' => :'lish_auth_method',
        :'uid' => :'uid',
        :'authorized_keys' => :'authorized_keys',
        :'ip_whitelist_enabled' => :'ip_whitelist_enabled',
        :'restricted' => :'restricted',
        :'email_notifications' => :'email_notifications',
        :'email' => :'email',
        :'referrals' => :'referrals',
        :'username' => :'username',
        :'verified_phone_number' => :'verified_phone_number',
        :'two_factor_auth' => :'two_factor_auth',
        :'authentication_type' => :'authentication_type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timezone' => :'String',
        :'lish_auth_method' => :'String',
        :'uid' => :'Integer',
        :'authorized_keys' => :'Array<String>',
        :'ip_whitelist_enabled' => :'Boolean',
        :'restricted' => :'Boolean',
        :'email_notifications' => :'Boolean',
        :'email' => :'String',
        :'referrals' => :'GetProfile200ResponseReferrals',
        :'username' => :'String',
        :'verified_phone_number' => :'String',
        :'two_factor_auth' => :'Boolean',
        :'authentication_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'authorized_keys',
        :'verified_phone_number',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::GetProfile200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::GetProfile200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'lish_auth_method')
        self.lish_auth_method = attributes[:'lish_auth_method']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'authorized_keys')
        if (value = attributes[:'authorized_keys']).is_a?(Array)
          self.authorized_keys = value
        end
      end

      if attributes.key?(:'ip_whitelist_enabled')
        self.ip_whitelist_enabled = attributes[:'ip_whitelist_enabled']
      end

      if attributes.key?(:'restricted')
        self.restricted = attributes[:'restricted']
      end

      if attributes.key?(:'email_notifications')
        self.email_notifications = attributes[:'email_notifications']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'referrals')
        self.referrals = attributes[:'referrals']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'verified_phone_number')
        self.verified_phone_number = attributes[:'verified_phone_number']
      end

      if attributes.key?(:'two_factor_auth')
        self.two_factor_auth = attributes[:'two_factor_auth']
      end

      if attributes.key?(:'authentication_type')
        self.authentication_type = attributes[:'authentication_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      lish_auth_method_validator = EnumAttributeValidator.new('String', ["password_keys", "keys_only", "disabled"])
      return false unless lish_auth_method_validator.valid?(@lish_auth_method)
      authentication_type_validator = EnumAttributeValidator.new('String', ["password", "github"])
      return false unless authentication_type_validator.valid?(@authentication_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lish_auth_method Object to be assigned
    def lish_auth_method=(lish_auth_method)
      validator = EnumAttributeValidator.new('String', ["password_keys", "keys_only", "disabled"])
      unless validator.valid?(lish_auth_method)
        fail ArgumentError, "invalid value for \"lish_auth_method\", must be one of #{validator.allowable_values}."
      end
      @lish_auth_method = lish_auth_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_type Object to be assigned
    def authentication_type=(authentication_type)
      validator = EnumAttributeValidator.new('String', ["password", "github"])
      unless validator.valid?(authentication_type)
        fail ArgumentError, "invalid value for \"authentication_type\", must be one of #{validator.allowable_values}."
      end
      @authentication_type = authentication_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timezone == o.timezone &&
          lish_auth_method == o.lish_auth_method &&
          uid == o.uid &&
          authorized_keys == o.authorized_keys &&
          ip_whitelist_enabled == o.ip_whitelist_enabled &&
          restricted == o.restricted &&
          email_notifications == o.email_notifications &&
          email == o.email &&
          referrals == o.referrals &&
          username == o.username &&
          verified_phone_number == o.verified_phone_number &&
          two_factor_auth == o.two_factor_auth &&
          authentication_type == o.authentication_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timezone, lish_auth_method, uid, authorized_keys, ip_whitelist_enabled, restricted, email_notifications, email, referrals, username, verified_phone_number, two_factor_auth, authentication_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
