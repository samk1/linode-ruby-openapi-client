=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  # A Support Ticket opened on your Account.
  class GetTickets200ResponseDataInner
    # __Filterable__, __Read-only__ The date and time this Ticket was created.
    attr_accessor :opened

    # __Read-only__ The current status of this Ticket.
    attr_accessor :status

    # __Read-only__ The ID of the Support Ticket.
    attr_accessor :id

    # Whether the Support Ticket may be closed.
    attr_accessor :closable

    # __Filterable__, __Read-only__ The date and time this Ticket was last updated.
    attr_accessor :updated

    # __Read-only__ The User who last updated this Ticket.
    attr_accessor :updated_by

    attr_accessor :entity

    # __Read-only__ The full details of the issue or question.
    attr_accessor :description

    # __Read-only__ The summary or title for this Ticket.
    attr_accessor :summary

    # __Read-only__ The Gravatar ID of the User who opened this Ticket.
    attr_accessor :gravatar_id

    # __Filterable__, __Read-only__ The date and time this Ticket was closed.
    attr_accessor :closed

    # __Read-only__ The User who opened this Ticket.
    attr_accessor :opened_by

    # __Read-only__ A list of filenames representing attached files associated with this Ticket.
    attr_accessor :attachments

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'opened' => :'opened',
        :'status' => :'status',
        :'id' => :'id',
        :'closable' => :'closable',
        :'updated' => :'updated',
        :'updated_by' => :'updated_by',
        :'entity' => :'entity',
        :'description' => :'description',
        :'summary' => :'summary',
        :'gravatar_id' => :'gravatar_id',
        :'closed' => :'closed',
        :'opened_by' => :'opened_by',
        :'attachments' => :'attachments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'opened' => :'Time',
        :'status' => :'String',
        :'id' => :'Integer',
        :'closable' => :'Boolean',
        :'updated' => :'Time',
        :'updated_by' => :'String',
        :'entity' => :'GetTickets200ResponseDataInnerEntity',
        :'description' => :'String',
        :'summary' => :'String',
        :'gravatar_id' => :'String',
        :'closed' => :'Time',
        :'opened_by' => :'String',
        :'attachments' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'updated_by',
        :'entity',
        :'closed',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::GetTickets200ResponseDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::GetTickets200ResponseDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'opened')
        self.opened = attributes[:'opened']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'closable')
        self.closable = attributes[:'closable']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end

      if attributes.key?(:'entity')
        self.entity = attributes[:'entity']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'gravatar_id')
        self.gravatar_id = attributes[:'gravatar_id']
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.key?(:'opened_by')
        self.opened_by = attributes[:'opened_by']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@description.nil? && @description.to_s.length > 65000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 65000.')
      end

      if !@description.nil? && @description.to_s.length < 1
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 1.')
      end

      if !@summary.nil? && @summary.to_s.length > 64
        invalid_properties.push('invalid value for "summary", the character length must be smaller than or equal to 64.')
      end

      if !@summary.nil? && @summary.to_s.length < 1
        invalid_properties.push('invalid value for "summary", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["closed", "new", "open"])
      return false unless status_validator.valid?(@status)
      return false if !@description.nil? && @description.to_s.length > 65000
      return false if !@description.nil? && @description.to_s.length < 1
      return false if !@summary.nil? && @summary.to_s.length > 64
      return false if !@summary.nil? && @summary.to_s.length < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["closed", "new", "open"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 65000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 65000.'
      end

      if description.to_s.length < 1
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 1.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] summary Value to be assigned
    def summary=(summary)
      if summary.nil?
        fail ArgumentError, 'summary cannot be nil'
      end

      if summary.to_s.length > 64
        fail ArgumentError, 'invalid value for "summary", the character length must be smaller than or equal to 64.'
      end

      if summary.to_s.length < 1
        fail ArgumentError, 'invalid value for "summary", the character length must be great than or equal to 1.'
      end

      @summary = summary
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          opened == o.opened &&
          status == o.status &&
          id == o.id &&
          closable == o.closable &&
          updated == o.updated &&
          updated_by == o.updated_by &&
          entity == o.entity &&
          description == o.description &&
          summary == o.summary &&
          gravatar_id == o.gravatar_id &&
          closed == o.closed &&
          opened_by == o.opened_by &&
          attachments == o.attachments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [opened, status, id, closable, updated, updated_by, entity, description, summary, gravatar_id, closed, opened_by, attachments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
