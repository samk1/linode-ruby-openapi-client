=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  class PostAddLinodeConfig200Response
    # The root device to boot.  - If no value or an invalid value is provided, root device will default to `/dev/sda`. - If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
    attr_accessor :root_device

    # Optional field for arbitrary User comments on this Config.
    attr_accessor :comments

    # Controls the virtualization mode. Defaults to `paravirt`.  - `paravirt` is suitable for most cases. Linodes running in paravirt mode share some qualities with the host, ultimately making it run faster since there is less transition between it and the host. - `fullvirt` affords more customization, but is slower because 100% of the VM is virtualized.
    attr_accessor :virt_mode

    # Defines the state of your Linode after booting. Defaults to `default`.
    attr_accessor :run_level

    # __Read-only__ The ID of this Config.
    attr_accessor :id

    attr_accessor :devices

    # An array of Network Interfaces to add to this Linode's Configuration Profile. At least one and up to three Interface objects can exist in this array. The position in the array determines which of the Linode's network Interfaces is configured:  - First [0]:  eth0 - Second [1]: eth1 - Third [2]:  eth2  When updating a Linode's Interfaces, _each Interface must be redefined_. An empty `interfaces` array results in a default `public` type Interface configuration only.  If no public Interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.  __Note__. Changes to Linode Interface configurations can be enabled by rebooting the Linode.  `vpc` details  See the [VPC documentation](https://www.linode.com/docs/products/networking/vpc/#technical-specifications) guide for its specifications and limitations.  `vlan` details  - Only Next Generation Network (NGN) data centers support VLANs. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the capabilities of data center regions. If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center, the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support. - See the [VLANs Overview](https://www.linode.com/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
    attr_accessor :interfaces

    # Defaults to the total RAM of the Linode.
    attr_accessor :memory_limit

    # A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:  - `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot. - `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed. - `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.  For a complete list of options, run the [List kernels](https://techdocs.akamai.com/linode-api/reference/get-kernels) operation.
    attr_accessor :kernel

    attr_accessor :helpers

    # __Filterable__ The Config's label is for display purposes only.
    attr_accessor :label

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'root_device' => :'root_device',
        :'comments' => :'comments',
        :'virt_mode' => :'virt_mode',
        :'run_level' => :'run_level',
        :'id' => :'id',
        :'devices' => :'devices',
        :'interfaces' => :'interfaces',
        :'memory_limit' => :'memory_limit',
        :'kernel' => :'kernel',
        :'helpers' => :'helpers',
        :'label' => :'label'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'root_device' => :'String',
        :'comments' => :'String',
        :'virt_mode' => :'String',
        :'run_level' => :'String',
        :'id' => :'Integer',
        :'devices' => :'PostAddLinodeConfig200ResponseDevices',
        :'interfaces' => :'Array<PostAddLinodeConfig200ResponseInterfacesInner>',
        :'memory_limit' => :'Integer',
        :'kernel' => :'String',
        :'helpers' => :'PostAddLinodeConfig200ResponseHelpers',
        :'label' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'comments',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::PostAddLinodeConfig200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::PostAddLinodeConfig200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'root_device')
        self.root_device = attributes[:'root_device']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'virt_mode')
        self.virt_mode = attributes[:'virt_mode']
      end

      if attributes.key?(:'run_level')
        self.run_level = attributes[:'run_level']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'devices')
        self.devices = attributes[:'devices']
      end

      if attributes.key?(:'interfaces')
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
      end

      if attributes.key?(:'memory_limit')
        self.memory_limit = attributes[:'memory_limit']
      end

      if attributes.key?(:'kernel')
        self.kernel = attributes[:'kernel']
      else
        self.kernel = 'linode/latest-64bit'
      end

      if attributes.key?(:'helpers')
        self.helpers = attributes[:'helpers']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/a-z, A-Z, 0-9, \/, _, -/)
      if !@root_device.nil? && @root_device !~ pattern
        invalid_properties.push("invalid value for \"root_device\", must conform to the pattern #{pattern}.")
      end

      if !@interfaces.nil? && @interfaces.length > 3
        invalid_properties.push('invalid value for "interfaces", number of items must be less than or equal to 3.')
      end

      if !@interfaces.nil? && @interfaces.length < 1
        invalid_properties.push('invalid value for "interfaces", number of items must be greater than or equal to 1.')
      end

      if !@label.nil? && @label.to_s.length > 48
        invalid_properties.push('invalid value for "label", the character length must be smaller than or equal to 48.')
      end

      if !@label.nil? && @label.to_s.length < 1
        invalid_properties.push('invalid value for "label", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@root_device.nil? && @root_device !~ Regexp.new(/a-z, A-Z, 0-9, \/, _, -/)
      virt_mode_validator = EnumAttributeValidator.new('String', ["paravirt", "fullvirt"])
      return false unless virt_mode_validator.valid?(@virt_mode)
      run_level_validator = EnumAttributeValidator.new('String', ["default", "single", "binbash"])
      return false unless run_level_validator.valid?(@run_level)
      return false if !@interfaces.nil? && @interfaces.length > 3
      return false if !@interfaces.nil? && @interfaces.length < 1
      return false if !@label.nil? && @label.to_s.length > 48
      return false if !@label.nil? && @label.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] root_device Value to be assigned
    def root_device=(root_device)
      if root_device.nil?
        fail ArgumentError, 'root_device cannot be nil'
      end

      pattern = Regexp.new(/a-z, A-Z, 0-9, \/, _, -/)
      if root_device !~ pattern
        fail ArgumentError, "invalid value for \"root_device\", must conform to the pattern #{pattern}."
      end

      @root_device = root_device
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] virt_mode Object to be assigned
    def virt_mode=(virt_mode)
      validator = EnumAttributeValidator.new('String', ["paravirt", "fullvirt"])
      unless validator.valid?(virt_mode)
        fail ArgumentError, "invalid value for \"virt_mode\", must be one of #{validator.allowable_values}."
      end
      @virt_mode = virt_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] run_level Object to be assigned
    def run_level=(run_level)
      validator = EnumAttributeValidator.new('String', ["default", "single", "binbash"])
      unless validator.valid?(run_level)
        fail ArgumentError, "invalid value for \"run_level\", must be one of #{validator.allowable_values}."
      end
      @run_level = run_level
    end

    # Custom attribute writer method with validation
    # @param [Object] interfaces Value to be assigned
    def interfaces=(interfaces)
      if interfaces.nil?
        fail ArgumentError, 'interfaces cannot be nil'
      end

      if interfaces.length > 3
        fail ArgumentError, 'invalid value for "interfaces", number of items must be less than or equal to 3.'
      end

      if interfaces.length < 1
        fail ArgumentError, 'invalid value for "interfaces", number of items must be greater than or equal to 1.'
      end

      @interfaces = interfaces
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if label.nil?
        fail ArgumentError, 'label cannot be nil'
      end

      if label.to_s.length > 48
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 48.'
      end

      if label.to_s.length < 1
        fail ArgumentError, 'invalid value for "label", the character length must be great than or equal to 1.'
      end

      @label = label
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          root_device == o.root_device &&
          comments == o.comments &&
          virt_mode == o.virt_mode &&
          run_level == o.run_level &&
          id == o.id &&
          devices == o.devices &&
          interfaces == o.interfaces &&
          memory_limit == o.memory_limit &&
          kernel == o.kernel &&
          helpers == o.helpers &&
          label == o.label
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [root_device, comments, virt_mode, run_level, id, devices, interfaces, memory_limit, kernel, helpers, label].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
