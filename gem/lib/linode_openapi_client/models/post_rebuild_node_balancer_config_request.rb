=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  class PostRebuildNodeBalancerConfigRequest
    # How often, in seconds, to check that backends are up and serving requests.  Must be greater than `check_timeout`.
    attr_accessor :check_interval

    # ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.  - If omitted, or set to `none`, the NodeBalancer doesn't send any auxiliary data over TCP connections. This is the default. - If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol. - If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
    attr_accessor :proxy_protocol

    # The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.  - If `none` no check is performed. - `connection` requires only a connection to the backend to succeed. - `http` and `http_body` rely on the backend serving HTTP, and that the response returned matches what is expected.
    attr_accessor :check

    # __Read-only__ The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
    attr_accessor :ssl_commonname

    # __Read-only__ The ID for the NodeBalancer this config belongs to.
    attr_accessor :nodebalancer_id

    #  The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL certificate and Certificate Authority chain) that should be served on this NodeBalancerConfig's port.  Line breaks must be represented as `\\n` in the string for requests (but not when using the Linode CLI).  [Diffie-Hellman Parameters](https://www.linode.com/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.  The contents of this field will not be shown in any responses that display the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field appears.  The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig response are automatically derived from your certificate. Please refer to these fields to verify that the appropriate certificate was assigned to your NodeBalancerConfig.
    attr_accessor :ssl_cert

    attr_accessor :nodes_status

    # __Read-only__ The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
    attr_accessor :ssl_fingerprint

    # How many times to attempt a check before considering a backend to be down.
    attr_accessor :check_attempts

    # The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
    attr_accessor :port

    # The protocol this port is configured to serve.  - The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.  - The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.  Review our guide on [Available Protocols](https://www.linode.com/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
    attr_accessor :protocol

    # This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
    attr_accessor :check_body

    # What ciphers to use for SSL connections served by this NodeBalancer.  - `legacy` is considered insecure and should only be used if necessary.
    attr_accessor :cipher_suite

    # Controls how session stickiness is handled on this port.  - If set to `none` connections will always be assigned a backend based on the algorithm configured. - If set to `table` sessions from the same remote address will be routed to the same backend. - For HTTP or HTTPS clients, `http_cookie` allows sessions to be routed to the same backend based on a cookie set by the NodeBalancer.
    attr_accessor :stickiness

    # If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
    attr_accessor :check_passive

    # The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.  Line breaks must be represented as `\\n` in the string for requests (but not when using the Linode CLI).  The contents of this field will not be shown in any responses that display the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field appears.  The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig response are automatically derived from your certificate. Please refer to these fields to verify that the appropriate certificate was assigned to your NodeBalancerConfig.
    attr_accessor :ssl_key

    # The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
    attr_accessor :check_path

    # __Read-only__ This config's unique ID.
    attr_accessor :id

    # How long, in seconds, to wait for a check attempt before considering it failed.  Must be less than `check_interval`.
    attr_accessor :check_timeout

    # What algorithm this NodeBalancer should use for routing traffic to backends.
    attr_accessor :algorithm

    # The NodeBalancer Nodes that serve this Config.  Some considerations for Nodes when rebuilding a config:    - Current Nodes excluded from the request body will be deleted from the Config.   - Current Nodes (identified by their Node ID) will be updated.   - New Nodes (included without a Node ID) will be created.
    attr_accessor :nodes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'check_interval' => :'check_interval',
        :'proxy_protocol' => :'proxy_protocol',
        :'check' => :'check',
        :'ssl_commonname' => :'ssl_commonname',
        :'nodebalancer_id' => :'nodebalancer_id',
        :'ssl_cert' => :'ssl_cert',
        :'nodes_status' => :'nodes_status',
        :'ssl_fingerprint' => :'ssl_fingerprint',
        :'check_attempts' => :'check_attempts',
        :'port' => :'port',
        :'protocol' => :'protocol',
        :'check_body' => :'check_body',
        :'cipher_suite' => :'cipher_suite',
        :'stickiness' => :'stickiness',
        :'check_passive' => :'check_passive',
        :'ssl_key' => :'ssl_key',
        :'check_path' => :'check_path',
        :'id' => :'id',
        :'check_timeout' => :'check_timeout',
        :'algorithm' => :'algorithm',
        :'nodes' => :'nodes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'check_interval' => :'Integer',
        :'proxy_protocol' => :'String',
        :'check' => :'String',
        :'ssl_commonname' => :'String',
        :'nodebalancer_id' => :'Integer',
        :'ssl_cert' => :'String',
        :'nodes_status' => :'GetNodeBalancerConfig200ResponseNodesStatus',
        :'ssl_fingerprint' => :'String',
        :'check_attempts' => :'Integer',
        :'port' => :'Integer',
        :'protocol' => :'String',
        :'check_body' => :'String',
        :'cipher_suite' => :'String',
        :'stickiness' => :'String',
        :'check_passive' => :'Boolean',
        :'ssl_key' => :'String',
        :'check_path' => :'String',
        :'id' => :'Integer',
        :'check_timeout' => :'Integer',
        :'algorithm' => :'String',
        :'nodes' => :'Array<PostRebuildNodeBalancerConfigRequestAllOfNodesInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ssl_cert',
        :'ssl_key',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::PostRebuildNodeBalancerConfigRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::PostRebuildNodeBalancerConfigRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'check_interval')
        self.check_interval = attributes[:'check_interval']
      else
        self.check_interval = 31
      end

      if attributes.key?(:'proxy_protocol')
        self.proxy_protocol = attributes[:'proxy_protocol']
      else
        self.proxy_protocol = 'none'
      end

      if attributes.key?(:'check')
        self.check = attributes[:'check']
      else
        self.check = 'none'
      end

      if attributes.key?(:'ssl_commonname')
        self.ssl_commonname = attributes[:'ssl_commonname']
      end

      if attributes.key?(:'nodebalancer_id')
        self.nodebalancer_id = attributes[:'nodebalancer_id']
      end

      if attributes.key?(:'ssl_cert')
        self.ssl_cert = attributes[:'ssl_cert']
      end

      if attributes.key?(:'nodes_status')
        self.nodes_status = attributes[:'nodes_status']
      end

      if attributes.key?(:'ssl_fingerprint')
        self.ssl_fingerprint = attributes[:'ssl_fingerprint']
      end

      if attributes.key?(:'check_attempts')
        self.check_attempts = attributes[:'check_attempts']
      else
        self.check_attempts = 3
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      else
        self.port = 80
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      else
        self.protocol = 'http'
      end

      if attributes.key?(:'check_body')
        self.check_body = attributes[:'check_body']
      end

      if attributes.key?(:'cipher_suite')
        self.cipher_suite = attributes[:'cipher_suite']
      else
        self.cipher_suite = 'recommended'
      end

      if attributes.key?(:'stickiness')
        self.stickiness = attributes[:'stickiness']
      else
        self.stickiness = 'none'
      end

      if attributes.key?(:'check_passive')
        self.check_passive = attributes[:'check_passive']
      else
        self.check_passive = true
      end

      if attributes.key?(:'ssl_key')
        self.ssl_key = attributes[:'ssl_key']
      end

      if attributes.key?(:'check_path')
        self.check_path = attributes[:'check_path']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'check_timeout')
        self.check_timeout = attributes[:'check_timeout']
      else
        self.check_timeout = 30
      end

      if attributes.key?(:'algorithm')
        self.algorithm = attributes[:'algorithm']
      else
        self.algorithm = 'roundrobin'
      end

      if attributes.key?(:'nodes')
        if (value = attributes[:'nodes']).is_a?(Array)
          self.nodes = value
        end
      else
        self.nodes = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@check_attempts.nil? && @check_attempts > 30
        invalid_properties.push('invalid value for "check_attempts", must be smaller than or equal to 30.')
      end

      if !@check_attempts.nil? && @check_attempts < 1
        invalid_properties.push('invalid value for "check_attempts", must be greater than or equal to 1.')
      end

      if !@port.nil? && @port > 65535
        invalid_properties.push('invalid value for "port", must be smaller than or equal to 65535.')
      end

      if !@port.nil? && @port < 1
        invalid_properties.push('invalid value for "port", must be greater than or equal to 1.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\/\-%?&=.]*$/)
      if !@check_path.nil? && @check_path !~ pattern
        invalid_properties.push("invalid value for \"check_path\", must conform to the pattern #{pattern}.")
      end

      if !@check_timeout.nil? && @check_timeout > 30
        invalid_properties.push('invalid value for "check_timeout", must be smaller than or equal to 30.')
      end

      if !@check_timeout.nil? && @check_timeout < 1
        invalid_properties.push('invalid value for "check_timeout", must be greater than or equal to 1.')
      end

      if @nodes.nil?
        invalid_properties.push('invalid value for "nodes", nodes cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      proxy_protocol_validator = EnumAttributeValidator.new('String', ["none", "v1", "v2"])
      return false unless proxy_protocol_validator.valid?(@proxy_protocol)
      check_validator = EnumAttributeValidator.new('String', ["none", "connection", "http", "http_body"])
      return false unless check_validator.valid?(@check)
      return false if !@check_attempts.nil? && @check_attempts > 30
      return false if !@check_attempts.nil? && @check_attempts < 1
      return false if !@port.nil? && @port > 65535
      return false if !@port.nil? && @port < 1
      protocol_validator = EnumAttributeValidator.new('String', ["http", "https", "tcp"])
      return false unless protocol_validator.valid?(@protocol)
      cipher_suite_validator = EnumAttributeValidator.new('String', ["recommended", "legacy"])
      return false unless cipher_suite_validator.valid?(@cipher_suite)
      stickiness_validator = EnumAttributeValidator.new('String', ["none", "table", "http_cookie"])
      return false unless stickiness_validator.valid?(@stickiness)
      return false if !@check_path.nil? && @check_path !~ Regexp.new(/^[a-zA-Z0-9\/\-%?&=.]*$/)
      return false if !@check_timeout.nil? && @check_timeout > 30
      return false if !@check_timeout.nil? && @check_timeout < 1
      algorithm_validator = EnumAttributeValidator.new('String', ["roundrobin", "leastconn", "source"])
      return false unless algorithm_validator.valid?(@algorithm)
      return false if @nodes.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proxy_protocol Object to be assigned
    def proxy_protocol=(proxy_protocol)
      validator = EnumAttributeValidator.new('String', ["none", "v1", "v2"])
      unless validator.valid?(proxy_protocol)
        fail ArgumentError, "invalid value for \"proxy_protocol\", must be one of #{validator.allowable_values}."
      end
      @proxy_protocol = proxy_protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check Object to be assigned
    def check=(check)
      validator = EnumAttributeValidator.new('String', ["none", "connection", "http", "http_body"])
      unless validator.valid?(check)
        fail ArgumentError, "invalid value for \"check\", must be one of #{validator.allowable_values}."
      end
      @check = check
    end

    # Custom attribute writer method with validation
    # @param [Object] check_attempts Value to be assigned
    def check_attempts=(check_attempts)
      if check_attempts.nil?
        fail ArgumentError, 'check_attempts cannot be nil'
      end

      if check_attempts > 30
        fail ArgumentError, 'invalid value for "check_attempts", must be smaller than or equal to 30.'
      end

      if check_attempts < 1
        fail ArgumentError, 'invalid value for "check_attempts", must be greater than or equal to 1.'
      end

      @check_attempts = check_attempts
    end

    # Custom attribute writer method with validation
    # @param [Object] port Value to be assigned
    def port=(port)
      if port.nil?
        fail ArgumentError, 'port cannot be nil'
      end

      if port > 65535
        fail ArgumentError, 'invalid value for "port", must be smaller than or equal to 65535.'
      end

      if port < 1
        fail ArgumentError, 'invalid value for "port", must be greater than or equal to 1.'
      end

      @port = port
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      validator = EnumAttributeValidator.new('String', ["http", "https", "tcp"])
      unless validator.valid?(protocol)
        fail ArgumentError, "invalid value for \"protocol\", must be one of #{validator.allowable_values}."
      end
      @protocol = protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cipher_suite Object to be assigned
    def cipher_suite=(cipher_suite)
      validator = EnumAttributeValidator.new('String', ["recommended", "legacy"])
      unless validator.valid?(cipher_suite)
        fail ArgumentError, "invalid value for \"cipher_suite\", must be one of #{validator.allowable_values}."
      end
      @cipher_suite = cipher_suite
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stickiness Object to be assigned
    def stickiness=(stickiness)
      validator = EnumAttributeValidator.new('String', ["none", "table", "http_cookie"])
      unless validator.valid?(stickiness)
        fail ArgumentError, "invalid value for \"stickiness\", must be one of #{validator.allowable_values}."
      end
      @stickiness = stickiness
    end

    # Custom attribute writer method with validation
    # @param [Object] check_path Value to be assigned
    def check_path=(check_path)
      if check_path.nil?
        fail ArgumentError, 'check_path cannot be nil'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\/\-%?&=.]*$/)
      if check_path !~ pattern
        fail ArgumentError, "invalid value for \"check_path\", must conform to the pattern #{pattern}."
      end

      @check_path = check_path
    end

    # Custom attribute writer method with validation
    # @param [Object] check_timeout Value to be assigned
    def check_timeout=(check_timeout)
      if check_timeout.nil?
        fail ArgumentError, 'check_timeout cannot be nil'
      end

      if check_timeout > 30
        fail ArgumentError, 'invalid value for "check_timeout", must be smaller than or equal to 30.'
      end

      if check_timeout < 1
        fail ArgumentError, 'invalid value for "check_timeout", must be greater than or equal to 1.'
      end

      @check_timeout = check_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] algorithm Object to be assigned
    def algorithm=(algorithm)
      validator = EnumAttributeValidator.new('String', ["roundrobin", "leastconn", "source"])
      unless validator.valid?(algorithm)
        fail ArgumentError, "invalid value for \"algorithm\", must be one of #{validator.allowable_values}."
      end
      @algorithm = algorithm
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          check_interval == o.check_interval &&
          proxy_protocol == o.proxy_protocol &&
          check == o.check &&
          ssl_commonname == o.ssl_commonname &&
          nodebalancer_id == o.nodebalancer_id &&
          ssl_cert == o.ssl_cert &&
          nodes_status == o.nodes_status &&
          ssl_fingerprint == o.ssl_fingerprint &&
          check_attempts == o.check_attempts &&
          port == o.port &&
          protocol == o.protocol &&
          check_body == o.check_body &&
          cipher_suite == o.cipher_suite &&
          stickiness == o.stickiness &&
          check_passive == o.check_passive &&
          ssl_key == o.ssl_key &&
          check_path == o.check_path &&
          id == o.id &&
          check_timeout == o.check_timeout &&
          algorithm == o.algorithm &&
          nodes == o.nodes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [check_interval, proxy_protocol, check, ssl_commonname, nodebalancer_id, ssl_cert, nodes_status, ssl_fingerprint, check_attempts, port, protocol, check_body, cipher_suite, stickiness, check_passive, ssl_key, check_path, id, check_timeout, algorithm, nodes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
