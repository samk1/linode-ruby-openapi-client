=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module LinodeOpenapiClient
  class Linode5
    # __Read-only__ The Linode's host machine, as a UUID.
    attr_accessor :host_uuid

    attr_accessor :backups

    attr_accessor :alerts

    # __Filterable__ A deprecated property denoting a group label for this Linode.
    attr_accessor :group

    # __Read-only__ A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display `stopped`.
    attr_accessor :status

    # __Filterable__, __Read-only__ This Linode's ID which must be provided for all operations impacting this Linode.
    attr_accessor :id

    # __Read-only__ This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
    attr_accessor :ipv6

    attr_accessor :specs

    # __Read-only__ The virtualization software powering this Linode.
    attr_accessor :hypervisor

    # __Filterable__ An array of tags applied to this object.  Tags are for organizational purposes only.
    attr_accessor :tags

    # __Filterable__, __Read-only__ This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to get additional IPv4 addresses.  IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes. See the [networking](https://techdocs.akamai.com/linode-api/reference/post-firewalls) operations for details.
    attr_accessor :ipv4

    # __Read-only__ When this Linode was created.
    attr_accessor :created

    # __Filterable__, __Read-only__ This is the [region](https://techdocs.akamai.com/linode-api/reference/get-regions) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](https://techdocs.akamai.com/linode-api/reference/post-migrate-linode-instance).
    attr_accessor :region

    # __Filterable__ The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.  Linode labels have the following constraints:  - Must begin and end with an alphanumeric character. - May only consist of alphanumeric characters, hyphens (`-`), underscores (`_`) or periods (`.`). - Cannot have two hyphens (`--`), underscores (`__`) or periods (`..`) in a row.
    attr_accessor :label

    # __Read-only__ This is the [Linode type](https://techdocs.akamai.com/linode-api/reference/get-linode-types) that this Linode was deployed with. To change a Linode's Type, use [Resize a Linode](https://techdocs.akamai.com/linode-api/reference/post-resize-linode-instance).
    attr_accessor :type

    # __Read-only__ When this Linode was last updated.
    attr_accessor :updated

    attr_accessor :placement_group

    # An Image ID to deploy the Linode Disk from.  Run the [List images](https://techdocs.akamai.com/linode-api/reference/get-images) operation with authentication to view all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Run the [Update a user's grants](https://techdocs.akamai.com/linode-api/reference/put-user-grants) operation to adjust permissions for an Account Image.
    attr_accessor :image

    # __Read-only__ Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) description for more information on Metadata.
    attr_accessor :has_user_data

    # The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
    attr_accessor :watchdog_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'host_uuid' => :'host_uuid',
        :'backups' => :'backups',
        :'alerts' => :'alerts',
        :'group' => :'group',
        :'status' => :'status',
        :'id' => :'id',
        :'ipv6' => :'ipv6',
        :'specs' => :'specs',
        :'hypervisor' => :'hypervisor',
        :'tags' => :'tags',
        :'ipv4' => :'ipv4',
        :'created' => :'created',
        :'region' => :'region',
        :'label' => :'label',
        :'type' => :'type',
        :'updated' => :'updated',
        :'placement_group' => :'placement_group',
        :'image' => :'image',
        :'has_user_data' => :'has_user_data',
        :'watchdog_enabled' => :'watchdog_enabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'host_uuid' => :'String',
        :'backups' => :'Linode5Backups',
        :'alerts' => :'Linode5Alerts',
        :'group' => :'String',
        :'status' => :'String',
        :'id' => :'Integer',
        :'ipv6' => :'String',
        :'specs' => :'Linode5Specs',
        :'hypervisor' => :'String',
        :'tags' => :'Array<String>',
        :'ipv4' => :'Array<String>',
        :'created' => :'Time',
        :'region' => :'String',
        :'label' => :'String',
        :'type' => :'String',
        :'updated' => :'Time',
        :'placement_group' => :'Linode5PlacementGroup',
        :'image' => :'String',
        :'has_user_data' => :'Boolean',
        :'watchdog_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ipv6',
        :'placement_group',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LinodeOpenapiClient::Linode5` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LinodeOpenapiClient::Linode5`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'host_uuid')
        self.host_uuid = attributes[:'host_uuid']
      end

      if attributes.key?(:'backups')
        self.backups = attributes[:'backups']
      end

      if attributes.key?(:'alerts')
        self.alerts = attributes[:'alerts']
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ipv6')
        self.ipv6 = attributes[:'ipv6']
      end

      if attributes.key?(:'specs')
        self.specs = attributes[:'specs']
      end

      if attributes.key?(:'hypervisor')
        self.hypervisor = attributes[:'hypervisor']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'ipv4')
        if (value = attributes[:'ipv4']).is_a?(Array)
          self.ipv4 = value
        end
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'placement_group')
        self.placement_group = attributes[:'placement_group']
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'has_user_data')
        self.has_user_data = attributes[:'has_user_data']
      end

      if attributes.key?(:'watchdog_enabled')
        self.watchdog_enabled = attributes[:'watchdog_enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@label.nil? && @label.to_s.length > 64
        invalid_properties.push('invalid value for "label", the character length must be smaller than or equal to 64.')
      end

      if !@label.nil? && @label.to_s.length < 3
        invalid_properties.push('invalid value for "label", the character length must be great than or equal to 3.')
      end

      pattern = Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      if !@label.nil? && @label !~ pattern
        invalid_properties.push("invalid value for \"label\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["running", "offline", "booting", "rebooting", "shutting_down", "provisioning", "deleting", "migrating", "rebuilding", "cloning", "restoring", "stopped", "billing_suspension"])
      return false unless status_validator.valid?(@status)
      hypervisor_validator = EnumAttributeValidator.new('String', ["kvm"])
      return false unless hypervisor_validator.valid?(@hypervisor)
      return false if !@label.nil? && @label.to_s.length > 64
      return false if !@label.nil? && @label.to_s.length < 3
      return false if !@label.nil? && @label !~ Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["running", "offline", "booting", "rebooting", "shutting_down", "provisioning", "deleting", "migrating", "rebuilding", "cloning", "restoring", "stopped", "billing_suspension"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hypervisor Object to be assigned
    def hypervisor=(hypervisor)
      validator = EnumAttributeValidator.new('String', ["kvm"])
      unless validator.valid?(hypervisor)
        fail ArgumentError, "invalid value for \"hypervisor\", must be one of #{validator.allowable_values}."
      end
      @hypervisor = hypervisor
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if label.nil?
        fail ArgumentError, 'label cannot be nil'
      end

      if label.to_s.length > 64
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 64.'
      end

      if label.to_s.length < 3
        fail ArgumentError, 'invalid value for "label", the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$/)
      if label !~ pattern
        fail ArgumentError, "invalid value for \"label\", must conform to the pattern #{pattern}."
      end

      @label = label
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          host_uuid == o.host_uuid &&
          backups == o.backups &&
          alerts == o.alerts &&
          group == o.group &&
          status == o.status &&
          id == o.id &&
          ipv6 == o.ipv6 &&
          specs == o.specs &&
          hypervisor == o.hypervisor &&
          tags == o.tags &&
          ipv4 == o.ipv4 &&
          created == o.created &&
          region == o.region &&
          label == o.label &&
          type == o.type &&
          updated == o.updated &&
          placement_group == o.placement_group &&
          image == o.image &&
          has_user_data == o.has_user_data &&
          watchdog_enabled == o.watchdog_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [host_uuid, backups, alerts, group, status, id, ipv6, specs, hypervisor, tags, ipv4, created, region, label, type, updated, placement_group, image, has_user_data, watchdog_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LinodeOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
