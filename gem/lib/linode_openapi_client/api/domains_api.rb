=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class DomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a domain
    # Deletes a Domain from Linode's DNS Manager. The Domain will be removed from Linode's nameservers shortly after this operation completes. This also deletes all associated Domain Records.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains delete 1234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_domain(api_version, domain_id, opts = {})
      data, _status_code, _headers = delete_domain_with_http_info(api_version, domain_id, opts)
      data
    end

    # Delete a domain
    # Deletes a Domain from Linode&#39;s DNS Manager. The Domain will be removed from Linode&#39;s nameservers shortly after this operation completes. This also deletes all associated Domain Records.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains delete 1234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_domain_with_http_info(api_version, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.delete_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.delete_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.delete_domain"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.delete_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a domain record
    # Deletes a Record on this Domain.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains records-delete 123 234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_domain_record(api_version, domain_id, record_id, opts = {})
      data, _status_code, _headers = delete_domain_record_with_http_info(api_version, domain_id, record_id, opts)
      data
    end

    # Delete a domain record
    # Deletes a Record on this Domain.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains records-delete 123 234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_domain_record_with_http_info(api_version, domain_id, record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.delete_domain_record ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.delete_domain_record"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.delete_domain_record"
      end
      # verify the required parameter 'record_id' is set
      if @api_client.config.client_side_validation && record_id.nil?
        fail ArgumentError, "Missing the required parameter 'record_id' when calling DomainsApi.delete_domain_record"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/records/{recordId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'recordId' + '}', CGI.escape(record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.delete_domain_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#delete_domain_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a domain
    # This is a single Domain that you have registered in Linode's DNS Manager. Linode is not a registrar, and in order for this Domain record to work you must own the domain and point your registrar at Linode's nameservers.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param [Hash] opts the optional parameters
    # @return [Domain3]
    def get_domain(api_version, domain_id, opts = {})
      data, _status_code, _headers = get_domain_with_http_info(api_version, domain_id, opts)
      data
    end

    # Get a domain
    # This is a single Domain that you have registered in Linode&#39;s DNS Manager. Linode is not a registrar, and in order for this Domain record to work you must own the domain and point your registrar at Linode&#39;s nameservers.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain3, Integer, Hash)>] Domain3 data, response status code and response headers
    def get_domain_with_http_info(api_version, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.get_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.get_domain"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Domain3'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a domain record
    # View a single Record on this Domain.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains records-view 123 234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param [Hash] opts the optional parameters
    # @return [GetDomainRecord200Response]
    def get_domain_record(api_version, domain_id, record_id, opts = {})
      data, _status_code, _headers = get_domain_record_with_http_info(api_version, domain_id, record_id, opts)
      data
    end

    # Get a domain record
    # View a single Record on this Domain.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains records-view 123 234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDomainRecord200Response, Integer, Hash)>] GetDomainRecord200Response data, response status code and response headers
    def get_domain_record_with_http_info(api_version, domain_id, record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domain_record ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.get_domain_record"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.get_domain_record"
      end
      # verify the required parameter 'record_id' is set
      if @api_client.config.client_side_validation && record_id.nil?
        fail ArgumentError, "Missing the required parameter 'record_id' when calling DomainsApi.get_domain_record"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/records/{recordId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'recordId' + '}', CGI.escape(record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDomainRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domain_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domain_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List domain records
    # Returns a paginated list of Records configured on a Domain in Linode's DNS Manager.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains records-list 1234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain we are accessing Records for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetDomainRecords200Response]
    def get_domain_records(api_version, domain_id, opts = {})
      data, _status_code, _headers = get_domain_records_with_http_info(api_version, domain_id, opts)
      data
    end

    # List domain records
    # Returns a paginated list of Records configured on a Domain in Linode&#39;s DNS Manager.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains records-list 1234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain we are accessing Records for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetDomainRecords200Response, Integer, Hash)>] GetDomainRecords200Response data, response status code and response headers
    def get_domain_records_with_http_info(api_version, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domain_records ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.get_domain_records"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.get_domain_records"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling DomainsApi.get_domain_records, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DomainsApi.get_domain_records, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DomainsApi.get_domain_records, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/records'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDomainRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domain_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domain_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a domain zone file
    # Returns the zone file for the last rendered zone for the specified domain.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains zone-file 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [String] ID of the Domain.
    # @param [Hash] opts the optional parameters
    # @return [GetDomainZone200Response]
    def get_domain_zone(api_version, domain_id, opts = {})
      data, _status_code, _headers = get_domain_zone_with_http_info(api_version, domain_id, opts)
      data
    end

    # Get a domain zone file
    # Returns the zone file for the last rendered zone for the specified domain.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains zone-file 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [String] ID of the Domain.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDomainZone200Response, Integer, Hash)>] GetDomainZone200Response data, response status code and response headers
    def get_domain_zone_with_http_info(api_version, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domain_zone ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.get_domain_zone"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.get_domain_zone"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/zone-file'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDomainZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domain_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domain_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List domains
    # This is a collection of Domains that you have registered in Linode's DNS Manager.  Linode is not a registrar, and in order for these to work you must own the domains and point your registrar at Linode's nameservers.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetDomains200Response]
    def get_domains(api_version, opts = {})
      data, _status_code, _headers = get_domains_with_http_info(api_version, opts)
      data
    end

    # List domains
    # This is a collection of Domains that you have registered in Linode&#39;s DNS Manager.  Linode is not a registrar, and in order for these to work you must own the domains and point your registrar at Linode&#39;s nameservers.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetDomains200Response, Integer, Hash)>] GetDomains200Response data, response status code and response headers
    def get_domains_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.get_domains ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.get_domains"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling DomainsApi.get_domains, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DomainsApi.get_domains, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DomainsApi.get_domains, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/domains'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDomains200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.get_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#get_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone a domain
    # Clones a Domain and all associated DNS records from a Domain that is registered in Linode's DNS manager.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains clone 123 --domain example.com     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [String] ID of the Domain to clone.
    # @param post_clone_domain_request [PostCloneDomainRequest] Information about the Domain to clone.
    # @param [Hash] opts the optional parameters
    # @return [Domain7]
    def post_clone_domain(api_version, domain_id, post_clone_domain_request, opts = {})
      data, _status_code, _headers = post_clone_domain_with_http_info(api_version, domain_id, post_clone_domain_request, opts)
      data
    end

    # Clone a domain
    # Clones a Domain and all associated DNS records from a Domain that is registered in Linode&#39;s DNS manager.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains clone 123 --domain example.com     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [String] ID of the Domain to clone.
    # @param post_clone_domain_request [PostCloneDomainRequest] Information about the Domain to clone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain7, Integer, Hash)>] Domain7 data, response status code and response headers
    def post_clone_domain_with_http_info(api_version, domain_id, post_clone_domain_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.post_clone_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.post_clone_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.post_clone_domain"
      end
      # verify the required parameter 'post_clone_domain_request' is set
      if @api_client.config.client_side_validation && post_clone_domain_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_clone_domain_request' when calling DomainsApi.post_clone_domain"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/clone'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_clone_domain_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Domain7'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.post_clone_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#post_clone_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a domain
    # Adds a new Domain to Linode's DNS Manager. Linode is not a registrar, and you must own the domain before adding it here. Be sure to point your registrar to Linode's nameservers so that the records hosted here are used.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains create \\   --type master \\   --domain example.org \\   --soa_email admin@example.org     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_domain_request [PostDomainRequest] Information about the domain you are registering.
    # @param [Hash] opts the optional parameters
    # @return [Domain2]
    def post_domain(api_version, post_domain_request, opts = {})
      data, _status_code, _headers = post_domain_with_http_info(api_version, post_domain_request, opts)
      data
    end

    # Create a domain
    # Adds a new Domain to Linode&#39;s DNS Manager. Linode is not a registrar, and you must own the domain before adding it here. Be sure to point your registrar to Linode&#39;s nameservers so that the records hosted here are used.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains create \\   --type master \\   --domain example.org \\   --soa_email admin@example.org     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_domain_request [PostDomainRequest] Information about the domain you are registering.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain2, Integer, Hash)>] Domain2 data, response status code and response headers
    def post_domain_with_http_info(api_version, post_domain_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.post_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.post_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_domain_request' is set
      if @api_client.config.client_side_validation && post_domain_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_domain_request' when calling DomainsApi.post_domain"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_domain_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Domain2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.post_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#post_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a domain record
    # Adds a new Domain Record to the zonefile this Domain represents.  Each domain can have up to 12,000 active records.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains records-create 123 \\   --type A \\   --name test \\   --target 203.0.113.1 \\   --priority 50 \\   --weight 50 \\   --port 80 \\   --ttl_sec 604800     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain we are accessing Records for.
    # @param post_domain_record_request [PostDomainRecordRequest] Information about the new Record to add.
    # @param [Hash] opts the optional parameters
    # @return [PostDomainRecord200Response]
    def post_domain_record(api_version, domain_id, post_domain_record_request, opts = {})
      data, _status_code, _headers = post_domain_record_with_http_info(api_version, domain_id, post_domain_record_request, opts)
      data
    end

    # Create a domain record
    # Adds a new Domain Record to the zonefile this Domain represents.  Each domain can have up to 12,000 active records.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains records-create 123 \\   --type A \\   --name test \\   --target 203.0.113.1 \\   --priority 50 \\   --weight 50 \\   --port 80 \\   --ttl_sec 604800     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain we are accessing Records for.
    # @param post_domain_record_request [PostDomainRecordRequest] Information about the new Record to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostDomainRecord200Response, Integer, Hash)>] PostDomainRecord200Response data, response status code and response headers
    def post_domain_record_with_http_info(api_version, domain_id, post_domain_record_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.post_domain_record ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.post_domain_record"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.post_domain_record"
      end
      # verify the required parameter 'post_domain_record_request' is set
      if @api_client.config.client_side_validation && post_domain_record_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_domain_record_request' when calling DomainsApi.post_domain_record"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/records'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_domain_record_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostDomainRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.post_domain_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#post_domain_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import a domain
    # Imports a domain zone from a remote nameserver. Your nameserver must allow zone transfers (AXFR) from the following IPs:  - 96.126.114.97 - 96.126.114.98 - 2600:3c00::5e - 2600:3c00::5f   <<LB>>  ---   - __CLI__.      ```     linode-cli domains import --domain example.com --remote_nameserver examplenameserver.com     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostImportDomainRequest] :post_import_domain_request Information about the Domain to import.
    # @return [Domain6]
    def post_import_domain(api_version, opts = {})
      data, _status_code, _headers = post_import_domain_with_http_info(api_version, opts)
      data
    end

    # Import a domain
    # Imports a domain zone from a remote nameserver. Your nameserver must allow zone transfers (AXFR) from the following IPs:  - 96.126.114.97 - 96.126.114.98 - 2600:3c00::5e - 2600:3c00::5f   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains import --domain example.com --remote_nameserver examplenameserver.com     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostImportDomainRequest] :post_import_domain_request Information about the Domain to import.
    # @return [Array<(Domain6, Integer, Hash)>] Domain6 data, response status code and response headers
    def post_import_domain_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.post_import_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.post_import_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/import'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_import_domain_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Domain6'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.post_import_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#post_import_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a domain
    # Update information about a Domain in Linode's DNS Manager.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains update 1234 \\   --retry_sec 7200 \\   --ttl_sec 300     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param domain4 [Domain4] The Domain information to update.
    # @param [Hash] opts the optional parameters
    # @return [Domain5]
    def put_domain(api_version, domain_id, domain4, opts = {})
      data, _status_code, _headers = put_domain_with_http_info(api_version, domain_id, domain4, opts)
      data
    end

    # Update a domain
    # Update information about a Domain in Linode&#39;s DNS Manager.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains update 1234 \\   --retry_sec 7200 \\   --ttl_sec 300     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain to access.
    # @param domain4 [Domain4] The Domain information to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain5, Integer, Hash)>] Domain5 data, response status code and response headers
    def put_domain_with_http_info(api_version, domain_id, domain4, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.put_domain ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.put_domain"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.put_domain"
      end
      # verify the required parameter 'domain4' is set
      if @api_client.config.client_side_validation && domain4.nil?
        fail ArgumentError, "Missing the required parameter 'domain4' when calling DomainsApi.put_domain"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(domain4)

      # return_type
      return_type = opts[:debug_return_type] || 'Domain5'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.put_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#put_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a domain record
    # Updates a single Record on this Domain.   <<LB>>  ---   - __CLI__.      ```     linode-cli domains records-update 123 234 \\   --name test \\   --target 203.0.113.1 \\   --priority 50 \\   --weight 50 \\   --port 80 \\   --ttl_sec 604800     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     domains:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param put_domain_record_request [PutDomainRecordRequest] The values to change.
    # @param [Hash] opts the optional parameters
    # @return [PutDomainRecord200Response]
    def put_domain_record(api_version, domain_id, record_id, put_domain_record_request, opts = {})
      data, _status_code, _headers = put_domain_record_with_http_info(api_version, domain_id, record_id, put_domain_record_request, opts)
      data
    end

    # Update a domain record
    # Updates a single Record on this Domain.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli domains records-update 123 234 \\   --name test \\   --target 203.0.113.1 \\   --priority 50 \\   --weight 50 \\   --port 80 \\   --ttl_sec 604800     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     domains:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param domain_id [Integer] The ID of the Domain whose Record you are accessing.
    # @param record_id [Integer] The ID of the Record you are accessing.
    # @param put_domain_record_request [PutDomainRecordRequest] The values to change.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutDomainRecord200Response, Integer, Hash)>] PutDomainRecord200Response data, response status code and response headers
    def put_domain_record_with_http_info(api_version, domain_id, record_id, put_domain_record_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.put_domain_record ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DomainsApi.put_domain_record"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.put_domain_record"
      end
      # verify the required parameter 'record_id' is set
      if @api_client.config.client_side_validation && record_id.nil?
        fail ArgumentError, "Missing the required parameter 'record_id' when calling DomainsApi.put_domain_record"
      end
      # verify the required parameter 'put_domain_record_request' is set
      if @api_client.config.client_side_validation && put_domain_record_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_domain_record_request' when calling DomainsApi.put_domain_record"
      end
      # resource path
      local_var_path = '/{apiVersion}/domains/{domainId}/records/{recordId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'domainId' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'recordId' + '}', CGI.escape(record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_domain_record_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutDomainRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"DomainsApi.put_domain_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#put_domain_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
