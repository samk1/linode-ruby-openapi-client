=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class ObjectStorageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Remove an Object Storage bucket
    # Removes a single bucket.  > ðŸ“˜ > > - You need to remove all objects from a bucket before you can delete it. While you *can* delete a bucket using the [s3cmd command-line tool](https://www.linode.com/docs/products/storage/object-storage/guides/s3cmd/#delete-a-bucket), this operation fails if the bucket contains too many objects. The best way to empty large buckets is to use the [S3 API to configure lifecycle policies](https://docs.ceph.com/en/latest/radosgw/bucketpolicy/#). Set a policy to remove all objects, wait a day or more for the system to remove all objects, then delete the bucket. > > - The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#delete-bucket) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_object_storage_bucket(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = delete_object_storage_bucket_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Remove an Object Storage bucket
    # Removes a single bucket.  &gt; ðŸ“˜ &gt; &gt; - You need to remove all objects from a bucket before you can delete it. While you *can* delete a bucket using the [s3cmd command-line tool](https://www.linode.com/docs/products/storage/object-storage/guides/s3cmd/#delete-a-bucket), this operation fails if the bucket contains too many objects. The best way to empty large buckets is to use the [S3 API to configure lifecycle policies](https://docs.ceph.com/en/latest/radosgw/bucketpolicy/#). Set a policy to remove all objects, wait a day or more for the system to remove all objects, then delete the bucket. &gt; &gt; - The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#delete-bucket) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_object_storage_bucket_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.delete_object_storage_bucket ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.delete_object_storage_bucket"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.delete_object_storage_bucket"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.delete_object_storage_bucket"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.delete_object_storage_bucket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#delete_object_storage_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke an Object Storage key
    # Revokes an Object Storage Key. This keypair will no longer be usable by third-party clients.  - A successful request triggers an `obj_access_key_delete` event.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage keys-delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_object_storage_key(api_version, key_id, opts = {})
      data, _status_code, _headers = delete_object_storage_key_with_http_info(api_version, key_id, opts)
      data
    end

    # Revoke an Object Storage key
    # Revokes an Object Storage Key. This keypair will no longer be usable by third-party clients.  - A successful request triggers an &#x60;obj_access_key_delete&#x60; event.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage keys-delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_object_storage_key_with_http_info(api_version, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.delete_object_storage_key ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.delete_object_storage_key"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ObjectStorageApi.delete_object_storage_key"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/keys/{keyId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.delete_object_storage_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#delete_object_storage_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Object Storage TLS/SSL certificate
    # Deletes this Object Storage bucket's user uploaded TLS/SSL certificate and private key.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage ssl-delete \\   us-east-1 example-bucket     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_object_storage_ssl(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = delete_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Delete an Object Storage TLS/SSL certificate
    # Deletes this Object Storage bucket&#39;s user uploaded TLS/SSL certificate and private key.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage ssl-delete \\   us-east-1 example-bucket     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.delete_object_storage_ssl ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.delete_object_storage_ssl"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.delete_object_storage_ssl"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.delete_object_storage_ssl"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/ssl'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.delete_object_storage_ssl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#delete_object_storage_ssl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Object Storage bucket
    # Returns a single Object Storage bucket.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageBucket200Response]
    def get_object_storage_bucket(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = get_object_storage_bucket_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Get an Object Storage bucket
    # Returns a single Object Storage bucket.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageBucket200Response, Integer, Hash)>] GetObjectStorageBucket200Response data, response status code and response headers
    def get_object_storage_bucket_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_bucket ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_bucket"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.get_object_storage_bucket"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.get_object_storage_bucket"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageBucket200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_bucket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Object Storage object ACL config
    # View an Object's configured Access Control List (ACL) in this Object Storage bucket. ACLs define who can access your buckets and objects and specify the level of access granted to those users.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object-acl) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param name [String] The &#x60;name&#x60; of the object for which to retrieve its Access Control List (ACL). Run the [List Object Storage bucket contents](https://techdocs.akamai.com/linode-api/reference/get-object-storage-bucket-content) operation to access all object names in a bucket.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageBucketAcl200Response]
    def get_object_storage_bucket_acl(api_version, region_id, bucket, name, opts = {})
      data, _status_code, _headers = get_object_storage_bucket_acl_with_http_info(api_version, region_id, bucket, name, opts)
      data
    end

    # Get an Object Storage object ACL config
    # View an Object&#39;s configured Access Control List (ACL) in this Object Storage bucket. ACLs define who can access your buckets and objects and specify the level of access granted to those users.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object-acl) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param name [String] The &#x60;name&#x60; of the object for which to retrieve its Access Control List (ACL). Run the [List Object Storage bucket contents](https://techdocs.akamai.com/linode-api/reference/get-object-storage-bucket-content) operation to access all object names in a bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageBucketAcl200Response, Integer, Hash)>] GetObjectStorageBucketAcl200Response data, response status code and response headers
    def get_object_storage_bucket_acl_with_http_info(api_version, region_id, bucket, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_bucket_acl ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_bucket_acl"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.get_object_storage_bucket_acl"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.get_object_storage_bucket_acl"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ObjectStorageApi.get_object_storage_bucket_acl"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/object-acl'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageBucketAcl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_bucket_acl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_bucket_acl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Object Storage bucket contents
    # Returns the contents of a bucket. The contents are paginated using a `marker`, that's the name of the last object on the previous page.  Objects can also be filtered by `prefix` and `delimiter`. See [Filtering and sorting](https://techdocs.akamai.com/linode-api/reference/filtering-and-sorting) for more information.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :marker The \&quot;marker\&quot; for this request, which can be used to paginate through large buckets. Its value should be the value of the &#x60;next_marker&#x60; property returned with the last page. Listing bucket contents _does not_ support arbitrary page access. See the &#x60;next_marker&#x60; property in the responses section for more details.
    # @option opts [String] :delimiter The delimiter for object names; if given, object names will be returned up to the first occurrence of this character. This is most commonly used with the &#x60;/&#x60; character to allow bucket transversal in a manner similar to a filesystem, however any delimiter may be used. Use in conjunction with &#x60;prefix&#x60; to see object names past the first occurrence of the delimiter.
    # @option opts [String] :prefix Filters objects returned to only those whose name start with the given prefix. Commonly used in conjunction with &#x60;delimiter&#x60; to allow transversal of bucket contents in a manner similar to a filesystem.
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetObjectStorageBucketContent200Response]
    def get_object_storage_bucket_content(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = get_object_storage_bucket_content_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # List Object Storage bucket contents
    # Returns the contents of a bucket. The contents are paginated using a &#x60;marker&#x60;, that&#39;s the name of the last object on the previous page.  Objects can also be filtered by &#x60;prefix&#x60; and &#x60;delimiter&#x60;. See [Filtering and sorting](https://techdocs.akamai.com/linode-api/reference/filtering-and-sorting) for more information.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :marker The \&quot;marker\&quot; for this request, which can be used to paginate through large buckets. Its value should be the value of the &#x60;next_marker&#x60; property returned with the last page. Listing bucket contents _does not_ support arbitrary page access. See the &#x60;next_marker&#x60; property in the responses section for more details.
    # @option opts [String] :delimiter The delimiter for object names; if given, object names will be returned up to the first occurrence of this character. This is most commonly used with the &#x60;/&#x60; character to allow bucket transversal in a manner similar to a filesystem, however any delimiter may be used. Use in conjunction with &#x60;prefix&#x60; to see object names past the first occurrence of the delimiter.
    # @option opts [String] :prefix Filters objects returned to only those whose name start with the given prefix. Commonly used in conjunction with &#x60;delimiter&#x60; to allow transversal of bucket contents in a manner similar to a filesystem.
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetObjectStorageBucketContent200Response, Integer, Hash)>] GetObjectStorageBucketContent200Response data, response status code and response headers
    def get_object_storage_bucket_content_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_bucket_content ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_bucket_content"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.get_object_storage_bucket_content"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.get_object_storage_bucket_content"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ObjectStorageApi.get_object_storage_bucket_content, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ObjectStorageApi.get_object_storage_bucket_content, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/object-list'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marker'] = opts[:'marker'] if !opts[:'marker'].nil?
      query_params[:'delimiter'] = opts[:'delimiter'] if !opts[:'delimiter'].nil?
      query_params[:'prefix'] = opts[:'prefix'] if !opts[:'prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageBucketContent200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_bucket_content",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_bucket_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Object Storage buckets per region
    # Returns a list of buckets on your account, in the specified region.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageBucketinCluster200Response]
    def get_object_storage_bucketin_cluster(api_version, region_id, opts = {})
      data, _status_code, _headers = get_object_storage_bucketin_cluster_with_http_info(api_version, region_id, opts)
      data
    end

    # List Object Storage buckets per region
    # Returns a list of buckets on your account, in the specified region.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageBucketinCluster200Response, Integer, Hash)>] GetObjectStorageBucketinCluster200Response data, response status code and response headers
    def get_object_storage_bucketin_cluster_with_http_info(api_version, region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_bucketin_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_bucketin_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.get_object_storage_bucketin_cluster"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageBucketinCluster200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_bucketin_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_bucketin_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Object Storage buckets
    # Returns a paginated list of all Object Storage buckets available in your account.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/serviceops/#list-buckets) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageBuckets200Response]
    def get_object_storage_buckets(api_version, opts = {})
      data, _status_code, _headers = get_object_storage_buckets_with_http_info(api_version, opts)
      data
    end

    # List Object Storage buckets
    # Returns a paginated list of all Object Storage buckets available in your account.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/serviceops/#list-buckets) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageBuckets200Response, Integer, Hash)>] GetObjectStorageBuckets200Response data, response status code and response headers
    def get_object_storage_buckets_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_buckets ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_buckets"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageBuckets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_buckets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_buckets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a cluster
    # __Deprecated__ Returns a single Object Storage cluster.  > ðŸ“˜ > > This displays deprecated `clusterId` values that represent regions used with older versions of the API. It's maintained for backward compatibility. Run [Get a region](https://techdocs.akamai.com/linode-api/reference/get-region), instead.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage clusters-view us-east-1     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [String] Identifies a cluster where this bucket lives. For backward compatibility with Object Storage in this API.  &gt; ðŸ“˜ &gt; &gt; You can use the applicable &#x60;regionId&#x60;, for example &#x60;us-west&#x60;, in place of the &#x60;clusterId&#x60;, for example, &#x60;us-west-1&#x60;. Run [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) to see all regions.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageCluster200Response]
    def get_object_storage_cluster(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_object_storage_cluster_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Get a cluster
    # __Deprecated__ Returns a single Object Storage cluster.  &gt; ðŸ“˜ &gt; &gt; This displays deprecated &#x60;clusterId&#x60; values that represent regions used with older versions of the API. It&#39;s maintained for backward compatibility. Run [Get a region](https://techdocs.akamai.com/linode-api/reference/get-region), instead.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage clusters-view us-east-1     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [String] Identifies a cluster where this bucket lives. For backward compatibility with Object Storage in this API.  &gt; ðŸ“˜ &gt; &gt; You can use the applicable &#x60;regionId&#x60;, for example &#x60;us-west&#x60;, in place of the &#x60;clusterId&#x60;, for example, &#x60;us-west-1&#x60;. Run [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) to see all regions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageCluster200Response, Integer, Hash)>] GetObjectStorageCluster200Response data, response status code and response headers
    def get_object_storage_cluster_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling ObjectStorageApi.get_object_storage_cluster"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/clusters/{clusterId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageCluster200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List clusters
    # Returns a paginated list of available Object Storage legacy clusters.  > ðŸ“˜ > > This displays deprecated `clusterId` values that represent regions used with older versions of the API. It's maintained for backward compatibility. Run [Get a region](https://techdocs.akamai.com/linode-api/reference/get-region), instead.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage clusters-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageClusters200Response]
    def get_object_storage_clusters(api_version, opts = {})
      data, _status_code, _headers = get_object_storage_clusters_with_http_info(api_version, opts)
      data
    end

    # List clusters
    # Returns a paginated list of available Object Storage legacy clusters.  &gt; ðŸ“˜ &gt; &gt; This displays deprecated &#x60;clusterId&#x60; values that represent regions used with older versions of the API. It&#39;s maintained for backward compatibility. Run [Get a region](https://techdocs.akamai.com/linode-api/reference/get-region), instead.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage clusters-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageClusters200Response, Integer, Hash)>] GetObjectStorageClusters200Response data, response status code and response headers
    def get_object_storage_clusters_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_clusters ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_clusters"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/clusters'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageClusters200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_clusters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Object Storage key
    # Returns a single Object Storage key provisioned for your account.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage keys-view \\   --keyId 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageKey200Response]
    def get_object_storage_key(api_version, key_id, opts = {})
      data, _status_code, _headers = get_object_storage_key_with_http_info(api_version, key_id, opts)
      data
    end

    # Get an Object Storage key
    # Returns a single Object Storage key provisioned for your account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage keys-view \\   --keyId 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageKey200Response, Integer, Hash)>] GetObjectStorageKey200Response data, response status code and response headers
    def get_object_storage_key_with_http_info(api_version, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_key ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_key"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ObjectStorageApi.get_object_storage_key"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/keys/{keyId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageKey200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Object Storage keys
    # Returns a paginated list of Object Storage keys for authenticating to the Object Storage S3 API.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage keys-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageKeys200Response]
    def get_object_storage_keys(api_version, opts = {})
      data, _status_code, _headers = get_object_storage_keys_with_http_info(api_version, opts)
      data
    end

    # List Object Storage keys
    # Returns a paginated list of Object Storage keys for authenticating to the Object Storage S3 API.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage keys-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageKeys200Response, Integer, Hash)>] GetObjectStorageKeys200Response data, response status code and response headers
    def get_object_storage_keys_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_keys ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_keys"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/keys'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageKeys200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Object Storage TLS/SSL certificate
    # Returns a boolean value indicating if this bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage ssl-view \\   us-east-1 example-bucket     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageSsl200Response]
    def get_object_storage_ssl(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = get_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Get an Object Storage TLS/SSL certificate
    # Returns a boolean value indicating if this bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage ssl-view \\   us-east-1 example-bucket     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageSsl200Response, Integer, Hash)>] GetObjectStorageSsl200Response data, response status code and response headers
    def get_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_ssl ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_ssl"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.get_object_storage_ssl"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.get_object_storage_ssl"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/ssl'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageSsl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_ssl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_ssl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Object Storage transfer data
    # The amount of outbound data transfer used by your account's Object Storage buckets. Object Storage adds 1 terabyte of outbound data transfer to your data transfer pool. See the [Object Storage Overview](https://www.linode.com/docs/products/storage/object-storage/#pricing) guide for details on Object Storage transfer quotas.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetObjectStorageTransfer200Response]
    def get_object_storage_transfer(api_version, opts = {})
      data, _status_code, _headers = get_object_storage_transfer_with_http_info(api_version, opts)
      data
    end

    # Get Object Storage transfer data
    # The amount of outbound data transfer used by your account&#39;s Object Storage buckets. Object Storage adds 1 terabyte of outbound data transfer to your data transfer pool. See the [Object Storage Overview](https://www.linode.com/docs/products/storage/object-storage/#pricing) guide for details on Object Storage transfer quotas.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectStorageTransfer200Response, Integer, Hash)>] GetObjectStorageTransfer200Response data, response status code and response headers
    def get_object_storage_transfer_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.get_object_storage_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.get_object_storage_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/transfer'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.get_object_storage_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#get_object_storage_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Object Storage
    # Cancel Object Storage on an Account.  __Warning__. This removes all buckets and their contents from your Account. This data is irretrievable once removed.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage cancel     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_cancel_object_storage(api_version, opts = {})
      data, _status_code, _headers = post_cancel_object_storage_with_http_info(api_version, opts)
      data
    end

    # Cancel Object Storage
    # Cancel Object Storage on an Account.  __Warning__. This removes all buckets and their contents from your Account. This data is irretrievable once removed.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage cancel     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_cancel_object_storage_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_cancel_object_storage ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_cancel_object_storage"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/cancel'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_cancel_object_storage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_cancel_object_storage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Object Storage bucket
    # Creates an Object Storage bucket in the specified data center ([region](https://techdocs.akamai.com/linode-api/reference/get-regions)). If the bucket already exists on your account, this operation returns a 200 response with that bucket as if the API just created it.  > ðŸ“˜ > > - Accounts with negative balances can't access this operation. > > - The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket) equivalent operation offers more detail. > > - The API still supports the `clusterId` equivalent (`us-west-1`) when setting a `region` for a new bucket, but you should use the `regionId` (`us-west`), instead.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageBucketRequest] :post_object_storage_bucket_request Information about the bucket you want to create.
    # @return [PostObjectStorageBucket200Response]
    def post_object_storage_bucket(api_version, opts = {})
      data, _status_code, _headers = post_object_storage_bucket_with_http_info(api_version, opts)
      data
    end

    # Create an Object Storage bucket
    # Creates an Object Storage bucket in the specified data center ([region](https://techdocs.akamai.com/linode-api/reference/get-regions)). If the bucket already exists on your account, this operation returns a 200 response with that bucket as if the API just created it.  &gt; ðŸ“˜ &gt; &gt; - Accounts with negative balances can&#39;t access this operation. &gt; &gt; - The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket) equivalent operation offers more detail. &gt; &gt; - The API still supports the &#x60;clusterId&#x60; equivalent (&#x60;us-west-1&#x60;) when setting a &#x60;region&#x60; for a new bucket, but you should use the &#x60;regionId&#x60; (&#x60;us-west&#x60;), instead.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageBucketRequest] :post_object_storage_bucket_request Information about the bucket you want to create.
    # @return [Array<(PostObjectStorageBucket200Response, Integer, Hash)>] PostObjectStorageBucket200Response data, response status code and response headers
    def post_object_storage_bucket_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_object_storage_bucket ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_object_storage_bucket"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_object_storage_bucket_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostObjectStorageBucket200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_object_storage_bucket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_object_storage_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify access to an Object Storage bucket
    # Apply basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings. You can configure CORS for all origins and set canned ACL settings.  > ðŸ“˜ > > For more fine-grained control of both systems, use the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl).   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageBucketAccessRequest] :post_object_storage_bucket_access_request The changes to make to the bucket&#39;s access controls.
    # @return [Object]
    def post_object_storage_bucket_access(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = post_object_storage_bucket_access_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Modify access to an Object Storage bucket
    # Apply basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings. You can configure CORS for all origins and set canned ACL settings.  &gt; ðŸ“˜ &gt; &gt; For more fine-grained control of both systems, use the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageBucketAccessRequest] :post_object_storage_bucket_access_request The changes to make to the bucket&#39;s access controls.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_object_storage_bucket_access_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_object_storage_bucket_access ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_object_storage_bucket_access"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.post_object_storage_bucket_access"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.post_object_storage_bucket_access"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/access'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_object_storage_bucket_access_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_object_storage_bucket_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_object_storage_bucket_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Object Storage key
    # Provisions a new Object Storage key for authenticating to the Object Storage S3 API. A successful request triggers an `obj_access_key_create` [event](https://techdocs.akamai.com/linode-api/reference/get-events).  > ðŸ“˜ > > Accounts with negative balances can't access this operation.  **The `regions` and `region` parameters**  When creating an Object Storage key, specify one or more data centers ([regions](https://techdocs.akamai.com/linode-api/reference/get-regions)) where you want to create and manage Object Storage buckets.  - **The `regions` array**. Populate it with `regionId` values. The resulting Object Storage key grants access to list and create new buckets in these regions. This *doesn't* give access to manage content in these buckets. To address this, you can:    - Use the `bucket_access` array instead to grant management access, per bucket.    - Use [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/) to change the access for this key.  - **The `bucket_access` array**. This optional array lets you set up limited keys. Include individual objects naming a `regionId`, the target `bucket_name`, and the `permissions` for the Object Storage key. Use the resulting key to manage content in the `bucket_name`, based on the permission level set. You can also use the key to create new buckets in the named region. However, the key doesn't have access to manage content in the newly created bucket. You can grant it this access using [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/).  - **Combine the two to apply varying levels of access in the key**. For example, set `regions` to `us-west` to give the key bucket list and create access in that region. Then, set up the `bucket_access` array to give access to a specific `bucket_name` in the `us-east` region. The key has access to manage content in that `bucket_name` and list and create buckets in the `us-east` region, too. If you include the same region in both, the settings applied in the `bucket_access` array take precedence. For example, assume you include `us-east` in the `regions` array, expecting to only give bucket list and creation access to that region. If you also set `us-east` as a `region` in the `bucket_access` array, the Object Storage key gives access to manage content in the specified `bucket_name`, and lets you list and create buckets in that region.  **The `cluster` parameter (legacy)**  For backward compatibility, include the `cluster` parameter to create an Object Storage key. Use the `clusterId` equivalent (us-west-1) instead of the `regionId` (us-west). Leave the `regions` array out. If including the `bucket_access` array to limit access, omit `region` from each object. Use the resulting key in clusters in all supported regions.  > ðŸ“˜ > > While the API supports this method, you should use the `regions` parameters, instead.  - **Unlimited access**. Omit the `bucket_access` array. The Object Storage key has unlimited cluster access to all buckets, with all permissions.  - **Limited access**. Include the `bucket_access` array. Set the target `bucket_name` and the level of `permissions` for access to that bucket. Use the resulting key to manage content in the named bucket. A limited Object Storage key can [list all buckets](https://techdocs.akamai.com/linode-api/reference/get-object-storage-buckets) and [create a new bucket](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket). However, you can't use the key to perform any actions on a bucket, unless the key has access to it. You can use [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/) to modify a key's access.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage keys-create \\   --label \"my-object-storage-key\" \\   --bucket_access '[{\"region\": \"ap-south\", \"bucket_name\": \"bucket-example-1\", \"permissions\": \"read_write\" }]'     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageKeysRequest] :post_object_storage_keys_request The settings necessary to create a new key.
    # @return [PostObjectStorageKeys200Response]
    def post_object_storage_keys(api_version, opts = {})
      data, _status_code, _headers = post_object_storage_keys_with_http_info(api_version, opts)
      data
    end

    # Create an Object Storage key
    # Provisions a new Object Storage key for authenticating to the Object Storage S3 API. A successful request triggers an &#x60;obj_access_key_create&#x60; [event](https://techdocs.akamai.com/linode-api/reference/get-events).  &gt; ðŸ“˜ &gt; &gt; Accounts with negative balances can&#39;t access this operation.  **The &#x60;regions&#x60; and &#x60;region&#x60; parameters**  When creating an Object Storage key, specify one or more data centers ([regions](https://techdocs.akamai.com/linode-api/reference/get-regions)) where you want to create and manage Object Storage buckets.  - **The &#x60;regions&#x60; array**. Populate it with &#x60;regionId&#x60; values. The resulting Object Storage key grants access to list and create new buckets in these regions. This *doesn&#39;t* give access to manage content in these buckets. To address this, you can:    - Use the &#x60;bucket_access&#x60; array instead to grant management access, per bucket.    - Use [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/) to change the access for this key.  - **The &#x60;bucket_access&#x60; array**. This optional array lets you set up limited keys. Include individual objects naming a &#x60;regionId&#x60;, the target &#x60;bucket_name&#x60;, and the &#x60;permissions&#x60; for the Object Storage key. Use the resulting key to manage content in the &#x60;bucket_name&#x60;, based on the permission level set. You can also use the key to create new buckets in the named region. However, the key doesn&#39;t have access to manage content in the newly created bucket. You can grant it this access using [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/).  - **Combine the two to apply varying levels of access in the key**. For example, set &#x60;regions&#x60; to &#x60;us-west&#x60; to give the key bucket list and create access in that region. Then, set up the &#x60;bucket_access&#x60; array to give access to a specific &#x60;bucket_name&#x60; in the &#x60;us-east&#x60; region. The key has access to manage content in that &#x60;bucket_name&#x60; and list and create buckets in the &#x60;us-east&#x60; region, too. If you include the same region in both, the settings applied in the &#x60;bucket_access&#x60; array take precedence. For example, assume you include &#x60;us-east&#x60; in the &#x60;regions&#x60; array, expecting to only give bucket list and creation access to that region. If you also set &#x60;us-east&#x60; as a &#x60;region&#x60; in the &#x60;bucket_access&#x60; array, the Object Storage key gives access to manage content in the specified &#x60;bucket_name&#x60;, and lets you list and create buckets in that region.  **The &#x60;cluster&#x60; parameter (legacy)**  For backward compatibility, include the &#x60;cluster&#x60; parameter to create an Object Storage key. Use the &#x60;clusterId&#x60; equivalent (us-west-1) instead of the &#x60;regionId&#x60; (us-west). Leave the &#x60;regions&#x60; array out. If including the &#x60;bucket_access&#x60; array to limit access, omit &#x60;region&#x60; from each object. Use the resulting key in clusters in all supported regions.  &gt; ðŸ“˜ &gt; &gt; While the API supports this method, you should use the &#x60;regions&#x60; parameters, instead.  - **Unlimited access**. Omit the &#x60;bucket_access&#x60; array. The Object Storage key has unlimited cluster access to all buckets, with all permissions.  - **Limited access**. Include the &#x60;bucket_access&#x60; array. Set the target &#x60;bucket_name&#x60; and the level of &#x60;permissions&#x60; for access to that bucket. Use the resulting key to manage content in the named bucket. A limited Object Storage key can [list all buckets](https://techdocs.akamai.com/linode-api/reference/get-object-storage-buckets) and [create a new bucket](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket). However, you can&#39;t use the key to perform any actions on a bucket, unless the key has access to it. You can use [bucket policies](https://www.linode.com/docs/products/storage/object-storage/guides/bucket-policies/) to modify a key&#39;s access.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage keys-create \\   --label \&quot;my-object-storage-key\&quot; \\   --bucket_access &#39;[{\&quot;region\&quot;: \&quot;ap-south\&quot;, \&quot;bucket_name\&quot;: \&quot;bucket-example-1\&quot;, \&quot;permissions\&quot;: \&quot;read_write\&quot; }]&#39;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageKeysRequest] :post_object_storage_keys_request The settings necessary to create a new key.
    # @return [Array<(PostObjectStorageKeys200Response, Integer, Hash)>] PostObjectStorageKeys200Response data, response status code and response headers
    def post_object_storage_keys_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_object_storage_keys ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_object_storage_keys"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/keys'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_object_storage_keys_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostObjectStorageKeys200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_object_storage_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_object_storage_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a URL for an object
    # Creates a pre-signed URL to access a single object in a bucket. Use it to share, create, or delete objects by using the appropriate HTTP method in your request body's `method` parameter.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageObjectUrlRequest] :post_object_storage_object_url_request Information about the request to sign.
    # @return [PostObjectStorageObjectUrl200Response]
    def post_object_storage_object_url(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = post_object_storage_object_url_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Create a URL for an object
    # Creates a pre-signed URL to access a single object in a bucket. Use it to share, create, or delete objects by using the appropriate HTTP method in your request body&#39;s &#x60;method&#x60; parameter.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageObjectUrlRequest] :post_object_storage_object_url_request Information about the request to sign.
    # @return [Array<(PostObjectStorageObjectUrl200Response, Integer, Hash)>] PostObjectStorageObjectUrl200Response data, response status code and response headers
    def post_object_storage_object_url_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_object_storage_object_url ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_object_storage_object_url"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.post_object_storage_object_url"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.post_object_storage_object_url"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/object-url'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_object_storage_object_url_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostObjectStorageObjectUrl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_object_storage_object_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_object_storage_object_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an Object Storage TLS/SSL certificate
    # Upload a TLS/SSL certificate and private key to be served when you visit your Object Storage bucket via HTTPS. Your TLS/SSL certificate and private key are stored encrypted at rest.  To replace an expired certificate, [delete your current certificates](https://techdocs.akamai.com/linode-api/reference/delete-object-storage-ssl) and upload a new one.   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage ssl-upload \\   us-east-1 example-bucket \\   --certificate \"-----BEGIN CERTIFICATE-----                  CERTIFICATE_INFORMATION                  -----END CERTIFICATE-----\" \\   --private_key \"-----BEGIN PRIVATE KEY-----                  PRIVATE_KEY_INFORMATION                  -----END PRIVATE KEY-----\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageSslRequest] :post_object_storage_ssl_request Upload this TLS/SSL certificate with its corresponding secret key.
    # @return [GetObjectStorageSsl200Response]
    def post_object_storage_ssl(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = post_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Upload an Object Storage TLS/SSL certificate
    # Upload a TLS/SSL certificate and private key to be served when you visit your Object Storage bucket via HTTPS. Your TLS/SSL certificate and private key are stored encrypted at rest.  To replace an expired certificate, [delete your current certificates](https://techdocs.akamai.com/linode-api/reference/delete-object-storage-ssl) and upload a new one.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage ssl-upload \\   us-east-1 example-bucket \\   --certificate \&quot;-----BEGIN CERTIFICATE-----                  CERTIFICATE_INFORMATION                  -----END CERTIFICATE-----\&quot; \\   --private_key \&quot;-----BEGIN PRIVATE KEY-----                  PRIVATE_KEY_INFORMATION                  -----END PRIVATE KEY-----\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PostObjectStorageSslRequest] :post_object_storage_ssl_request Upload this TLS/SSL certificate with its corresponding secret key.
    # @return [Array<(GetObjectStorageSsl200Response, Integer, Hash)>] GetObjectStorageSsl200Response data, response status code and response headers
    def post_object_storage_ssl_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.post_object_storage_ssl ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.post_object_storage_ssl"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.post_object_storage_ssl"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.post_object_storage_ssl"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/ssl'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_object_storage_ssl_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectStorageSsl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.post_object_storage_ssl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#post_object_storage_ssl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an object's ACL config
    # Update an object's configured access control level (ACL) in this Object Storage bucket. ACLs define who can access your buckets and objects and specify the level of access granted to those users.  > ðŸ“˜ > > The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#set-object-acl) equivalent operation offers more detail.   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PutObjectStorageBucketAclRequest] :put_object_storage_bucket_acl_request The changes to make to this Object&#39;s access controls.
    # @return [PutObjectStorageBucketAcl200Response]
    def put_object_storage_bucket_acl(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = put_object_storage_bucket_acl_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Update an object&#39;s ACL config
    # Update an object&#39;s configured access control level (ACL) in this Object Storage bucket. ACLs define who can access your buckets and objects and specify the level of access granted to those users.  &gt; ðŸ“˜ &gt; &gt; The [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#set-object-acl) equivalent operation offers more detail.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PutObjectStorageBucketAclRequest] :put_object_storage_bucket_acl_request The changes to make to this Object&#39;s access controls.
    # @return [Array<(PutObjectStorageBucketAcl200Response, Integer, Hash)>] PutObjectStorageBucketAcl200Response data, response status code and response headers
    def put_object_storage_bucket_acl_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.put_object_storage_bucket_acl ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.put_object_storage_bucket_acl"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.put_object_storage_bucket_acl"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.put_object_storage_bucket_acl"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/object-acl'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_object_storage_bucket_acl_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutObjectStorageBucketAcl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.put_object_storage_bucket_acl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#put_object_storage_bucket_acl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Object Storage key
    # Updates an Object Storage key on your account. A successful request triggers an `obj_access_key_update` [event](https://techdocs.akamai.com/linode-api/reference/get-events).   <<LB>>  ---   - __CLI__.      ```     linode-cli object-storage keys-update \\   --keyId 12345   --label \"my-object-storage-key\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutObjectStorageKeyRequest] :put_object_storage_key_request The fields to update.
    # @return [PutObjectStorageKey200Response]
    def put_object_storage_key(api_version, key_id, opts = {})
      data, _status_code, _headers = put_object_storage_key_with_http_info(api_version, key_id, opts)
      data
    end

    # Update an Object Storage key
    # Updates an Object Storage key on your account. A successful request triggers an &#x60;obj_access_key_update&#x60; [event](https://techdocs.akamai.com/linode-api/reference/get-events).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli object-storage keys-update \\   --keyId 12345   --label \&quot;my-object-storage-key\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param key_id [Integer] The key to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutObjectStorageKeyRequest] :put_object_storage_key_request The fields to update.
    # @return [Array<(PutObjectStorageKey200Response, Integer, Hash)>] PutObjectStorageKey200Response data, response status code and response headers
    def put_object_storage_key_with_http_info(api_version, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.put_object_storage_key ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.put_object_storage_key"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ObjectStorageApi.put_object_storage_key"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/keys/{keyId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_object_storage_key_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutObjectStorageKey200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.put_object_storage_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#put_object_storage_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update access to an Object Storage bucket
    # Update basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings. You can configure CORS for all origins and set canned ACL settings.  > ðŸ“˜ > > For more fine-grained control of both systems, use the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl).   <<LB>>  ---   - __OAuth scopes__.      ```     object_storage:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PutStorageBucketAccessRequest] :put_storage_bucket_access_request The changes to make to the bucket&#39;s access controls.
    # @return [Object]
    def put_storage_bucket_access(api_version, region_id, bucket, opts = {})
      data, _status_code, _headers = put_storage_bucket_access_with_http_info(api_version, region_id, bucket, opts)
      data
    end

    # Update access to an Object Storage bucket
    # Update basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings. You can configure CORS for all origins and set canned ACL settings.  &gt; ðŸ“˜ &gt; &gt; For more fine-grained control of both systems, use the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     object_storage:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param region_id [String] Identifies a region where this bucket lives.  &gt; ðŸ“˜ &gt; &gt; You can use a &#x60;clusterId&#x60; in place of &#x60;regionId&#x60; in requests for buckets that you created using the legacy version of the API. Run [List clusters](https://techdocs.akamai.com/linode-api/reference/get-object-storage-clusters) to see each cluster &#x60;id&#x60;.
    # @param bucket [String] The bucket name.
    # @param [Hash] opts the optional parameters
    # @option opts [PutStorageBucketAccessRequest] :put_storage_bucket_access_request The changes to make to the bucket&#39;s access controls.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def put_storage_bucket_access_with_http_info(api_version, region_id, bucket, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectStorageApi.put_storage_bucket_access ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ObjectStorageApi.put_storage_bucket_access"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ObjectStorageApi.put_storage_bucket_access"
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling ObjectStorageApi.put_storage_bucket_access"
      end
      # resource path
      local_var_path = '/{apiVersion}/object-storage/buckets/{regionId}/{bucket}/access'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'regionId' + '}', CGI.escape(region_id.to_s)).sub('{' + 'bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_storage_bucket_access_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ObjectStorageApi.put_storage_bucket_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectStorageApi#put_storage_bucket_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
