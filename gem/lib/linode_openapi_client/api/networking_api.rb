=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class NetworkingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a firewall
    # Delete a Firewall resource by its ID. This removes all of the Firewall's Rules from any services that the Firewall was assigned to.  - Assigned Linodes must not have any ongoing live migrations.  - A `firewall_delete` Event is generated when this operation returns successfully.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_firewall(api_version, firewall_id, opts = {})
      data, _status_code, _headers = delete_firewall_with_http_info(api_version, firewall_id, opts)
      data
    end

    # Delete a firewall
    # Delete a Firewall resource by its ID. This removes all of the Firewall&#39;s Rules from any services that the Firewall was assigned to.  - Assigned Linodes must not have any ongoing live migrations.  - A &#x60;firewall_delete&#x60; Event is generated when this operation returns successfully.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls delete 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_firewall_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.delete_firewall ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.delete_firewall"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.delete_firewall"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.delete_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#delete_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a firewall device
    # Removes a Firewall Device, which removes a Firewall from the service it was assigned to by the Device. This removes all of the Firewall's Rules from the service. If any other Firewalls have been assigned to the service, then those Rules remain in effect.  - Assigned Linodes must not have any ongoing live migrations.  - A `firewall_device_remove` Event is generated when the Firewall Device is removed successfully.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls device-delete 123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param device_id [Integer] ID of the Firewall Device to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_firewall_device(api_version, firewall_id, device_id, opts = {})
      data, _status_code, _headers = delete_firewall_device_with_http_info(api_version, firewall_id, device_id, opts)
      data
    end

    # Delete a firewall device
    # Removes a Firewall Device, which removes a Firewall from the service it was assigned to by the Device. This removes all of the Firewall&#39;s Rules from the service. If any other Firewalls have been assigned to the service, then those Rules remain in effect.  - Assigned Linodes must not have any ongoing live migrations.  - A &#x60;firewall_device_remove&#x60; Event is generated when the Firewall Device is removed successfully.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls device-delete 123 456     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param device_id [Integer] ID of the Firewall Device to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_firewall_device_with_http_info(api_version, firewall_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.delete_firewall_device ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.delete_firewall_device"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.delete_firewall_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkingApi.delete_firewall_device"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/devices/{deviceId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.delete_firewall_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#delete_firewall_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an IPv6 range
    # Removes this IPv6 range from your account and disconnects the range from any assigned Linodes.  __Note__. Shared IPv6 ranges cannot be deleted at this time. Please contact Customer Support for assistance.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking v6-range-delete 2001:0db8::     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param range [String] The IPv6 range to access. Corresponds to the &#x60;range&#x60; property of objects returned from the [List IPv6 ranges](https://techdocs.akamai.com/linode-api/reference/get-ipv6-ranges) operation.  __Note__. Omit the prefix length of the IPv6 range.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_ipv6_range(api_version, range, opts = {})
      data, _status_code, _headers = delete_ipv6_range_with_http_info(api_version, range, opts)
      data
    end

    # Delete an IPv6 range
    # Removes this IPv6 range from your account and disconnects the range from any assigned Linodes.  __Note__. Shared IPv6 ranges cannot be deleted at this time. Please contact Customer Support for assistance.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking v6-range-delete 2001:0db8::     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param range [String] The IPv6 range to access. Corresponds to the &#x60;range&#x60; property of objects returned from the [List IPv6 ranges](https://techdocs.akamai.com/linode-api/reference/get-ipv6-ranges) operation.  __Note__. Omit the prefix length of the IPv6 range.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_ipv6_range_with_http_info(api_version, range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.delete_ipv6_range ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.delete_ipv6_range"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'range' is set
      if @api_client.config.client_side_validation && range.nil?
        fail ArgumentError, "Missing the required parameter 'range' when calling NetworkingApi.delete_ipv6_range"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ipv6/ranges/{range}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'range' + '}', CGI.escape(range.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.delete_ipv6_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#delete_ipv6_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a firewall
    # Get a specific Firewall resource by its ID. The Firewall's Devices will not be returned in the response. Instead, run the [List firewall devices](https://techdocs.akamai.com/linode-api/reference/get-firewall-devices) operation to review them.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [GetFirewall200Response]
    def get_firewall(api_version, firewall_id, opts = {})
      data, _status_code, _headers = get_firewall_with_http_info(api_version, firewall_id, opts)
      data
    end

    # Get a firewall
    # Get a specific Firewall resource by its ID. The Firewall&#39;s Devices will not be returned in the response. Instead, run the [List firewall devices](https://techdocs.akamai.com/linode-api/reference/get-firewall-devices) operation to review them.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFirewall200Response, Integer, Hash)>] GetFirewall200Response data, response status code and response headers
    def get_firewall_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_firewall ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_firewall"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.get_firewall"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewall200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a firewall device
    # Returns information for a Firewall Device, which assigns a Firewall to a service (referred to as the Device's `entity`).   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls device-view \\   123 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param device_id [Integer] ID of the Firewall Device to access.
    # @param [Hash] opts the optional parameters
    # @return [GetFirewallDevice200Response]
    def get_firewall_device(api_version, firewall_id, device_id, opts = {})
      data, _status_code, _headers = get_firewall_device_with_http_info(api_version, firewall_id, device_id, opts)
      data
    end

    # Get a firewall device
    # Returns information for a Firewall Device, which assigns a Firewall to a service (referred to as the Device&#39;s &#x60;entity&#x60;).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls device-view \\   123 456     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param device_id [Integer] ID of the Firewall Device to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFirewallDevice200Response, Integer, Hash)>] GetFirewallDevice200Response data, response status code and response headers
    def get_firewall_device_with_http_info(api_version, firewall_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_firewall_device ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_firewall_device"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.get_firewall_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkingApi.get_firewall_device"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/devices/{deviceId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewallDevice200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_firewall_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_firewall_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List firewall devices
    # Returns a paginated list of a Firewall's Devices. A Firewall Device assigns a Firewall to a service (referred to as the Device's `entity`).   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls devices-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetFirewallDevices200Response]
    def get_firewall_devices(api_version, firewall_id, opts = {})
      data, _status_code, _headers = get_firewall_devices_with_http_info(api_version, firewall_id, opts)
      data
    end

    # List firewall devices
    # Returns a paginated list of a Firewall&#39;s Devices. A Firewall Device assigns a Firewall to a service (referred to as the Device&#39;s &#x60;entity&#x60;).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls devices-list 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetFirewallDevices200Response, Integer, Hash)>] GetFirewallDevices200Response data, response status code and response headers
    def get_firewall_devices_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_firewall_devices ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_firewall_devices"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.get_firewall_devices"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NetworkingApi.get_firewall_devices, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_firewall_devices, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_firewall_devices, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/devices'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewallDevices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_firewall_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_firewall_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List firewall rules
    # Returns the inbound and outbound Rules for a Firewall.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls rules-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [GetFirewallRules200Response]
    def get_firewall_rules(api_version, firewall_id, opts = {})
      data, _status_code, _headers = get_firewall_rules_with_http_info(api_version, firewall_id, opts)
      data
    end

    # List firewall rules
    # Returns the inbound and outbound Rules for a Firewall.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls rules-list 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFirewallRules200Response, Integer, Hash)>] GetFirewallRules200Response data, response status code and response headers
    def get_firewall_rules_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_firewall_rules ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_firewall_rules"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.get_firewall_rules"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/rules'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewallRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_firewall_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List firewalls
    # Returns a paginated list of accessible Firewalls.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetFirewalls200Response]
    def get_firewalls(api_version, opts = {})
      data, _status_code, _headers = get_firewalls_with_http_info(api_version, opts)
      data
    end

    # List firewalls
    # Returns a paginated list of accessible Firewalls.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetFirewalls200Response, Integer, Hash)>] GetFirewalls200Response data, response status code and response headers
    def get_firewalls_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_firewalls ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_firewalls"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NetworkingApi.get_firewalls, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_firewalls, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_firewalls, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewalls200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_firewalls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_firewalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an IP address
    # Returns information about a single IP Address on your Account.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-view 97.107.143.141     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param address [String] The address to operate on.
    # @param [Hash] opts the optional parameters
    # @return [GetIp200Response]
    def get_ip(api_version, address, opts = {})
      data, _status_code, _headers = get_ip_with_http_info(api_version, address, opts)
      data
    end

    # Get an IP address
    # Returns information about a single IP Address on your Account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-view 97.107.143.141     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param address [String] The address to operate on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIp200Response, Integer, Hash)>] GetIp200Response data, response status code and response headers
    def get_ip_with_http_info(api_version, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_ip ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_ip"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling NetworkingApi.get_ip"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips/{address}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IP addresses
    # Returns a paginated list of IP addresses on your account, excluding private addresses.  __Note__. Use the `skip_ipv6_rdns` query string to improve performance if your application frequently accesses this operation and doesn't require IPv6 RDNS data.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ips-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :skip_ipv6_rdns When &#x60;true&#x60;, the &#x60;rdns&#x60; property for any &#x60;ipv6&#x60; type addresses always returns &#x60;null&#x60; regardless of whether RDNS data exists for the address. (default to false)
    # @return [GetIps200Response]
    def get_ips(api_version, opts = {})
      data, _status_code, _headers = get_ips_with_http_info(api_version, opts)
      data
    end

    # List IP addresses
    # Returns a paginated list of IP addresses on your account, excluding private addresses.  __Note__. Use the &#x60;skip_ipv6_rdns&#x60; query string to improve performance if your application frequently accesses this operation and doesn&#39;t require IPv6 RDNS data.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ips-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :skip_ipv6_rdns When &#x60;true&#x60;, the &#x60;rdns&#x60; property for any &#x60;ipv6&#x60; type addresses always returns &#x60;null&#x60; regardless of whether RDNS data exists for the address. (default to false)
    # @return [Array<(GetIps200Response, Integer, Hash)>] GetIps200Response data, response status code and response headers
    def get_ips_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_ips ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_ips"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip_ipv6_rdns'] = opts[:'skip_ipv6_rdns'] if !opts[:'skip_ipv6_rdns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIps200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_ips",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IPv6 pools
    # Displays the IPv6 pools on your Account. A pool of IPv6 addresses are routed to all of your Linodes in a single [region](https://techdocs.akamai.com/linode-api/reference/get-regions). Any Linode on your Account may bring up any address in this pool at any time, with no external configuration required.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking v6-pools     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetIpv6Pools200Response]
    def get_ipv6_pools(api_version, opts = {})
      data, _status_code, _headers = get_ipv6_pools_with_http_info(api_version, opts)
      data
    end

    # List IPv6 pools
    # Displays the IPv6 pools on your Account. A pool of IPv6 addresses are routed to all of your Linodes in a single [region](https://techdocs.akamai.com/linode-api/reference/get-regions). Any Linode on your Account may bring up any address in this pool at any time, with no external configuration required.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking v6-pools     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetIpv6Pools200Response, Integer, Hash)>] GetIpv6Pools200Response data, response status code and response headers
    def get_ipv6_pools_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_ipv6_pools ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_ipv6_pools"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NetworkingApi.get_ipv6_pools, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_ipv6_pools, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_ipv6_pools, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/networking/ipv6/pools'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIpv6Pools200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_ipv6_pools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_ipv6_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an IPv6 range
    # View IPv6 range information.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking v6-range-view 2001:0db8::     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param range [String] The IPv6 range to access. Corresponds to the &#x60;range&#x60; property of objects returned from the [List IPv6 ranges](https://techdocs.akamai.com/linode-api/reference/get-ipv6-ranges) operation.  __Note__. Omit the prefix length of the IPv6 range.
    # @param [Hash] opts the optional parameters
    # @return [GetIpv6Range200Response]
    def get_ipv6_range(api_version, range, opts = {})
      data, _status_code, _headers = get_ipv6_range_with_http_info(api_version, range, opts)
      data
    end

    # Get an IPv6 range
    # View IPv6 range information.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking v6-range-view 2001:0db8::     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param range [String] The IPv6 range to access. Corresponds to the &#x60;range&#x60; property of objects returned from the [List IPv6 ranges](https://techdocs.akamai.com/linode-api/reference/get-ipv6-ranges) operation.  __Note__. Omit the prefix length of the IPv6 range.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIpv6Range200Response, Integer, Hash)>] GetIpv6Range200Response data, response status code and response headers
    def get_ipv6_range_with_http_info(api_version, range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_ipv6_range ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_ipv6_range"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'range' is set
      if @api_client.config.client_side_validation && range.nil?
        fail ArgumentError, "Missing the required parameter 'range' when calling NetworkingApi.get_ipv6_range"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ipv6/ranges/{range}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'range' + '}', CGI.escape(range.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIpv6Range200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_ipv6_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_ipv6_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IPv6 ranges
    # Displays the IPv6 ranges on your Account.    - An IPv6 range is a `/64` or `/54` block of IPv6 addresses routed to a single Linode in a given [region](https://techdocs.akamai.com/linode-api/reference/get-regions).    - Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.    - Run the [Create an IPv6 range](https://techdocs.akamai.com/linode-api/reference/post-ipv6-range) operation to add a `/64` or `/56` block of IPv6 addresses to your account.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking v6-ranges     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetIpv6Ranges200Response]
    def get_ipv6_ranges(api_version, opts = {})
      data, _status_code, _headers = get_ipv6_ranges_with_http_info(api_version, opts)
      data
    end

    # List IPv6 ranges
    # Displays the IPv6 ranges on your Account.    - An IPv6 range is a &#x60;/64&#x60; or &#x60;/54&#x60; block of IPv6 addresses routed to a single Linode in a given [region](https://techdocs.akamai.com/linode-api/reference/get-regions).    - Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.    - Run the [Create an IPv6 range](https://techdocs.akamai.com/linode-api/reference/post-ipv6-range) operation to add a &#x60;/64&#x60; or &#x60;/56&#x60; block of IPv6 addresses to your account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking v6-ranges     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetIpv6Ranges200Response, Integer, Hash)>] GetIpv6Ranges200Response data, response status code and response headers
    def get_ipv6_ranges_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_ipv6_ranges ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_ipv6_ranges"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NetworkingApi.get_ipv6_ranges, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_ipv6_ranges, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_ipv6_ranges, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/networking/ipv6/ranges'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIpv6Ranges200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_ipv6_ranges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_ipv6_ranges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VLANs
    # Returns a list of all Virtual Local Area Networks (VLANs) on your Account. VLANs provide a mechanism for secure communication between two or more Linodes that are assigned to the same VLAN and are both within the same Layer 2 broadcast domain.  VLANs are created and attached to Linodes by using the `interfaces` property for the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config)  There are several ways to detach a VLAN from a Linode:  - [Update](https://techdocs.akamai.com/linode-api/reference/put-linode-config) the active Configuration Profile to remove the VLAN Interface, then [reboot](https://techdocs.akamai.com/linode-api/reference/post-reboot-linode-instance) the Linode. - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) without the VLAN Interface, then [reboot](https://techdocs.akamai.com/linode-api/reference/post-reboot-linode-instance) the Linode into the new Configuration Profile. - [Delete](https://techdocs.akamai.com/linode-api/reference/delete-linode-instance) the Linode.  __Note__. Only Next Generation Network (NGN) data centers support VLANs. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the capabilities of data center regions. If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center, the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility, you will be prompted to select a different data center or contact support.  __Note__. See the [VLANs Overview](https://www.linode.com/docs/products/networking/vlans/#technical-specifications) to view additional specifications and limitations.   <<LB>>  ---   - __CLI__.      ```     linode-cli vlans list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetVlans200Response]
    def get_vlans(api_version, opts = {})
      data, _status_code, _headers = get_vlans_with_http_info(api_version, opts)
      data
    end

    # List VLANs
    # Returns a list of all Virtual Local Area Networks (VLANs) on your Account. VLANs provide a mechanism for secure communication between two or more Linodes that are assigned to the same VLAN and are both within the same Layer 2 broadcast domain.  VLANs are created and attached to Linodes by using the &#x60;interfaces&#x60; property for the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config)  There are several ways to detach a VLAN from a Linode:  - [Update](https://techdocs.akamai.com/linode-api/reference/put-linode-config) the active Configuration Profile to remove the VLAN Interface, then [reboot](https://techdocs.akamai.com/linode-api/reference/post-reboot-linode-instance) the Linode. - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) without the VLAN Interface, then [reboot](https://techdocs.akamai.com/linode-api/reference/post-reboot-linode-instance) the Linode into the new Configuration Profile. - [Delete](https://techdocs.akamai.com/linode-api/reference/delete-linode-instance) the Linode.  __Note__. Only Next Generation Network (NGN) data centers support VLANs. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the capabilities of data center regions. If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center, the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility, you will be prompted to select a different data center or contact support.  __Note__. See the [VLANs Overview](https://www.linode.com/docs/products/networking/vlans/#technical-specifications) to view additional specifications and limitations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vlans list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     linodes:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetVlans200Response, Integer, Hash)>] GetVlans200Response data, response status code and response headers
    def get_vlans_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.get_vlans ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.get_vlans"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NetworkingApi.get_vlans, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_vlans, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingApi.get_vlans, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/networking/vlans'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVlans200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.get_vlans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#get_vlans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allocate an IP address
    # Allocates a new IPv4 Address on your Account. The Linode must be configured to support additional addresses - please [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) requesting additional addresses before attempting allocation.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-add \\   --type ipv4 \\   --public true \\   --linode_id 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_allocate_ip_request [PostAllocateIpRequest] Information about the address you are creating.
    # @param [Hash] opts the optional parameters
    # @return [PostAllocateIp200Response]
    def post_allocate_ip(api_version, post_allocate_ip_request, opts = {})
      data, _status_code, _headers = post_allocate_ip_with_http_info(api_version, post_allocate_ip_request, opts)
      data
    end

    # Allocate an IP address
    # Allocates a new IPv4 Address on your Account. The Linode must be configured to support additional addresses - please [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) requesting additional addresses before attempting allocation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-add \\   --type ipv4 \\   --public true \\   --linode_id 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_allocate_ip_request [PostAllocateIpRequest] Information about the address you are creating.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostAllocateIp200Response, Integer, Hash)>] PostAllocateIp200Response data, response status code and response headers
    def post_allocate_ip_with_http_info(api_version, post_allocate_ip_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_allocate_ip ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_allocate_ip"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_allocate_ip_request' is set
      if @api_client.config.client_side_validation && post_allocate_ip_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_allocate_ip_request' when calling NetworkingApi.post_allocate_ip"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_allocate_ip_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_allocate_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_allocate_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign IP addresses
    # Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.  The following restrictions apply:  - All Linodes involved must have at least one public IPv4 address after assignment. - Linodes may have no more than one assigned private IPv4 address. - Linodes may have no more than one assigned IPv6 range. - Shared IP addresses cannot be swapped between Linodes.  [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.  __Note__. Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values.  To view and configure Managed Linode SSH settings, use the following operations:  - [Get a Linode's managed settings](https://techdocs.akamai.com/linode-api/reference/get-managed-linode-setting) - [Update a Linode's managed settings](https://techdocs.akamai.com/linode-api/reference/put-managed-linode-setting)  __Note__. Addresses with an active 1:1 NAT to a VPC Interface address cannot be assigned to other Linodes.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-assign \\   --region us-east \\   --assignments.address 192.0.2.1 \\   --assignments.linode_id 123 \\   --assignments.address 2001:db8:3c4d:15::/64 \\   --assignments.linode_id 234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_assign_ips_request [PostAssignIpsRequest] Information about what IPv4 address or IPv6 range to assign, and to which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_assign_ips(api_version, post_assign_ips_request, opts = {})
      data, _status_code, _headers = post_assign_ips_with_http_info(api_version, post_assign_ips_request, opts)
      data
    end

    # Assign IP addresses
    # Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.  The following restrictions apply:  - All Linodes involved must have at least one public IPv4 address after assignment. - Linodes may have no more than one assigned private IPv4 address. - Linodes may have no more than one assigned IPv6 range. - Shared IP addresses cannot be swapped between Linodes.  [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.  __Note__. Removing an IP address that has been set as a Managed Linode&#39;s &#x60;ssh.ip&#x60; causes the Managed Linode&#39;s SSH access settings to reset to their default values.  To view and configure Managed Linode SSH settings, use the following operations:  - [Get a Linode&#39;s managed settings](https://techdocs.akamai.com/linode-api/reference/get-managed-linode-setting) - [Update a Linode&#39;s managed settings](https://techdocs.akamai.com/linode-api/reference/put-managed-linode-setting)  __Note__. Addresses with an active 1:1 NAT to a VPC Interface address cannot be assigned to other Linodes.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-assign \\   --region us-east \\   --assignments.address 192.0.2.1 \\   --assignments.linode_id 123 \\   --assignments.address 2001:db8:3c4d:15::/64 \\   --assignments.linode_id 234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_assign_ips_request [PostAssignIpsRequest] Information about what IPv4 address or IPv6 range to assign, and to which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_assign_ips_with_http_info(api_version, post_assign_ips_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_assign_ips ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_assign_ips"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_assign_ips_request' is set
      if @api_client.config.client_side_validation && post_assign_ips_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_assign_ips_request' when calling NetworkingApi.post_assign_ips"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips/assign'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_assign_ips_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_assign_ips",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_assign_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign IPv4s to Linodes
    # This operation is equivalent to [Assign IP addresses](https://techdocs.akamai.com/linode-api/reference/post-assign-ips).  Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.  The following restrictions apply:  - All Linodes involved must have at least one public IPv4 address after assignment. - Linodes may have no more than one assigned private IPv4 address. - Linodes may have no more than one assigned IPv6 range.  [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.  __Note__. Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values.  To view and configure Managed Linode SSH settings, use the following operations: - [Get a Linode's managed settings](https://techdocs.akamai.com/linode-api/reference/get-managed-linode-setting) - [Update a Linode's managed settings](https://techdocs.akamai.com/linode-api/reference/put-managed-linode-setting)   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-assign \\   --region us-east \\   --assignments.address 192.0.2.1 \\   --assignments.linode_id 123 \\   --assignments.address 2001:db8:3c4d:15::/64 \\   --assignments.linode_id 234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_assign_ipv4s_request [PostAssignIpv4sRequest] Information about what IPv4 address to assign, and to which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_assign_ipv4s(api_version, post_assign_ipv4s_request, opts = {})
      data, _status_code, _headers = post_assign_ipv4s_with_http_info(api_version, post_assign_ipv4s_request, opts)
      data
    end

    # Assign IPv4s to Linodes
    # This operation is equivalent to [Assign IP addresses](https://techdocs.akamai.com/linode-api/reference/post-assign-ips).  Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.  The following restrictions apply:  - All Linodes involved must have at least one public IPv4 address after assignment. - Linodes may have no more than one assigned private IPv4 address. - Linodes may have no more than one assigned IPv6 range.  [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.  __Note__. Removing an IP address that has been set as a Managed Linode&#39;s &#x60;ssh.ip&#x60; causes the Managed Linode&#39;s SSH access settings to reset to their default values.  To view and configure Managed Linode SSH settings, use the following operations: - [Get a Linode&#39;s managed settings](https://techdocs.akamai.com/linode-api/reference/get-managed-linode-setting) - [Update a Linode&#39;s managed settings](https://techdocs.akamai.com/linode-api/reference/put-managed-linode-setting)   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-assign \\   --region us-east \\   --assignments.address 192.0.2.1 \\   --assignments.linode_id 123 \\   --assignments.address 2001:db8:3c4d:15::/64 \\   --assignments.linode_id 234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_assign_ipv4s_request [PostAssignIpv4sRequest] Information about what IPv4 address to assign, and to which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_assign_ipv4s_with_http_info(api_version, post_assign_ipv4s_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_assign_ipv4s ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_assign_ipv4s"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_assign_ipv4s_request' is set
      if @api_client.config.client_side_validation && post_assign_ipv4s_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_assign_ipv4s_request' when calling NetworkingApi.post_assign_ipv4s"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ipv4/assign'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_assign_ipv4s_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_assign_ipv4s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_assign_ipv4s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a firewall device
    # Creates a Firewall Device, which assigns a Firewall to a service (referred to as the Device's `entity`) and applies the Firewall's Rules to the device.  - Currently, Devices with `linode` and `nodebalancer` entity types are accepted.  - Firewalls only apply to inbound TCP traffic to NodeBalancers.  - A Firewall can be assigned to multiple services at a time.  - A service can have one active, assigned Firewall at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.  - Assigned Linodes must not have any ongoing live migrations.  - A `firewall_device_add` Event is generated when the Firewall Device is added successfully.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls device-create 123 \\   --id 456 \\   --type \"linode\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PostFirewallDeviceRequest] :post_firewall_device_request 
    # @return [PostFirewallDevice200Response]
    def post_firewall_device(api_version, firewall_id, opts = {})
      data, _status_code, _headers = post_firewall_device_with_http_info(api_version, firewall_id, opts)
      data
    end

    # Create a firewall device
    # Creates a Firewall Device, which assigns a Firewall to a service (referred to as the Device&#39;s &#x60;entity&#x60;) and applies the Firewall&#39;s Rules to the device.  - Currently, Devices with &#x60;linode&#x60; and &#x60;nodebalancer&#x60; entity types are accepted.  - Firewalls only apply to inbound TCP traffic to NodeBalancers.  - A Firewall can be assigned to multiple services at a time.  - A service can have one active, assigned Firewall at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.  - Assigned Linodes must not have any ongoing live migrations.  - A &#x60;firewall_device_add&#x60; Event is generated when the Firewall Device is added successfully.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls device-create 123 \\   --id 456 \\   --type \&quot;linode\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PostFirewallDeviceRequest] :post_firewall_device_request 
    # @return [Array<(PostFirewallDevice200Response, Integer, Hash)>] PostFirewallDevice200Response data, response status code and response headers
    def post_firewall_device_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_firewall_device ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_firewall_device"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.post_firewall_device"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/devices'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_firewall_device_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostFirewallDevice200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_firewall_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_firewall_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a firewall
    # Creates a Firewall to filter network traffic.  - Use the `rules` property to create inbound and outbound access rules.  - Use the `devices` property to assign the Firewall to a service and apply its Rules to the device. Requires `read_write` [user grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) to the device. Currently, Firewalls can be assigned to Linode compute instances and NodeBalancers.  - A Firewall can be assigned to multiple services at a time.  - A Firewall can be assigned during Linode creation by utilizing the `firewall_id` [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) property.  - A service can have one active, assigned Firewall at a time.  Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.  - Firewalls apply to all of a Linode's non-`vlan` purpose Configuration Profile Interfaces.  - Assigned Linodes must not have any ongoing live migrations.  - A `firewall_create` Event is generated when this operation succeeds.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls create \\   --label example-firewall \\   --rules.outbound_policy ACCEPT \\   --rules.inbound_policy DROP \\   --rules.inbound '[{\"protocol\": \"TCP\", \"ports\": \"22, 80, 8080, 443\", \"addresses\": {\"ipv4\": [\"192.0.2.0/24\", \"198.51.100.2/32\"], \"ipv6\": [\"2001:DB8::/128\"]}, \"action\": \"ACCEPT\"}]' \\   --rules.outbound '[{\"protocol\": \"TCP\", \"ports\": \"49152-65535\", \"addresses\": {\"ipv4\": [\"192.0.2.0/24\", \"198.51.100.2/32\"],\"ipv6\": [\"2001:DB8::/128\"]}, \"action\": \"DROP\", \"label\": \"outbound-rule123\", \"description\": \"An example outbound rule description.\"}]'     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostFirewallsRequest] :post_firewalls_request Creates a Firewall object that can be applied to a service to filter the service&#39;s network traffic.
    # @return [PostFirewalls200Response]
    def post_firewalls(api_version, opts = {})
      data, _status_code, _headers = post_firewalls_with_http_info(api_version, opts)
      data
    end

    # Create a firewall
    # Creates a Firewall to filter network traffic.  - Use the &#x60;rules&#x60; property to create inbound and outbound access rules.  - Use the &#x60;devices&#x60; property to assign the Firewall to a service and apply its Rules to the device. Requires &#x60;read_write&#x60; [user grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) to the device. Currently, Firewalls can be assigned to Linode compute instances and NodeBalancers.  - A Firewall can be assigned to multiple services at a time.  - A Firewall can be assigned during Linode creation by utilizing the &#x60;firewall_id&#x60; [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) property.  - A service can have one active, assigned Firewall at a time.  Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.  - Firewalls apply to all of a Linode&#39;s non-&#x60;vlan&#x60; purpose Configuration Profile Interfaces.  - Assigned Linodes must not have any ongoing live migrations.  - A &#x60;firewall_create&#x60; Event is generated when this operation succeeds.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls create \\   --label example-firewall \\   --rules.outbound_policy ACCEPT \\   --rules.inbound_policy DROP \\   --rules.inbound &#39;[{\&quot;protocol\&quot;: \&quot;TCP\&quot;, \&quot;ports\&quot;: \&quot;22, 80, 8080, 443\&quot;, \&quot;addresses\&quot;: {\&quot;ipv4\&quot;: [\&quot;192.0.2.0/24\&quot;, \&quot;198.51.100.2/32\&quot;], \&quot;ipv6\&quot;: [\&quot;2001:DB8::/128\&quot;]}, \&quot;action\&quot;: \&quot;ACCEPT\&quot;}]&#39; \\   --rules.outbound &#39;[{\&quot;protocol\&quot;: \&quot;TCP\&quot;, \&quot;ports\&quot;: \&quot;49152-65535\&quot;, \&quot;addresses\&quot;: {\&quot;ipv4\&quot;: [\&quot;192.0.2.0/24\&quot;, \&quot;198.51.100.2/32\&quot;],\&quot;ipv6\&quot;: [\&quot;2001:DB8::/128\&quot;]}, \&quot;action\&quot;: \&quot;DROP\&quot;, \&quot;label\&quot;: \&quot;outbound-rule123\&quot;, \&quot;description\&quot;: \&quot;An example outbound rule description.\&quot;}]&#39;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostFirewallsRequest] :post_firewalls_request Creates a Firewall object that can be applied to a service to filter the service&#39;s network traffic.
    # @return [Array<(PostFirewalls200Response, Integer, Hash)>] PostFirewalls200Response data, response status code and response headers
    def post_firewalls_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_firewalls ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_firewalls"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_firewalls_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostFirewalls200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_firewalls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_firewalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an IPv6 range
    # Creates an IPv6 Range and assigns it based on the provided Linode or route target IPv6 SLAAC address. See the `ipv6` property when running the [Get a Linode](https://techdocs.akamai.com/linode-api/reference/get-linode-instance) operation to view a Linode's IPv6 SLAAC address.  - Either `linode_id` or `route_target` is required in a request. - `linode_id` and `route_target` are mutually exclusive. Submitting values for both properties in a request results in an error. - Upon a successful request, an IPv6 range is created in the [region](https://techdocs.akamai.com/linode-api/reference/get-regions) that corresponds to the provided `linode_id` or `route_target`. - Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range. - Run the [Assign IP addresses](https://techdocs.akamai.com/linode-api/reference/post-assign-ips) operation to re-assign IPv6 Ranges to your Linodes.  __Note__. The following restrictions apply:    - A Linode can only have one IPv6 range targeting its SLAAC address.   - An account can only have one IPv6 range in each [region](https://techdocs.akamai.com/linode-api/reference/get-regions).   - [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request expansion of these restrictions.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking v6-range-create \\   --linode_id 123 \\   --prefix_length 64     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_ipv6_range_request [PostIpv6RangeRequest] Information about the IPv6 range to create.
    # @param [Hash] opts the optional parameters
    # @return [PostIpv6Range200Response]
    def post_ipv6_range(api_version, post_ipv6_range_request, opts = {})
      data, _status_code, _headers = post_ipv6_range_with_http_info(api_version, post_ipv6_range_request, opts)
      data
    end

    # Create an IPv6 range
    # Creates an IPv6 Range and assigns it based on the provided Linode or route target IPv6 SLAAC address. See the &#x60;ipv6&#x60; property when running the [Get a Linode](https://techdocs.akamai.com/linode-api/reference/get-linode-instance) operation to view a Linode&#39;s IPv6 SLAAC address.  - Either &#x60;linode_id&#x60; or &#x60;route_target&#x60; is required in a request. - &#x60;linode_id&#x60; and &#x60;route_target&#x60; are mutually exclusive. Submitting values for both properties in a request results in an error. - Upon a successful request, an IPv6 range is created in the [region](https://techdocs.akamai.com/linode-api/reference/get-regions) that corresponds to the provided &#x60;linode_id&#x60; or &#x60;route_target&#x60;. - Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range. - Run the [Assign IP addresses](https://techdocs.akamai.com/linode-api/reference/post-assign-ips) operation to re-assign IPv6 Ranges to your Linodes.  __Note__. The following restrictions apply:    - A Linode can only have one IPv6 range targeting its SLAAC address.   - An account can only have one IPv6 range in each [region](https://techdocs.akamai.com/linode-api/reference/get-regions).   - [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to request expansion of these restrictions.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking v6-range-create \\   --linode_id 123 \\   --prefix_length 64     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_ipv6_range_request [PostIpv6RangeRequest] Information about the IPv6 range to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostIpv6Range200Response, Integer, Hash)>] PostIpv6Range200Response data, response status code and response headers
    def post_ipv6_range_with_http_info(api_version, post_ipv6_range_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_ipv6_range ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_ipv6_range"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_ipv6_range_request' is set
      if @api_client.config.client_side_validation && post_ipv6_range_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_ipv6_range_request' when calling NetworkingApi.post_ipv6_range"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ipv6/ranges'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_ipv6_range_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostIpv6Range200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_ipv6_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_ipv6_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share IP addresses
    # Configure shared IPs.  IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.  IP failover requires configuration of a failover service (such as [Keepalived](https://www.linode.com/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.  __Note__. A public IPv4 address cannot be shared if it is configured for a 1:1 NAT on a `vpc` purpose Configuration Profile Interface.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-share \\   --linode_id 123 \\   --ips 192.0.2.1 \\   --ips 2001:db8:3c4d:15::     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_share_ips_request [PostShareIpsRequest] Information about what IPs to share with which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_share_ips(api_version, post_share_ips_request, opts = {})
      data, _status_code, _headers = post_share_ips_with_http_info(api_version, post_share_ips_request, opts)
      data
    end

    # Share IP addresses
    # Configure shared IPs.  IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode&#39;s IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.  IP failover requires configuration of a failover service (such as [Keepalived](https://www.linode.com/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.  __Note__. A public IPv4 address cannot be shared if it is configured for a 1:1 NAT on a &#x60;vpc&#x60; purpose Configuration Profile Interface.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-share \\   --linode_id 123 \\   --ips 192.0.2.1 \\   --ips 2001:db8:3c4d:15::     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_share_ips_request [PostShareIpsRequest] Information about what IPs to share with which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_share_ips_with_http_info(api_version, post_share_ips_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_share_ips ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_share_ips"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_share_ips_request' is set
      if @api_client.config.client_side_validation && post_share_ips_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_share_ips_request' when calling NetworkingApi.post_share_ips"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips/share'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_share_ips_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_share_ips",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_share_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure IPv4 sharing
    # This operation is equivalent to [Share IP addresses](https://techdocs.akamai.com/linode-api/reference/post-share-ips).  Configure shared IPs.  IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.  IP failover requires configuration of a failover service (such as [Keepalived](https://www.linode.com/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-share \\   --linode_id 123 \\   --ips 192.0.2.1 \\   --ips 192.0.2.2     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_share_ips_request [PostShareIpsRequest] Information about what IPs to share with which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_share_ipv4s(api_version, post_share_ips_request, opts = {})
      data, _status_code, _headers = post_share_ipv4s_with_http_info(api_version, post_share_ips_request, opts)
      data
    end

    # Configure IPv4 sharing
    # This operation is equivalent to [Share IP addresses](https://techdocs.akamai.com/linode-api/reference/post-share-ips).  Configure shared IPs.  IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode&#39;s IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.  IP failover requires configuration of a failover service (such as [Keepalived](https://www.linode.com/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-share \\   --linode_id 123 \\   --ips 192.0.2.1 \\   --ips 192.0.2.2     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write linodes:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_share_ips_request [PostShareIpsRequest] Information about what IPs to share with which Linode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_share_ipv4s_with_http_info(api_version, post_share_ips_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.post_share_ipv4s ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.post_share_ipv4s"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_share_ips_request' is set
      if @api_client.config.client_side_validation && post_share_ips_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_share_ips_request' when calling NetworkingApi.post_share_ipv4s"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ipv4/share'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_share_ips_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.post_share_ipv4s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#post_share_ipv4s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a firewall
    # Updates information for a Firewall.  - Assigned Linodes must not have any ongoing live migrations.  - If a Firewall's status is changed with this operation, a corresponding `firewall_enable` or `firewall_disable` Event will be generated.  Some parts of a Firewall's configuration cannot be manipulated by this operation:  - A Firewall's Devices cannot be set with this operation. Instead, run the [Create a firewall device](https://techdocs.akamai.com/linode-api/reference/post-firewall-device) and [Delete a firewall device](https://techdocs.akamai.com/linode-api/reference/delete-firewall-device) operations to assign and remove this Firewall from services.  - A Firewall's Rules cannot be changed with this operation. Instead, run the [Update firewall rules](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) operation to update your Rules.  - A Firewall's status can be set to `enabled` or `disabled` by this operation, but it cannot be set to `deleted`. Instead, run the [Delete a firewall](https://techdocs.akamai.com/linode-api/reference/delete-firewall) operation to delete a Firewall.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls update 123 \\   --status disabled     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PutFirewallRequest] :put_firewall_request The Firewall information to update.
    # @return [PutFirewall200Response]
    def put_firewall(api_version, firewall_id, opts = {})
      data, _status_code, _headers = put_firewall_with_http_info(api_version, firewall_id, opts)
      data
    end

    # Update a firewall
    # Updates information for a Firewall.  - Assigned Linodes must not have any ongoing live migrations.  - If a Firewall&#39;s status is changed with this operation, a corresponding &#x60;firewall_enable&#x60; or &#x60;firewall_disable&#x60; Event will be generated.  Some parts of a Firewall&#39;s configuration cannot be manipulated by this operation:  - A Firewall&#39;s Devices cannot be set with this operation. Instead, run the [Create a firewall device](https://techdocs.akamai.com/linode-api/reference/post-firewall-device) and [Delete a firewall device](https://techdocs.akamai.com/linode-api/reference/delete-firewall-device) operations to assign and remove this Firewall from services.  - A Firewall&#39;s Rules cannot be changed with this operation. Instead, run the [Update firewall rules](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) operation to update your Rules.  - A Firewall&#39;s status can be set to &#x60;enabled&#x60; or &#x60;disabled&#x60; by this operation, but it cannot be set to &#x60;deleted&#x60;. Instead, run the [Delete a firewall](https://techdocs.akamai.com/linode-api/reference/delete-firewall) operation to delete a Firewall.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls update 123 \\   --status disabled     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PutFirewallRequest] :put_firewall_request The Firewall information to update.
    # @return [Array<(PutFirewall200Response, Integer, Hash)>] PutFirewall200Response data, response status code and response headers
    def put_firewall_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.put_firewall ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.put_firewall"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.put_firewall"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_firewall_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutFirewall200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.put_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#put_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update firewall rules
    # Updates the inbound and outbound Rules for a Firewall.  - Assigned Linodes must not have any ongoing live migrations.  - __Note__. This operation replaces all of a Firewall's `inbound` and `outbound` rulesets with the values specified in your request.   <<LB>>  ---   - __CLI__.      ```     linode-cli firewalls rules-update 123 \\   --inbound '[{\"action\":\"ACCEPT\", \"protocol\": \"TCP\", \"ports\": \"22, 80, 8080, 443\", \"addresses\": {\"ipv4\": [\"192.0.2.0/24\", \"198.51.100.2/32\"], \"ipv6\": [\"2001:DB8::/128\"]}}]' \\   --outbound '[{\"action\":\"DROP\",\"protocol\": \"TCP\", \"ports\": \"49152-65535\", \"addresses\": {\"ipv4\": [\"192.0.2.0/24\", \"198.51.100.2/32\"], \"ipv6\": [\"2001:DB8::/128`\"]}}]'     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     firewall:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PutFirewallRulesRequest] :put_firewall_rules_request The Firewall Rules information to update.
    # @return [PutFirewallRules200Response]
    def put_firewall_rules(api_version, firewall_id, opts = {})
      data, _status_code, _headers = put_firewall_rules_with_http_info(api_version, firewall_id, opts)
      data
    end

    # Update firewall rules
    # Updates the inbound and outbound Rules for a Firewall.  - Assigned Linodes must not have any ongoing live migrations.  - __Note__. This operation replaces all of a Firewall&#39;s &#x60;inbound&#x60; and &#x60;outbound&#x60; rulesets with the values specified in your request.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli firewalls rules-update 123 \\   --inbound &#39;[{\&quot;action\&quot;:\&quot;ACCEPT\&quot;, \&quot;protocol\&quot;: \&quot;TCP\&quot;, \&quot;ports\&quot;: \&quot;22, 80, 8080, 443\&quot;, \&quot;addresses\&quot;: {\&quot;ipv4\&quot;: [\&quot;192.0.2.0/24\&quot;, \&quot;198.51.100.2/32\&quot;], \&quot;ipv6\&quot;: [\&quot;2001:DB8::/128\&quot;]}}]&#39; \\   --outbound &#39;[{\&quot;action\&quot;:\&quot;DROP\&quot;,\&quot;protocol\&quot;: \&quot;TCP\&quot;, \&quot;ports\&quot;: \&quot;49152-65535\&quot;, \&quot;addresses\&quot;: {\&quot;ipv4\&quot;: [\&quot;192.0.2.0/24\&quot;, \&quot;198.51.100.2/32\&quot;], \&quot;ipv6\&quot;: [\&quot;2001:DB8::/128&#x60;\&quot;]}}]&#39;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     firewall:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param firewall_id [Integer] ID of the Firewall to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PutFirewallRulesRequest] :put_firewall_rules_request The Firewall Rules information to update.
    # @return [Array<(PutFirewallRules200Response, Integer, Hash)>] PutFirewallRules200Response data, response status code and response headers
    def put_firewall_rules_with_http_info(api_version, firewall_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.put_firewall_rules ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.put_firewall_rules"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'firewall_id' is set
      if @api_client.config.client_side_validation && firewall_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_id' when calling NetworkingApi.put_firewall_rules"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/firewalls/{firewallId}/rules'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'firewallId' + '}', CGI.escape(firewall_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_firewall_rules_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutFirewallRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.put_firewall_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#put_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an IP address's RDNS
    # Sets RDNS on an IP Address. Forward DNS must already be set up for reverse DNS to be applied. If you set the RDNS to `null` for public IPv4 addresses, it will be reset to the default _ip.linodeusercontent.com_ RDNS value.   <<LB>>  ---   - __CLI__.      ```     linode-cli networking ip-update \\   203.0.113.1 \\   --rdns \"test.example.org\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param address [String] The address to operate on.
    # @param put_ip_request [PutIpRequest] The information to update.
    # @param [Hash] opts the optional parameters
    # @return [PutIp200Response]
    def put_ip(api_version, address, put_ip_request, opts = {})
      data, _status_code, _headers = put_ip_with_http_info(api_version, address, put_ip_request, opts)
      data
    end

    # Update an IP address&#39;s RDNS
    # Sets RDNS on an IP Address. Forward DNS must already be set up for reverse DNS to be applied. If you set the RDNS to &#x60;null&#x60; for public IPv4 addresses, it will be reset to the default _ip.linodeusercontent.com_ RDNS value.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli networking ip-update \\   203.0.113.1 \\   --rdns \&quot;test.example.org\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param address [String] The address to operate on.
    # @param put_ip_request [PutIpRequest] The information to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutIp200Response, Integer, Hash)>] PutIp200Response data, response status code and response headers
    def put_ip_with_http_info(api_version, address, put_ip_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingApi.put_ip ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NetworkingApi.put_ip"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling NetworkingApi.put_ip"
      end
      # verify the required parameter 'put_ip_request' is set
      if @api_client.config.client_side_validation && put_ip_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_ip_request' when calling NetworkingApi.put_ip"
      end
      # resource path
      local_var_path = '/{apiVersion}/networking/ips/{address}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_ip_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NetworkingApi.put_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingApi#put_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
