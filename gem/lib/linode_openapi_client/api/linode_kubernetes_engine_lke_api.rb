=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class LinodeKubernetesEngineLKEApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Kubernetes cluster
    # Deletes a Cluster you have permission to `read_write`.  __Deleting a Cluster is a destructive action and cannot be undone.__  Deleting a Cluster:  - Deletes all Linodes in all pools within this Kubernetes cluster - Deletes all supporting Kubernetes services for this Kubernetes cluster (API server, etcd, etc) - Deletes all NodeBalancers created by this Kubernetes cluster - Does not delete any of the volumes created by this Kubernetes cluster   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_lke_cluster(api_version, cluster_id, opts = {})
      data, _status_code, _headers = delete_lke_cluster_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Delete a Kubernetes cluster
    # Deletes a Cluster you have permission to &#x60;read_write&#x60;.  __Deleting a Cluster is a destructive action and cannot be undone.__  Deleting a Cluster:  - Deletes all Linodes in all pools within this Kubernetes cluster - Deletes all supporting Kubernetes services for this Kubernetes cluster (API server, etcd, etc) - Deletes all NodeBalancers created by this Kubernetes cluster - Does not delete any of the volumes created by this Kubernetes cluster   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_lke_cluster_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.delete_lke_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.delete_lke_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#delete_lke_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Kubeconfig
    # Delete and regenerate the Kubeconfig file for a Cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke kubeconfig-delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_lke_cluster_kubeconfig(api_version, cluster_id, opts = {})
      data, _status_code, _headers = delete_lke_cluster_kubeconfig_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Delete a Kubeconfig
    # Delete and regenerate the Kubeconfig file for a Cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke kubeconfig-delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_lke_cluster_kubeconfig_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.delete_lke_cluster_kubeconfig ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster_kubeconfig"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster_kubeconfig"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/kubeconfig'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.delete_lke_cluster_kubeconfig",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#delete_lke_cluster_kubeconfig\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a node
    # Deletes a specific Node from a Node Pool.  __Deleting a Node is a destructive action and cannot be undone.__  Deleting a Node will reduce the size of the Node Pool it belongs to.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke node-delete 12345 12345-6aa78910bc     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_lke_cluster_node(api_version, cluster_id, node_id, opts = {})
      data, _status_code, _headers = delete_lke_cluster_node_with_http_info(api_version, cluster_id, node_id, opts)
      data
    end

    # Delete a node
    # Deletes a specific Node from a Node Pool.  __Deleting a Node is a destructive action and cannot be undone.__  Deleting a Node will reduce the size of the Node Pool it belongs to.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke node-delete 12345 12345-6aa78910bc     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_lke_cluster_node_with_http_info(api_version, cluster_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.delete_lke_cluster_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_cluster_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/nodes/{nodeId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.delete_lke_cluster_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#delete_lke_cluster_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a node pool
    # Delete a specific Node Pool from a Kubernetes cluster.  __Deleting a Node Pool is a destructive action and cannot be undone.__  Deleting a Node Pool will delete all Linodes within that Pool.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pool-delete 12345 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_lke_node_pool(api_version, cluster_id, pool_id, opts = {})
      data, _status_code, _headers = delete_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts)
      data
    end

    # Delete a node pool
    # Delete a specific Node Pool from a Kubernetes cluster.  __Deleting a Node Pool is a destructive action and cannot be undone.__  Deleting a Node Pool will delete all Linodes within that Pool.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pool-delete 12345 456     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.delete_lke_node_pool ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.delete_lke_node_pool"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_node_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_node_pool"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools/{poolId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'poolId' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.delete_lke_node_pool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#delete_lke_node_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a service token
    # Delete and regenerate the service account token for a Cluster.  __Note__. When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke service-token-delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the target Kubernetes cluster.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_lke_service_token(api_version, cluster_id, opts = {})
      data, _status_code, _headers = delete_lke_service_token_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Delete a service token
    # Delete and regenerate the service account token for a Cluster.  __Note__. When regenerating a service account token, the Cluster&#39;s control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke service-token-delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the target Kubernetes cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_lke_service_token_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.delete_lke_service_token ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.delete_lke_service_token"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.delete_lke_service_token"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/servicetoken'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.delete_lke_service_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#delete_lke_service_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Kubernetes cluster
    # Get a specific Cluster by ID.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-view 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeCluster200Response]
    def get_lke_cluster(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Get a Kubernetes cluster
    # Get a specific Cluster by ID.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-view 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeCluster200Response, Integer, Hash)>] GetLkeCluster200Response data, response status code and response headers
    def get_lke_cluster_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeCluster200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Kubernetes API endpoints
    # List the Kubernetes API server endpoints for this cluster. Please note that it often takes 2-5 minutes before the endpoint is ready after first [creating a new cluster](https://techdocs.akamai.com/linode-api/reference/post-lke-cluster).   <<LB>>  ---   - __CLI__.      ```     linode-cli lke api-endpoints-list 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusterApiEndpoints200Response]
    def get_lke_cluster_api_endpoints(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_api_endpoints_with_http_info(api_version, cluster_id, opts)
      data
    end

    # List Kubernetes API endpoints
    # List the Kubernetes API server endpoints for this cluster. Please note that it often takes 2-5 minutes before the endpoint is ready after first [creating a new cluster](https://techdocs.akamai.com/linode-api/reference/post-lke-cluster).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke api-endpoints-list 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusterApiEndpoints200Response, Integer, Hash)>] GetLkeClusterApiEndpoints200Response data, response status code and response headers
    def get_lke_cluster_api_endpoints_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster_api_endpoints ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_api_endpoints"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_api_endpoints"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/api-endpoints'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusterApiEndpoints200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster_api_endpoints",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster_api_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Kubernetes cluster dashboard URL
    # Get a [Kubernetes Dashboard](https://github.com/kubernetes/dashboard) access URL for this Cluster, which enables performance of administrative tasks through a web interface.  Dashboards are installed for Clusters by default.  To access the Cluster Dashboard login prompt, enter the URL in a web browser. Select either __Token__ or __Kubeconfig__ authentication, then select __Sign in__.  For additional guidance on using the Cluster Dashboard, see the [Navigating the Cluster Dashboard](https://www.linode.com/docs/guides/using-the-kubernetes-dashboard-on-lke/#navigating-the-cluster-dashboard) section of our guide on [Using the Kubernetes Dashboard on LKE](https://www.linode.com/docs/guides/using-the-kubernetes-dashboard-on-lke/).   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-dashboard-url 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusterDashboard200Response]
    def get_lke_cluster_dashboard(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_dashboard_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Get a Kubernetes cluster dashboard URL
    # Get a [Kubernetes Dashboard](https://github.com/kubernetes/dashboard) access URL for this Cluster, which enables performance of administrative tasks through a web interface.  Dashboards are installed for Clusters by default.  To access the Cluster Dashboard login prompt, enter the URL in a web browser. Select either __Token__ or __Kubeconfig__ authentication, then select __Sign in__.  For additional guidance on using the Cluster Dashboard, see the [Navigating the Cluster Dashboard](https://www.linode.com/docs/guides/using-the-kubernetes-dashboard-on-lke/#navigating-the-cluster-dashboard) section of our guide on [Using the Kubernetes Dashboard on LKE](https://www.linode.com/docs/guides/using-the-kubernetes-dashboard-on-lke/).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-dashboard-url 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusterDashboard200Response, Integer, Hash)>] GetLkeClusterDashboard200Response data, response status code and response headers
    def get_lke_cluster_dashboard_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster_dashboard ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_dashboard"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_dashboard"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/dashboard'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusterDashboard200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster_dashboard",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster_dashboard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Kubeconfig
    # Get the Kubeconfig file for a Cluster. Please note that it often takes 2-5 minutes before the Kubeconfig file is ready after first [creating a new cluster](https://techdocs.akamai.com/linode-api/reference/post-lke-cluster).   <<LB>>  ---   - __CLI__.      ```     linode-cli lke kubeconfig-view 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusterKubeconfig200Response]
    def get_lke_cluster_kubeconfig(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_kubeconfig_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Get a Kubeconfig
    # Get the Kubeconfig file for a Cluster. Please note that it often takes 2-5 minutes before the Kubeconfig file is ready after first [creating a new cluster](https://techdocs.akamai.com/linode-api/reference/post-lke-cluster).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke kubeconfig-view 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusterKubeconfig200Response, Integer, Hash)>] GetLkeClusterKubeconfig200Response data, response status code and response headers
    def get_lke_cluster_kubeconfig_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster_kubeconfig ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_kubeconfig"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_kubeconfig"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/kubeconfig'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusterKubeconfig200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster_kubeconfig",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster_kubeconfig\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a node
    # Returns the values for a specified node object.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke node-view 123456 12345-6aa78910bc     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusterNode200Response]
    def get_lke_cluster_node(api_version, cluster_id, node_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_node_with_http_info(api_version, cluster_id, node_id, opts)
      data
    end

    # Get a node
    # Returns the values for a specified node object.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke node-view 123456 12345-6aa78910bc     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusterNode200Response, Integer, Hash)>] GetLkeClusterNode200Response data, response status code and response headers
    def get_lke_cluster_node_with_http_info(api_version, cluster_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/nodes/{nodeId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusterNode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List node pools
    # Returns all active Node Pools on a Kubernetes cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pools-list 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusterPools200Response]
    def get_lke_cluster_pools(api_version, cluster_id, opts = {})
      data, _status_code, _headers = get_lke_cluster_pools_with_http_info(api_version, cluster_id, opts)
      data
    end

    # List node pools
    # Returns all active Node Pools on a Kubernetes cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pools-list 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusterPools200Response, Integer, Hash)>] GetLkeClusterPools200Response data, response status code and response headers
    def get_lke_cluster_pools_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_cluster_pools ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_pools"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_cluster_pools"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusterPools200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_cluster_pools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_cluster_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Kubernetes clusters
    # Lists current Kubernetes clusters available on your account.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke clusters-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeClusters200Response]
    def get_lke_clusters(api_version, opts = {})
      data, _status_code, _headers = get_lke_clusters_with_http_info(api_version, opts)
      data
    end

    # List Kubernetes clusters
    # Lists current Kubernetes clusters available on your account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke clusters-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeClusters200Response, Integer, Hash)>] GetLkeClusters200Response data, response status code and response headers
    def get_lke_clusters_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_clusters ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_clusters"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeClusters200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_clusters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a node pool
    # Get a specific Node Pool by ID.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pool-view 12345 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeNodePool200Response]
    def get_lke_node_pool(api_version, cluster_id, pool_id, opts = {})
      data, _status_code, _headers = get_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts)
      data
    end

    # Get a node pool
    # Get a specific Node Pool by ID.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pool-view 12345 456     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeNodePool200Response, Integer, Hash)>] GetLkeNodePool200Response data, response status code and response headers
    def get_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_node_pool ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_node_pool"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.get_lke_node_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling LinodeKubernetesEngineLKEApi.get_lke_node_pool"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools/{poolId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'poolId' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeNodePool200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_node_pool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_node_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Kubernetes version
    # View a Kubernetes version available for deployment to a Kubernetes cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke version-view 1.27     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param version [String] The LKE version to view.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeVersions200ResponseDataInner]
    def get_lke_version(api_version, version, opts = {})
      data, _status_code, _headers = get_lke_version_with_http_info(api_version, version, opts)
      data
    end

    # Get a Kubernetes version
    # View a Kubernetes version available for deployment to a Kubernetes cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke version-view 1.27     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param version [String] The LKE version to view.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeVersions200ResponseDataInner, Integer, Hash)>] GetLkeVersions200ResponseDataInner data, response status code and response headers
    def get_lke_version_with_http_info(api_version, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_version ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_version"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling LinodeKubernetesEngineLKEApi.get_lke_version"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/versions/{version}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeVersions200ResponseDataInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Kubernetes versions
    # List the Kubernetes versions available for deployment to a Kubernetes cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke versions-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetLkeVersions200Response]
    def get_lke_versions(api_version, opts = {})
      data, _status_code, _headers = get_lke_versions_with_http_info(api_version, opts)
      data
    end

    # List Kubernetes versions
    # List the Kubernetes versions available for deployment to a Kubernetes cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke versions-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLkeVersions200Response, Integer, Hash)>] GetLkeVersions200Response data, response status code and response headers
    def get_lke_versions_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.get_lke_versions ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.get_lke_versions"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/versions'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLkeVersions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.get_lke_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#get_lke_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Kubernetes cluster
    # Creates a Kubernetes cluster. The Kubernetes cluster will be created asynchronously. You can use the events system to determine when the Kubernetes cluster is ready to use. Please note that it often takes 2-5 minutes before the [Kubernetes API endpoints](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster-api-endpoints) and the [Kubeconfig file](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster-kubeconfig) for the new cluster are ready.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-create \\   --label cluster12345 \\   --region us-central \\   --k8s_version 1.27 \\   --control_plane.high_availability true \\   --node_pools.type g6-standard-4 --node_pools.count 6 \\   --node_pools.type g6-standard-8 --node_pools.count 3 \\   --node_pools.autoscaler.enabled true \\   --node_pools.autoscaler.max 12 \\   --node_pools.autoscaler.min 3 \\   --tags ecomm     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostLkeClusterRequest] :post_lke_cluster_request Configuration for the Kubernetes cluster.
    # @return [PostLkeCluster200Response]
    def post_lke_cluster(api_version, opts = {})
      data, _status_code, _headers = post_lke_cluster_with_http_info(api_version, opts)
      data
    end

    # Create a Kubernetes cluster
    # Creates a Kubernetes cluster. The Kubernetes cluster will be created asynchronously. You can use the events system to determine when the Kubernetes cluster is ready to use. Please note that it often takes 2-5 minutes before the [Kubernetes API endpoints](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster-api-endpoints) and the [Kubeconfig file](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster-kubeconfig) for the new cluster are ready.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-create \\   --label cluster12345 \\   --region us-central \\   --k8s_version 1.27 \\   --control_plane.high_availability true \\   --node_pools.type g6-standard-4 --node_pools.count 6 \\   --node_pools.type g6-standard-8 --node_pools.count 3 \\   --node_pools.autoscaler.enabled true \\   --node_pools.autoscaler.max 12 \\   --node_pools.autoscaler.min 3 \\   --tags ecomm     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostLkeClusterRequest] :post_lke_cluster_request Configuration for the Kubernetes cluster.
    # @return [Array<(PostLkeCluster200Response, Integer, Hash)>] PostLkeCluster200Response data, response status code and response headers
    def post_lke_cluster_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_lke_cluster_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostLkeCluster200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recycle a node
    # Recycles an individual Node in the designated Kubernetes Cluster. The Node will be deleted and replaced with a new Linode, which may take a few minutes. Replacement Nodes are installed with the latest available patch for the Cluster's Kubernetes Version.  __Any local storage on deleted Linodes (such as `hostPath` and `emptyDir` volumes, or `local` PersistentVolumes) will be erased.__   <<LB>>  ---   - __CLI__.      ```     linode-cli lke node-recycle 12345 12345-6aa78910bc     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [String] ID of the Node to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_lke_cluster_node_recycle(api_version, cluster_id, node_id, opts = {})
      data, _status_code, _headers = post_lke_cluster_node_recycle_with_http_info(api_version, cluster_id, node_id, opts)
      data
    end

    # Recycle a node
    # Recycles an individual Node in the designated Kubernetes Cluster. The Node will be deleted and replaced with a new Linode, which may take a few minutes. Replacement Nodes are installed with the latest available patch for the Cluster&#39;s Kubernetes Version.  __Any local storage on deleted Linodes (such as &#x60;hostPath&#x60; and &#x60;emptyDir&#x60; volumes, or &#x60;local&#x60; PersistentVolumes) will be erased.__   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke node-recycle 12345 12345-6aa78910bc     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster containing the Node.
    # @param node_id [String] ID of the Node to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_lke_cluster_node_recycle_with_http_info(api_version, cluster_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster_node_recycle ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_node_recycle"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_node_recycle"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_node_recycle"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/nodes/{nodeId}/recycle'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster_node_recycle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster_node_recycle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recycle a node pool
    # Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are installed with the latest available patch for the Cluster's Kubernetes Version.  __Any local storage on deleted Linodes (such as `hostPath` and `emptyDir` volumes, or `local` PersistentVolumes) will be erased.__   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pool-recycle 12345 456     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster this Node Pool is attached to.
    # @param pool_id [Integer] ID of the Node Pool to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_lke_cluster_pool_recycle(api_version, cluster_id, pool_id, opts = {})
      data, _status_code, _headers = post_lke_cluster_pool_recycle_with_http_info(api_version, cluster_id, pool_id, opts)
      data
    end

    # Recycle a node pool
    # Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are installed with the latest available patch for the Cluster&#39;s Kubernetes Version.  __Any local storage on deleted Linodes (such as &#x60;hostPath&#x60; and &#x60;emptyDir&#x60; volumes, or &#x60;local&#x60; PersistentVolumes) will be erased.__   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pool-recycle 12345 456     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster this Node Pool is attached to.
    # @param pool_id [Integer] ID of the Node Pool to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_lke_cluster_pool_recycle_with_http_info(api_version, cluster_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster_pool_recycle ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pool_recycle"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pool_recycle"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pool_recycle"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools/{poolId}/recycle'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'poolId' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster_pool_recycle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster_pool_recycle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a node pool
    # Creates a new Node Pool for the designated Kubernetes cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pool-create 12345 \\   --type g6-standard-4 \\   --count 6 \\   --tags example-tag \\   --autoscaler.enabled true \\   --autoscaler.max 12 \\   --autoscaler.min 3     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param post_lke_cluster_pools_request [PostLkeClusterPoolsRequest] Configuration for the Node Pool.
    # @param [Hash] opts the optional parameters
    # @return [PostLkeClusterPools200Response]
    def post_lke_cluster_pools(api_version, cluster_id, post_lke_cluster_pools_request, opts = {})
      data, _status_code, _headers = post_lke_cluster_pools_with_http_info(api_version, cluster_id, post_lke_cluster_pools_request, opts)
      data
    end

    # Create a node pool
    # Creates a new Node Pool for the designated Kubernetes cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pool-create 12345 \\   --type g6-standard-4 \\   --count 6 \\   --tags example-tag \\   --autoscaler.enabled true \\   --autoscaler.max 12 \\   --autoscaler.min 3     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param post_lke_cluster_pools_request [PostLkeClusterPoolsRequest] Configuration for the Node Pool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostLkeClusterPools200Response, Integer, Hash)>] PostLkeClusterPools200Response data, response status code and response headers
    def post_lke_cluster_pools_with_http_info(api_version, cluster_id, post_lke_cluster_pools_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster_pools ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pools"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pools"
      end
      # verify the required parameter 'post_lke_cluster_pools_request' is set
      if @api_client.config.client_side_validation && post_lke_cluster_pools_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_lke_cluster_pools_request' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_pools"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_lke_cluster_pools_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostLkeClusterPools200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster_pools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recycle cluster nodes
    # Recycles all nodes in all pools of a designated Kubernetes Cluster. All Linodes within the Cluster will be deleted and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are installed with the latest available [patch version](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/release/versioning.md#kubernetes-release-versioning) for the Cluster's current Kubernetes minor release.  __Any local storage on deleted Linodes (such as `hostPath` and `emptyDir` volumes, or `local` PersistentVolumes) will be erased.__   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-nodes-recycle 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster which contains nodes to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_lke_cluster_recycle(api_version, cluster_id, opts = {})
      data, _status_code, _headers = post_lke_cluster_recycle_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Recycle cluster nodes
    # Recycles all nodes in all pools of a designated Kubernetes Cluster. All Linodes within the Cluster will be deleted and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are installed with the latest available [patch version](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/release/versioning.md#kubernetes-release-versioning) for the Cluster&#39;s current Kubernetes minor release.  __Any local storage on deleted Linodes (such as &#x60;hostPath&#x60; and &#x60;emptyDir&#x60; volumes, or &#x60;local&#x60; PersistentVolumes) will be erased.__   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-nodes-recycle 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster which contains nodes to be recycled.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_lke_cluster_recycle_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster_recycle ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_recycle"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_recycle"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/recycle'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster_recycle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster_recycle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Regenerate a Kubernetes cluster
    # Regenerate the Kubeconfig file and/or the service account token for a Cluster.  This is a helper operation that allows performing both the [Delete a Kubeconfig](https://techdocs.akamai.com/linode-api/reference/delete-lke-cluster-kubeconfig) and the [Delete a service token](https://techdocs.akamai.com/linode-api/reference/delete-lke-service-token) operations with a single request.  When using this operation, at least one of `kubeconfig` or `servicetoken` is required.  __Note__. When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke regenerate 12345 \\     --kubeconfig true \\     --servicetoken true     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the target Kubernetes cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [PostLkeClusterRegenerateRequest] :post_lke_cluster_regenerate_request The Kubernetes Cluster Regenerate request object.
    # @return [Object]
    def post_lke_cluster_regenerate(api_version, cluster_id, opts = {})
      data, _status_code, _headers = post_lke_cluster_regenerate_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Regenerate a Kubernetes cluster
    # Regenerate the Kubeconfig file and/or the service account token for a Cluster.  This is a helper operation that allows performing both the [Delete a Kubeconfig](https://techdocs.akamai.com/linode-api/reference/delete-lke-cluster-kubeconfig) and the [Delete a service token](https://techdocs.akamai.com/linode-api/reference/delete-lke-service-token) operations with a single request.  When using this operation, at least one of &#x60;kubeconfig&#x60; or &#x60;servicetoken&#x60; is required.  __Note__. When regenerating a service account token, the Cluster&#39;s control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke regenerate 12345 \\     --kubeconfig true \\     --servicetoken true     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the target Kubernetes cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [PostLkeClusterRegenerateRequest] :post_lke_cluster_regenerate_request The Kubernetes Cluster Regenerate request object.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_lke_cluster_regenerate_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.post_lke_cluster_regenerate ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_regenerate"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.post_lke_cluster_regenerate"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/regenerate'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_lke_cluster_regenerate_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.post_lke_cluster_regenerate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#post_lke_cluster_regenerate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Kubernetes cluster
    # Updates a Kubernetes cluster.   <<LB>>  ---   - __CLI__.      ```     linode-cli lke cluster-update 12345 \\   --label lkecluster54321 \\   --control_plane.high_availability true \\   --k8s_version 1.27 \\   --tags ecomm \\   --tags blog \\   --tags prod \\   --tags monitoring     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutLkeClusterRequest] :put_lke_cluster_request The fields to update the Kubernetes cluster.
    # @return [PutLkeCluster200Response]
    def put_lke_cluster(api_version, cluster_id, opts = {})
      data, _status_code, _headers = put_lke_cluster_with_http_info(api_version, cluster_id, opts)
      data
    end

    # Update a Kubernetes cluster
    # Updates a Kubernetes cluster.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke cluster-update 12345 \\   --label lkecluster54321 \\   --control_plane.high_availability true \\   --k8s_version 1.27 \\   --tags ecomm \\   --tags blog \\   --tags prod \\   --tags monitoring     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutLkeClusterRequest] :put_lke_cluster_request The fields to update the Kubernetes cluster.
    # @return [Array<(PutLkeCluster200Response, Integer, Hash)>] PutLkeCluster200Response data, response status code and response headers
    def put_lke_cluster_with_http_info(api_version, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.put_lke_cluster ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.put_lke_cluster"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.put_lke_cluster"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_lke_cluster_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutLkeCluster200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.put_lke_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#put_lke_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a node pool
    # Updates a node pool's count, labels and taints, and autoscaler configuration.  Linodes are created or deleted to match changes to the Node Pool's count.  Specifying labels or taints on update overwrites any previous values, and updates existing nodes with the new values without a recycle.  __Any local storage on deleted Linodes (such as `hostPath` and `emptyDir` volumes, or `local` PersistentVolumes) will be erased.__   <<LB>>  ---   - __CLI__.      ```     linode-cli lke pool-update 12345 456 \\   --count 6 \\   --autoscaler.enabled true \\   --autoscaler.max 12 \\   --autoscaler.min 3 \\     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     lke:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutLkeNodePoolRequest] :put_lke_node_pool_request The fields to update.
    # @return [PutLkeNodePool200Response]
    def put_lke_node_pool(api_version, cluster_id, pool_id, opts = {})
      data, _status_code, _headers = put_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts)
      data
    end

    # Update a node pool
    # Updates a node pool&#39;s count, labels and taints, and autoscaler configuration.  Linodes are created or deleted to match changes to the Node Pool&#39;s count.  Specifying labels or taints on update overwrites any previous values, and updates existing nodes with the new values without a recycle.  __Any local storage on deleted Linodes (such as &#x60;hostPath&#x60; and &#x60;emptyDir&#x60; volumes, or &#x60;local&#x60; PersistentVolumes) will be erased.__   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli lke pool-update 12345 456 \\   --count 6 \\   --autoscaler.enabled true \\   --autoscaler.max 12 \\   --autoscaler.min 3 \\     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     lke:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param cluster_id [Integer] ID of the Kubernetes cluster to look up.
    # @param pool_id [Integer] ID of the Pool to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutLkeNodePoolRequest] :put_lke_node_pool_request The fields to update.
    # @return [Array<(PutLkeNodePool200Response, Integer, Hash)>] PutLkeNodePool200Response data, response status code and response headers
    def put_lke_node_pool_with_http_info(api_version, cluster_id, pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinodeKubernetesEngineLKEApi.put_lke_node_pool ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling LinodeKubernetesEngineLKEApi.put_lke_node_pool"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LinodeKubernetesEngineLKEApi.put_lke_node_pool"
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling LinodeKubernetesEngineLKEApi.put_lke_node_pool"
      end
      # resource path
      local_var_path = '/{apiVersion}/lke/clusters/{clusterId}/pools/{poolId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s)).sub('{' + 'poolId' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_lke_node_pool_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutLkeNodePool200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"LinodeKubernetesEngineLKEApi.put_lke_node_pool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinodeKubernetesEngineLKEApi#put_lke_node_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
