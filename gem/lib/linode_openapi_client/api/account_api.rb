=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an OAuth client
    # Deletes an OAuth Client registered with Linode. The Client ID and Client secret will no longer be accepted by [login.linode.com](https://login.linode.com), and all tokens issued to this client will be invalidated (meaning that if your application was using a token, it will no longer work).   <<LB>>  ---   - __CLI__.      ```     linode-cli account client-delete \\   edc6790ea9db4d224c5c     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_client(api_version, client_id, opts = {})
      data, _status_code, _headers = delete_client_with_http_info(api_version, client_id, opts)
      data
    end

    # Delete an OAuth client
    # Deletes an OAuth Client registered with Linode. The Client ID and Client secret will no longer be accepted by [login.linode.com](https://login.linode.com), and all tokens issued to this client will be invalidated (meaning that if your application was using a token, it will no longer work).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account client-delete \\   edc6790ea9db4d224c5c     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_client_with_http_info(api_version, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_client ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.delete_client"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.delete_client"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.delete_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel an entity transfer
    # __Deprecated__ Please run [Cancel a service transfer](https://techdocs.akamai.com/linode-api/reference/delete-service-transfer).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_entity_transfer(api_version, token, opts = {})
      data, _status_code, _headers = delete_entity_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Cancel an entity transfer
    # __Deprecated__ Please run [Cancel a service transfer](https://techdocs.akamai.com/linode-api/reference/delete-service-transfer).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_entity_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_entity_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.delete_entity_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.delete_entity_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/entity-transfers/{token}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.delete_entity_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_entity_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a payment method
    # Deactivate the specified Payment Method.  The default Payment Method can not be deleted. To add a new default Payment Method, run the [Add a payment method](https://techdocs.akamai.com/linode-api/reference/post-payment-method) operation. To designate an existing Payment Method as the default method, run the [Set a default payment method](https://techdocs.akamai.com/linode-api/reference/post-make-payment-method-default) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli payment-methods delete 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_payment_method(api_version, payment_method_id, opts = {})
      data, _status_code, _headers = delete_payment_method_with_http_info(api_version, payment_method_id, opts)
      data
    end

    # Delete a payment method
    # Deactivate the specified Payment Method.  The default Payment Method can not be deleted. To add a new default Payment Method, run the [Add a payment method](https://techdocs.akamai.com/linode-api/reference/post-payment-method) operation. To designate an existing Payment Method as the default method, run the [Set a default payment method](https://techdocs.akamai.com/linode-api/reference/post-make-payment-method-default) operation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli payment-methods delete 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_payment_method_with_http_info(api_version, payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_payment_method ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.delete_payment_method"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling AccountApi.delete_payment_method"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payment-methods/{paymentMethodId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'paymentMethodId' + '}', CGI.escape(payment_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.delete_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a service transfer
    # Cancels the Service Transfer for the provided token. Once canceled, a transfer cannot be accepted or otherwise acted on in any way. If canceled in error, the transfer must be [created](https://techdocs.akamai.com/linode-api/reference/post-service-transfer) again.  When canceled, an email notification for the cancellation is sent to the account that created this transfer. Transfers can not be canceled if they are expired or have been accepted.  This operation can only be accessed by the unrestricted users of the account that created this transfer.   <<LB>>  ---   - __CLI__.      ```     linode-cli service-transfers \\   cancel 123E4567-E89B-12D3-A456-426614174000     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_service_transfer(api_version, token, opts = {})
      data, _status_code, _headers = delete_service_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Cancel a service transfer
    # Cancels the Service Transfer for the provided token. Once canceled, a transfer cannot be accepted or otherwise acted on in any way. If canceled in error, the transfer must be [created](https://techdocs.akamai.com/linode-api/reference/post-service-transfer) again.  When canceled, an email notification for the cancellation is sent to the account that created this transfer. Transfers can not be canceled if they are expired or have been accepted.  This operation can only be accessed by the unrestricted users of the account that created this transfer.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli service-transfers \\   cancel 123E4567-E89B-12D3-A456-426614174000     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_service_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_service_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.delete_service_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.delete_service_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/service-transfers/{token}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.delete_service_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_service_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # Deletes a user. The API immediately logs the user out and removes all of its `grants`.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can't delete a child account parent user (proxy user). The API returns a 403 error if you target a proxy user with this operation.  - A parent account using an unrestricted proxy user can use this operation to delete a child account user.   <<LB>>  ---   - __CLI__.      ```     linode-cli users delete example_user     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_user(api_version, username, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(api_version, username, opts)
      data
    end

    # Delete a user
    # Deletes a user. The API immediately logs the user out and removes all of its &#x60;grants&#x60;.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can&#39;t delete a child account parent user (proxy user). The API returns a 403 error if you target a proxy user with this operation.  - A parent account using an unrestricted proxy user can use this operation to delete a child account user.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli users delete example_user     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_user_with_http_info(api_version, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_user ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.delete_user"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AccountApi.delete_user"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users/{username}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your account
    # Returns the contact and billing information related to your Account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account view     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetAccount200Response]
    def get_account(api_version, opts = {})
      data, _status_code, _headers = get_account_with_http_info(api_version, opts)
      data
    end

    # Get your account
    # Returns the contact and billing information related to your Account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account view     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccount200Response, Integer, Hash)>] GetAccount200Response data, response status code and response headers
    def get_account_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List agreements
    # Returns all agreements and their acceptance status for your account.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountAgreements200Response]
    def get_account_agreements(api_version, opts = {})
      data, _status_code, _headers = get_account_agreements_with_http_info(api_version, opts)
      data
    end

    # List agreements
    # Returns all agreements and their acceptance status for your account.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountAgreements200Response, Integer, Hash)>] GetAccountAgreements200Response data, response status code and response headers
    def get_account_agreements_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_agreements ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account_agreements"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/agreements'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountAgreements200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account_agreements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a region's service availability
    # View the available services for your account in a specific region.  __Note__. Only authorized users can access this.   <<LB>>  ---   - __CLI__.      ```     linode-cli account get-account-availability us-east     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param id [String] The slug for the applicable data center. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the slug for each data center.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountAvailability200Response]
    def get_account_availability(api_version, id, opts = {})
      data, _status_code, _headers = get_account_availability_with_http_info(api_version, id, opts)
      data
    end

    # Get a region&#39;s service availability
    # View the available services for your account in a specific region.  __Note__. Only authorized users can access this.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account get-account-availability us-east     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param id [String] The slug for the applicable data center. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the slug for each data center.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountAvailability200Response, Integer, Hash)>] GetAccountAvailability200Response data, response status code and response headers
    def get_account_availability_with_http_info(api_version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_availability ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account_availability"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountApi.get_account_availability"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/availability/{id}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountAvailability200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an account login
    # Returns a Login object that displays information about a successful login. The logins that can be viewed can be for any user on the account, and are not limited to only the logins of the user that is accessing this API endpoint. This operation can only be accessed by the unrestricted users of the account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account login-view 1234     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param login_id [Integer] The ID of the login object to access.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountLogin200Response]
    def get_account_login(api_version, login_id, opts = {})
      data, _status_code, _headers = get_account_login_with_http_info(api_version, login_id, opts)
      data
    end

    # Get an account login
    # Returns a Login object that displays information about a successful login. The logins that can be viewed can be for any user on the account, and are not limited to only the logins of the user that is accessing this API endpoint. This operation can only be accessed by the unrestricted users of the account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account login-view 1234     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param login_id [Integer] The ID of the login object to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountLogin200Response, Integer, Hash)>] GetAccountLogin200Response data, response status code and response headers
    def get_account_login_with_http_info(api_version, login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_login ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account_login"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'login_id' is set
      if @api_client.config.client_side_validation && login_id.nil?
        fail ArgumentError, "Missing the required parameter 'login_id' when calling AccountApi.get_account_login"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/logins/{loginId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'loginId' + '}', CGI.escape(login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountLogin200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user logins
    # Returns a collection of successful logins for all users on the account during the last 90 days. This operation can only be accessed by the unrestricted users of an account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account logins-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountLogins200Response]
    def get_account_logins(api_version, opts = {})
      data, _status_code, _headers = get_account_logins_with_http_info(api_version, opts)
      data
    end

    # List user logins
    # Returns a collection of successful logins for all users on the account during the last 90 days. This operation can only be accessed by the unrestricted users of an account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account logins-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountLogins200Response, Integer, Hash)>] GetAccountLogins200Response data, response status code and response headers
    def get_account_logins_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_logins ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account_logins"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/logins'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountLogins200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account_logins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_logins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account settings
    # Returns information related to your Account settings: Managed service subscription, Longview subscription, and network helper.   <<LB>>  ---   - __CLI__.      ```     linode-cli account settings     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountSettings200Response]
    def get_account_settings(api_version, opts = {})
      data, _status_code, _headers = get_account_settings_with_http_info(api_version, opts)
      data
    end

    # Get account settings
    # Returns information related to your Account settings: Managed service subscription, Longview subscription, and network helper.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account settings     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountSettings200Response, Integer, Hash)>] GetAccountSettings200Response data, response status code and response headers
    def get_account_settings_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_settings ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_account_settings"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/settings'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountSettings200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_account_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List available services
    # Returns a paginated list of the services available to you, for all Linode regions.  __Note__. Only authorized Users can run this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli account get-availability     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetAvailability200Response]
    def get_availability(api_version, opts = {})
      data, _status_code, _headers = get_availability_with_http_info(api_version, opts)
      data
    end

    # List available services
    # Returns a paginated list of the services available to you, for all Linode regions.  __Note__. Only authorized Users can run this operation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account get-availability     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetAvailability200Response, Integer, Hash)>] GetAvailability200Response data, response status code and response headers
    def get_availability_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_availability ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_availability"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_availability, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_availability, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_availability, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/availability'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAvailability200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a child account
    # View a specific child account based on its `euuid`. See [Parent and Child Accounts for Akamai Partners](https://www.linode.com/docs/guides/parent-child-accounts/) for details on these accounts.  __Note__. This operation can only be accessed by an unrestricted user, or restricted user with the `child_account_access` grant.   <<LB>>  ---   - __CLI__.      ```     linode-cli child-account view A1BC2DEF-34GH-567I-J890KLMN12O34P56     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     child_account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param euuid [String] The child account to look up. You can run the [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) operation to find the applicable account and store its &#x60;euuid&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [GetChildAccount200Response]
    def get_child_account(api_version, euuid, opts = {})
      data, _status_code, _headers = get_child_account_with_http_info(api_version, euuid, opts)
      data
    end

    # Get a child account
    # View a specific child account based on its &#x60;euuid&#x60;. See [Parent and Child Accounts for Akamai Partners](https://www.linode.com/docs/guides/parent-child-accounts/) for details on these accounts.  __Note__. This operation can only be accessed by an unrestricted user, or restricted user with the &#x60;child_account_access&#x60; grant.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli child-account view A1BC2DEF-34GH-567I-J890KLMN12O34P56     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     child_account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param euuid [String] The child account to look up. You can run the [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) operation to find the applicable account and store its &#x60;euuid&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChildAccount200Response, Integer, Hash)>] GetChildAccount200Response data, response status code and response headers
    def get_child_account_with_http_info(api_version, euuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_child_account ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_child_account"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'euuid' is set
      if @api_client.config.client_side_validation && euuid.nil?
        fail ArgumentError, "Missing the required parameter 'euuid' when calling AccountApi.get_child_account"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/child-accounts/{euuid}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'euuid' + '}', CGI.escape(euuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChildAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_child_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_child_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List child accounts
    # Returns a paginated list of basic information for the child accounts that exist for your parent account. See [Parent and Child Accounts for Akamai Partners](https://www.linode.com/docs/guides/parent-child-accounts/) for details on these accounts.  __Note__. This operation can only be accessed by an unrestricted parent user, or restricted parent user with the `child_account_access` grant.   <<LB>>  ---   - __CLI__.      ```     linode-cli child-account list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     child_account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetChildAccounts200Response]
    def get_child_accounts(api_version, opts = {})
      data, _status_code, _headers = get_child_accounts_with_http_info(api_version, opts)
      data
    end

    # List child accounts
    # Returns a paginated list of basic information for the child accounts that exist for your parent account. See [Parent and Child Accounts for Akamai Partners](https://www.linode.com/docs/guides/parent-child-accounts/) for details on these accounts.  __Note__. This operation can only be accessed by an unrestricted parent user, or restricted parent user with the &#x60;child_account_access&#x60; grant.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli child-account list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     child_account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetChildAccounts200Response, Integer, Hash)>] GetChildAccounts200Response data, response status code and response headers
    def get_child_accounts_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_child_accounts ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_child_accounts"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_child_accounts, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_child_accounts, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_child_accounts, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/child-accounts'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChildAccounts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_child_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_child_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an OAuth client
    # Returns information about a single OAuth client.   <<LB>>  ---   - __CLI__.      ```     linode-cli account client-view \\   edc6790ea9db4d224c5c     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetClient200Response]
    def get_client(api_version, client_id, opts = {})
      data, _status_code, _headers = get_client_with_http_info(api_version, client_id, opts)
      data
    end

    # Get an OAuth client
    # Returns information about a single OAuth client.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account client-view \\   edc6790ea9db4d224c5c     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetClient200Response, Integer, Hash)>] GetClient200Response data, response status code and response headers
    def get_client_with_http_info(api_version, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_client ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_client"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.get_client"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClient200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the OAuth client's thumbnail
    # Returns the thumbnail for this OAuth Client.  This is a publicly-viewable endpoint, and can be accessed without authentication.
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_client_thumbnail(api_version, client_id, opts = {})
      data, _status_code, _headers = get_client_thumbnail_with_http_info(api_version, client_id, opts)
      data
    end

    # Get the OAuth client&#39;s thumbnail
    # Returns the thumbnail for this OAuth Client.  This is a publicly-viewable endpoint, and can be accessed without authentication.
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_client_thumbnail_with_http_info(api_version, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_client_thumbnail ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_client_thumbnail"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.get_client_thumbnail"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}/thumbnail'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountApi.get_client_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_client_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OAuth clients
    # Returns a paginated list of OAuth Clients registered to your Account.  OAuth Clients allow users to log into applications you write or host using their Linode Account, and may allow them to grant some level of access to their Linodes or other entities to your application.   <<LB>>  ---   - __CLI__.      ```     linode-cli account clients-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetClients200Response]
    def get_clients(api_version, opts = {})
      data, _status_code, _headers = get_clients_with_http_info(api_version, opts)
      data
    end

    # List OAuth clients
    # Returns a paginated list of OAuth Clients registered to your Account.  OAuth Clients allow users to log into applications you write or host using their Linode Account, and may allow them to grant some level of access to their Linodes or other entities to your application.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account clients-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetClients200Response, Integer, Hash)>] GetClients200Response data, response status code and response headers
    def get_clients_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_clients ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_clients"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_clients, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_clients, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_clients, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClients200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_clients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an enrolled Beta program
    # Display an enrolled Beta Program for your Account. The Beta Program may be inactive.  Only unrestricted Users can access this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli betas enrolled-view $betaId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param beta_id [String] The ID of the Beta Program.
    # @param [Hash] opts the optional parameters
    # @return [GetEnrolledBetaProgram200Response]
    def get_enrolled_beta_program(api_version, beta_id, opts = {})
      data, _status_code, _headers = get_enrolled_beta_program_with_http_info(api_version, beta_id, opts)
      data
    end

    # Get an enrolled Beta program
    # Display an enrolled Beta Program for your Account. The Beta Program may be inactive.  Only unrestricted Users can access this operation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli betas enrolled-view $betaId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param beta_id [String] The ID of the Beta Program.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrolledBetaProgram200Response, Integer, Hash)>] GetEnrolledBetaProgram200Response data, response status code and response headers
    def get_enrolled_beta_program_with_http_info(api_version, beta_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_enrolled_beta_program ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_enrolled_beta_program"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'beta_id' is set
      if @api_client.config.client_side_validation && beta_id.nil?
        fail ArgumentError, "Missing the required parameter 'beta_id' when calling AccountApi.get_enrolled_beta_program"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/betas/{betaId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'betaId' + '}', CGI.escape(beta_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrolledBetaProgram200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_enrolled_beta_program",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_enrolled_beta_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List enrolled Beta programs
    # Display all enrolled Beta Programs for your Account. Includes inactive as well as active Beta Programs.  Only unrestricted Users can access this operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli betas enrolled     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetEnrolledBetaPrograms200Response]
    def get_enrolled_beta_programs(api_version, opts = {})
      data, _status_code, _headers = get_enrolled_beta_programs_with_http_info(api_version, opts)
      data
    end

    # List enrolled Beta programs
    # Display all enrolled Beta Programs for your Account. Includes inactive as well as active Beta Programs.  Only unrestricted Users can access this operation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli betas enrolled     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetEnrolledBetaPrograms200Response, Integer, Hash)>] GetEnrolledBetaPrograms200Response data, response status code and response headers
    def get_enrolled_beta_programs_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_enrolled_beta_programs ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_enrolled_beta_programs"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_enrolled_beta_programs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_enrolled_beta_programs, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_enrolled_beta_programs, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/betas'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrolledBetaPrograms200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_enrolled_beta_programs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_enrolled_beta_programs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an entity transfer
    # __Deprecated__ Please run [Get a service transfer request](https://techdocs.akamai.com/linode-api/reference/get-service-transfer).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [GetEntityTransfer200Response]
    def get_entity_transfer(api_version, token, opts = {})
      data, _status_code, _headers = get_entity_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Get an entity transfer
    # __Deprecated__ Please run [Get a service transfer request](https://techdocs.akamai.com/linode-api/reference/get-service-transfer).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEntityTransfer200Response, Integer, Hash)>] GetEntityTransfer200Response data, response status code and response headers
    def get_entity_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_entity_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_entity_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.get_entity_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/entity-transfers/{token}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEntityTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_entity_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_entity_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List entity transfers
    # __Deprecated__ Please run [List service transfers](https://techdocs.akamai.com/linode-api/reference/get-service-transfers).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetEntityTransfers200Response]
    def get_entity_transfers(api_version, opts = {})
      data, _status_code, _headers = get_entity_transfers_with_http_info(api_version, opts)
      data
    end

    # List entity transfers
    # __Deprecated__ Please run [List service transfers](https://techdocs.akamai.com/linode-api/reference/get-service-transfers).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetEntityTransfers200Response, Integer, Hash)>] GetEntityTransfers200Response data, response status code and response headers
    def get_entity_transfers_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_entity_transfers ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_entity_transfers"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_entity_transfers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_entity_transfers, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_entity_transfers, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/entity-transfers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEntityTransfers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_entity_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_entity_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an event
    # Returns a single Event object.   <<LB>>  ---   - __CLI__.      ```     linode-cli events view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     events:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event.
    # @param [Hash] opts the optional parameters
    # @return [GetEvent200Response]
    def get_event(api_version, event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(api_version, event_id, opts)
      data
    end

    # Get an event
    # Returns a single Event object.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli events view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     events:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEvent200Response, Integer, Hash)>] GetEvent200Response data, response status code and response headers
    def get_event_with_http_info(api_version, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_event ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_event"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling AccountApi.get_event"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/events/{eventId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEvent200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events
    # Returns a collection of Event objects representing actions taken on your Account from the last 90 days. The Events returned depend on your grants.   <<LB>>  ---   - __CLI__.      ```     linode-cli events list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     events:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetEvents200Response]
    def get_events(api_version, opts = {})
      data, _status_code, _headers = get_events_with_http_info(api_version, opts)
      data
    end

    # List events
    # Returns a collection of Event objects representing actions taken on your Account from the last 90 days. The Events returned depend on your grants.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli events list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     events:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetEvents200Response, Integer, Hash)>] GetEvents200Response data, response status code and response headers
    def get_events_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_events ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_events"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_events, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/events'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEvents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an invoice
    # Returns a single Invoice object.   <<LB>>  ---   - __CLI__.      ```     linode-cli account invoice-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param invoice_id [Integer] The ID of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [GetInvoice200Response]
    def get_invoice(api_version, invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_with_http_info(api_version, invoice_id, opts)
      data
    end

    # Get an invoice
    # Returns a single Invoice object.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account invoice-view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param invoice_id [Integer] The ID of the Invoice.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetInvoice200Response, Integer, Hash)>] GetInvoice200Response data, response status code and response headers
    def get_invoice_with_http_info(api_version, invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_invoice ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_invoice"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling AccountApi.get_invoice"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/invoices/{invoiceId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'invoiceId' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvoice200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoice items
    # Returns a paginated list of Invoice items.   <<LB>>  ---   - __CLI__.      ```     linode-cli account invoice-items 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param invoice_id [Integer] The ID of the Invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetInvoiceItems200Response]
    def get_invoice_items(api_version, invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_items_with_http_info(api_version, invoice_id, opts)
      data
    end

    # List invoice items
    # Returns a paginated list of Invoice items.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account invoice-items 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param invoice_id [Integer] The ID of the Invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetInvoiceItems200Response, Integer, Hash)>] GetInvoiceItems200Response data, response status code and response headers
    def get_invoice_items_with_http_info(api_version, invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_invoice_items ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_invoice_items"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling AccountApi.get_invoice_items"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_invoice_items, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_invoice_items, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_invoice_items, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/invoices/{invoiceId}/items'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'invoiceId' + '}', CGI.escape(invoice_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvoiceItems200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_invoice_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_invoice_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoices
    # Returns a paginated list of Invoices against your Account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account invoices-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetInvoices200Response]
    def get_invoices(api_version, opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(api_version, opts)
      data
    end

    # List invoices
    # Returns a paginated list of Invoices against your Account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account invoices-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetInvoices200Response, Integer, Hash)>] GetInvoices200Response data, response status code and response headers
    def get_invoices_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_invoices ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_invoices"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_invoices, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_invoices, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_invoices, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/invoices'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvoices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_invoices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List maintenances
    # Returns a collection of Maintenance objects for any entity a user has permissions to view. Canceled Maintenance objects are not returned.  Currently, Linodes are the only entities available for viewing.   <<LB>>  ---   - __CLI__.      ```     linode-cli account maintenance-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetMaintenance200Response]
    def get_maintenance(api_version, opts = {})
      data, _status_code, _headers = get_maintenance_with_http_info(api_version, opts)
      data
    end

    # List maintenances
    # Returns a collection of Maintenance objects for any entity a user has permissions to view. Canceled Maintenance objects are not returned.  Currently, Linodes are the only entities available for viewing.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account maintenance-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMaintenance200Response, Integer, Hash)>] GetMaintenance200Response data, response status code and response headers
    def get_maintenance_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_maintenance ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_maintenance"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/maintenance'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMaintenance200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_maintenance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List notifications
    # Returns a collection of Notification objects representing important, often time-sensitive items related to your Account. You cannot interact directly with Notifications, and a Notification will disappear when the circumstances causing it have been resolved. For example, if you have an important Ticket open, you must respond to the Ticket to dismiss the Notification.   <<LB>>  ---   - __CLI__.      ```     linode-cli account notifications-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetNotifications200Response]
    def get_notifications(api_version, opts = {})
      data, _status_code, _headers = get_notifications_with_http_info(api_version, opts)
      data
    end

    # List notifications
    # Returns a collection of Notification objects representing important, often time-sensitive items related to your Account. You cannot interact directly with Notifications, and a Notification will disappear when the circumstances causing it have been resolved. For example, if you have an important Ticket open, you must respond to the Ticket to dismiss the Notification.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account notifications-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNotifications200Response, Integer, Hash)>] GetNotifications200Response data, response status code and response headers
    def get_notifications_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_notifications ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_notifications"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/notifications'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNotifications200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_notifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a payment
    # Returns information about a specific Payment.   <<LB>>  ---   - __CLI__.      ```     linode-cli account payment-view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_id [Integer] The ID of the Payment to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetPayments200ResponseDataInner]
    def get_payment(api_version, payment_id, opts = {})
      data, _status_code, _headers = get_payment_with_http_info(api_version, payment_id, opts)
      data
    end

    # Get a payment
    # Returns information about a specific Payment.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account payment-view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_id [Integer] The ID of the Payment to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPayments200ResponseDataInner, Integer, Hash)>] GetPayments200ResponseDataInner data, response status code and response headers
    def get_payment_with_http_info(api_version, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_payment ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_payment"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling AccountApi.get_payment"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payments/{paymentId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPayments200ResponseDataInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a payment method
    # View the details of the specified Payment Method.   <<LB>>  ---   - __CLI__.      ```     linode-cli payment-methods view 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetPaymentMethod200Response]
    def get_payment_method(api_version, payment_method_id, opts = {})
      data, _status_code, _headers = get_payment_method_with_http_info(api_version, payment_method_id, opts)
      data
    end

    # Get a payment method
    # View the details of the specified Payment Method.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli payment-methods view 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPaymentMethod200Response, Integer, Hash)>] GetPaymentMethod200Response data, response status code and response headers
    def get_payment_method_with_http_info(api_version, payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_payment_method ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_payment_method"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling AccountApi.get_payment_method"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payment-methods/{paymentMethodId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'paymentMethodId' + '}', CGI.escape(payment_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPaymentMethod200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List payment methods
    # Returns a paginated list of Payment Methods for this Account.   <<LB>>  ---   - __CLI__.      ```     linode-cli payment-methods list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetPaymentMethods200Response]
    def get_payment_methods(api_version, opts = {})
      data, _status_code, _headers = get_payment_methods_with_http_info(api_version, opts)
      data
    end

    # List payment methods
    # Returns a paginated list of Payment Methods for this Account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli payment-methods list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetPaymentMethods200Response, Integer, Hash)>] GetPaymentMethods200Response data, response status code and response headers
    def get_payment_methods_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_payment_methods ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_payment_methods"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_payment_methods, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_payment_methods, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_payment_methods, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/payment-methods'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPaymentMethods200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List payments
    # Returns a paginated list of Payments made on this Account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account payments-list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetPayments200Response]
    def get_payments(api_version, opts = {})
      data, _status_code, _headers = get_payments_with_http_info(api_version, opts)
      data
    end

    # List payments
    # Returns a paginated list of Payments made on this Account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account payments-list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetPayments200Response, Integer, Hash)>] GetPayments200Response data, response status code and response headers
    def get_payments_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_payments ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_payments"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_payments, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_payments, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_payments, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/payments'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPayments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a service transfer request
    # Returns the details of the Service Transfer for the provided token.  While a transfer is pending, any unrestricted user _of any account_ can access this operation. After a transfer has been accepted, it can only be viewed by unrestricted users of the accounts that created and accepted the transfer. If canceled or expired, only unrestricted users of the account that created the transfer can view it.   <<LB>>  ---   - __CLI__.      ```     linode-cli service-transfers \\   view 123E4567-E89B-12D3-A456-426614174000     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [GetServiceTransfer200Response]
    def get_service_transfer(api_version, token, opts = {})
      data, _status_code, _headers = get_service_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Get a service transfer request
    # Returns the details of the Service Transfer for the provided token.  While a transfer is pending, any unrestricted user _of any account_ can access this operation. After a transfer has been accepted, it can only be viewed by unrestricted users of the accounts that created and accepted the transfer. If canceled or expired, only unrestricted users of the account that created the transfer can view it.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli service-transfers \\   view 123E4567-E89B-12D3-A456-426614174000     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServiceTransfer200Response, Integer, Hash)>] GetServiceTransfer200Response data, response status code and response headers
    def get_service_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_service_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_service_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.get_service_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/service-transfers/{token}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServiceTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_service_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_service_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List service transfers
    # Returns a collection of all created and accepted Service Transfers for this account, regardless of the user that created or accepted the transfer.  This operation can only be accessed by the unrestricted users of an account.   <<LB>>  ---   - __CLI__.      ```     linode-cli service-transfers \\   list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetServiceTransfers200Response]
    def get_service_transfers(api_version, opts = {})
      data, _status_code, _headers = get_service_transfers_with_http_info(api_version, opts)
      data
    end

    # List service transfers
    # Returns a collection of all created and accepted Service Transfers for this account, regardless of the user that created or accepted the transfer.  This operation can only be accessed by the unrestricted users of an account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli service-transfers \\   list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetServiceTransfers200Response, Integer, Hash)>] GetServiceTransfers200Response data, response status code and response headers
    def get_service_transfers_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_service_transfers ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_service_transfers"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_service_transfers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_service_transfers, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_service_transfers, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/service-transfers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServiceTransfers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_service_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_service_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get network usage
    # Returns a Transfer object showing your network utilization, in GB, for the current month.   <<LB>>  ---   - __CLI__.      ```     linode-cli account transfer     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [GetTransfer200Response]
    def get_transfer(api_version, opts = {})
      data, _status_code, _headers = get_transfer_with_http_info(api_version, opts)
      data
    end

    # Get network usage
    # Returns a Transfer object showing your network utilization, in GB, for the current month.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account transfer     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransfer200Response, Integer, Hash)>] GetTransfer200Response data, response status code and response headers
    def get_transfer_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/transfer'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user
    # Returns information about a single user on your account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.   <<LB>>  ---   - __CLI__.      ```     linode-cli users view example_user     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetUser200Response]
    def get_user(api_version, username, opts = {})
      data, _status_code, _headers = get_user_with_http_info(api_version, username, opts)
      data
    end

    # Get a user
    # Returns information about a single user on your account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli users view example_user     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUser200Response, Integer, Hash)>] GetUser200Response data, response status code and response headers
    def get_user_with_http_info(api_version, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_user ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_user"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AccountApi.get_user"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users/{username}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a user's grants
    # Returns the full grants structure for an account username you specify. This includes all entities on the account, and the level of access this user has to each of them.  This doesn't apply to the account owner or the current authenticated user. You can run the [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants) operation to view those grants. However, this doesn't show the entities that they _don't_ have access to.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [GetUserGrants200Response]
    def get_user_grants(api_version, username, opts = {})
      data, _status_code, _headers = get_user_grants_with_http_info(api_version, username, opts)
      data
    end

    # List a user&#39;s grants
    # Returns the full grants structure for an account username you specify. This includes all entities on the account, and the level of access this user has to each of them.  This doesn&#39;t apply to the account owner or the current authenticated user. You can run the [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants) operation to view those grants. However, this doesn&#39;t show the entities that they _don&#39;t_ have access to.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserGrants200Response, Integer, Hash)>] GetUserGrants200Response data, response status code and response headers
    def get_user_grants_with_http_info(api_version, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_user_grants ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_user_grants"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AccountApi.get_user_grants"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users/{username}/grants'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserGrants200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_user_grants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_user_grants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users
    # Returns a paginated list of all users on your account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  A user can access all or part of an account based on their access status and grants:  - __Unrestricted access__. These users can access everything on an account.  - __Restricted access__. These users can only access entities or perform actions they've been given specific grants to.   <<LB>>  ---   - __CLI__.      ```     linode-cli users list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetUsers200Response]
    def get_users(api_version, opts = {})
      data, _status_code, _headers = get_users_with_http_info(api_version, opts)
      data
    end

    # List users
    # Returns a paginated list of all users on your account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  A user can access all or part of an account based on their access status and grants:  - __Unrestricted access__. These users can access everything on an account.  - __Restricted access__. These users can only access entities or perform actions they&#39;ve been given specific grants to.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli users list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetUsers200Response, Integer, Hash)>] GetUsers200Response data, response status code and response headers
    def get_users_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_users ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.get_users"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccountApi.get_users, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_users, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountApi.get_users, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/account/users'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUsers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept an entity transfer
    # __Deprecated__ Please run [Accept a service transfer](https://techdocs.akamai.com/linode-api/reference/post-accept-service-transfer).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_accept_entity_transfer(api_version, token, opts = {})
      data, _status_code, _headers = post_accept_entity_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Accept an entity transfer
    # __Deprecated__ Please run [Accept a service transfer](https://techdocs.akamai.com/linode-api/reference/post-accept-service-transfer).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Entity Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_accept_entity_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_accept_entity_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_accept_entity_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.post_accept_entity_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/entity-transfers/{token}/accept'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_accept_entity_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_accept_entity_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept a service transfer
    # Accept a Service Transfer for the provided token to receive the services included in the transfer to your account. At this time, only Linodes can be transferred.  When accepted, email confirmations are sent to the accounts that created and accepted the transfer. A transfer can take up to three hours to complete once accepted. Once a transfer is completed, billing for transferred services ends for the sending account and begins for the receiving account.  This operation can only be accessed by the unrestricted users of the account that receives the transfer. Users of the same account that created a transfer cannot accept the transfer.  There are several conditions that must be met in order to accept a transfer request:  1. Only transfers with a `pending` status can be accepted.  1. The account accepting the transfer must have a registered payment method and must not have a past due balance or other account limitations for the services to be transferred.  1. Both the account that created the transfer and the account that is accepting the transfer must not have any active Terms of Service violations.  1. The service must still be owned by the account that created the transfer.  1. Linodes must not:      - be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.      - have any attached Block Storage Volumes.      - have any shared IP addresses.      - have any assigned /56, /64, or /116 IPv6 ranges.  Any and all of the above conditions must be cured and maintained by the relevant account prior to the transfer's expiration to allow the transfer to be accepted by the receiving account.   <<LB>>  ---   - __CLI__.      ```     linode-cli service-transfers \\   accept 123E4567-E89B-12D3-A456-426614174000     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_accept_service_transfer(api_version, token, opts = {})
      data, _status_code, _headers = post_accept_service_transfer_with_http_info(api_version, token, opts)
      data
    end

    # Accept a service transfer
    # Accept a Service Transfer for the provided token to receive the services included in the transfer to your account. At this time, only Linodes can be transferred.  When accepted, email confirmations are sent to the accounts that created and accepted the transfer. A transfer can take up to three hours to complete once accepted. Once a transfer is completed, billing for transferred services ends for the sending account and begins for the receiving account.  This operation can only be accessed by the unrestricted users of the account that receives the transfer. Users of the same account that created a transfer cannot accept the transfer.  There are several conditions that must be met in order to accept a transfer request:  1. Only transfers with a &#x60;pending&#x60; status can be accepted.  1. The account accepting the transfer must have a registered payment method and must not have a past due balance or other account limitations for the services to be transferred.  1. Both the account that created the transfer and the account that is accepting the transfer must not have any active Terms of Service violations.  1. The service must still be owned by the account that created the transfer.  1. Linodes must not:      - be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.      - have any attached Block Storage Volumes.      - have any shared IP addresses.      - have any assigned /56, /64, or /116 IPv6 ranges.  Any and all of the above conditions must be cured and maintained by the relevant account prior to the transfer&#39;s expiration to allow the transfer to be accepted by the receiving account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli service-transfers \\   accept 123E4567-E89B-12D3-A456-426614174000     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param token [String] The UUID of the Service Transfer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_accept_service_transfer_with_http_info(api_version, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_accept_service_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_accept_service_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccountApi.post_accept_service_transfer"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/service-transfers/{token}/accept'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_accept_service_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_accept_service_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Acknowledge agreements
    # Accept required agreements by setting them to `true`. This remains until the content of the agreement changes. If it does, you need to run this operation again to accept it. If you set this to `false`, the API rejects the request and you need to open a [support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to reset the agreement. Omitted agreements are left unchanged.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_account_agreements_request [PostAccountAgreementsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_account_agreements(api_version, post_account_agreements_request, opts = {})
      data, _status_code, _headers = post_account_agreements_with_http_info(api_version, post_account_agreements_request, opts)
      data
    end

    # Acknowledge agreements
    # Accept required agreements by setting them to &#x60;true&#x60;. This remains until the content of the agreement changes. If it does, you need to run this operation again to accept it. If you set this to &#x60;false&#x60;, the API rejects the request and you need to open a [support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) to reset the agreement. Omitted agreements are left unchanged.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_account_agreements_request [PostAccountAgreementsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_account_agreements_with_http_info(api_version, post_account_agreements_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_account_agreements ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_account_agreements"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_account_agreements_request' is set
      if @api_client.config.client_side_validation && post_account_agreements_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_account_agreements_request' when calling AccountApi.post_account_agreements"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/agreements'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_account_agreements_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_account_agreements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_account_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enroll in a Beta program
    # Enroll your Account in an active Beta Program.  Only unrestricted Users can access this operation.  To view active Beta Programs, run the [List beta programs](https://techdocs.akamai.com/linode-api/reference/get-beta-programs) operation.  Active Beta Programs may have a limited number of enrollments. If a Beta Program has reached is maximum number of enrollments, an error is returned even though the request is successful.  Beta Programs with `\"greenlight_only\": true` can only be enrolled by Accounts that participate in the [Greenlight](https://www.linode.com/green-light/) program.   <<LB>>  ---   - __CLI__.      ```     linode-cli betas enroll --id example_open     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_beta_program_request [PostBetaProgramRequest] Updated information for the Managed MySQL Database.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_beta_program(api_version, post_beta_program_request, opts = {})
      data, _status_code, _headers = post_beta_program_with_http_info(api_version, post_beta_program_request, opts)
      data
    end

    # Enroll in a Beta program
    # Enroll your Account in an active Beta Program.  Only unrestricted Users can access this operation.  To view active Beta Programs, run the [List beta programs](https://techdocs.akamai.com/linode-api/reference/get-beta-programs) operation.  Active Beta Programs may have a limited number of enrollments. If a Beta Program has reached is maximum number of enrollments, an error is returned even though the request is successful.  Beta Programs with &#x60;\&quot;greenlight_only\&quot;: true&#x60; can only be enrolled by Accounts that participate in the [Greenlight](https://www.linode.com/green-light/) program.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli betas enroll --id example_open     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_beta_program_request [PostBetaProgramRequest] Updated information for the Managed MySQL Database.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_beta_program_with_http_info(api_version, post_beta_program_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_beta_program ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_beta_program"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_beta_program_request' is set
      if @api_client.config.client_side_validation && post_beta_program_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_beta_program_request' when calling AccountApi.post_beta_program"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/betas'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_beta_program_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_beta_program",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_beta_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel your account
    # Cancels an active Linode account. Akamai attempts to charge the credit card on file for any remaining balance. An error occurs if this charge fails.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__ In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - A child account user can't cancel a child account. - You can't cancel a parent account if it has an active child account. - You need to work with your Akamai account team to dissolve any parent-child account relationships before you can fully cancel a child or parent account.   <<LB>>  ---   - __CLI__.      ```     linode-cli account cancel \\   --comments \"I'm consolidating my accounts\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_cancel_account_request [PostCancelAccountRequest] Supply a comment stating the reason that you are cancelling your account.
    # @param [Hash] opts the optional parameters
    # @return [PostCancelAccount200Response]
    def post_cancel_account(api_version, post_cancel_account_request, opts = {})
      data, _status_code, _headers = post_cancel_account_with_http_info(api_version, post_cancel_account_request, opts)
      data
    end

    # Cancel your account
    # Cancels an active Linode account. Akamai attempts to charge the credit card on file for any remaining balance. An error occurs if this charge fails.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__ In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - A child account user can&#39;t cancel a child account. - You can&#39;t cancel a parent account if it has an active child account. - You need to work with your Akamai account team to dissolve any parent-child account relationships before you can fully cancel a child or parent account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account cancel \\   --comments \&quot;I&#39;m consolidating my accounts\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_cancel_account_request [PostCancelAccountRequest] Supply a comment stating the reason that you are cancelling your account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostCancelAccount200Response, Integer, Hash)>] PostCancelAccount200Response data, response status code and response headers
    def post_cancel_account_with_http_info(api_version, post_cancel_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_cancel_account ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_cancel_account"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_cancel_account_request' is set
      if @api_client.config.client_side_validation && post_cancel_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_cancel_account_request' when calling AccountApi.post_cancel_account"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/cancel'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_cancel_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostCancelAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_cancel_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_cancel_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a proxy user token
    # Create a short-lived bearer token for a parent user on a child account, using the `euuid` of that child account. In the context of the API, a parent user on a child account is referred to as a \"proxy user.\" When Akamai provisions your parent-child account environment, a proxy user is automatically set in the child account. It follows a specific naming convention:      <Parent account `company` name>_<SHA256 hash of parent `company` name and child account `euuid`>  __Note__. The variables above use only the first 15 and 16 characters of these values, respectively.  The token lets a parent account run API operations through the proxy user, as if they are a child user in the child account.  These points apply to the use of this operation:  - To create a token, a parent account user needs the `child_account_access` grant. This lets them use the proxy user on the child account. You can run [List a user's grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants) on a parent account user to check its `child_account_access` setting. To add this access, you can [update](https://techdocs.akamai.com/linode-api/reference/put-user-grants) the parent account user.  - The created token inherits the permissions of the proxy user. It will never have less.  - The API returns the raw token in the response. You can't get it again, so be sure to store it.  Example workflow:  1. [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) and store the `euuid` for the applicable one. 2. Run this operation and store the `token` that's created for the proxy user. 3. As a parent account user with access to the proxy user in the child account, use this `token` to authenticate API operations, as if you were a child user.   <<LB>>  ---   - __CLI__.      ```     linode-cli child-account create A1BC2DEF-34GH-567I-J890KLMN12O34P56     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     child_account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param euuid [String] The child account to look up. You can run the [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) operation to find the applicable account and store its &#x60;euuid&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [PostChildAccountToken200Response]
    def post_child_account_token(api_version, euuid, opts = {})
      data, _status_code, _headers = post_child_account_token_with_http_info(api_version, euuid, opts)
      data
    end

    # Create a proxy user token
    # Create a short-lived bearer token for a parent user on a child account, using the &#x60;euuid&#x60; of that child account. In the context of the API, a parent user on a child account is referred to as a \&quot;proxy user.\&quot; When Akamai provisions your parent-child account environment, a proxy user is automatically set in the child account. It follows a specific naming convention:      &lt;Parent account &#x60;company&#x60; name&gt;_&lt;SHA256 hash of parent &#x60;company&#x60; name and child account &#x60;euuid&#x60;&gt;  __Note__. The variables above use only the first 15 and 16 characters of these values, respectively.  The token lets a parent account run API operations through the proxy user, as if they are a child user in the child account.  These points apply to the use of this operation:  - To create a token, a parent account user needs the &#x60;child_account_access&#x60; grant. This lets them use the proxy user on the child account. You can run [List a user&#39;s grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants) on a parent account user to check its &#x60;child_account_access&#x60; setting. To add this access, you can [update](https://techdocs.akamai.com/linode-api/reference/put-user-grants) the parent account user.  - The created token inherits the permissions of the proxy user. It will never have less.  - The API returns the raw token in the response. You can&#39;t get it again, so be sure to store it.  Example workflow:  1. [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) and store the &#x60;euuid&#x60; for the applicable one. 2. Run this operation and store the &#x60;token&#x60; that&#39;s created for the proxy user. 3. As a parent account user with access to the proxy user in the child account, use this &#x60;token&#x60; to authenticate API operations, as if you were a child user.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli child-account create A1BC2DEF-34GH-567I-J890KLMN12O34P56     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     child_account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param euuid [String] The child account to look up. You can run the [List child accounts](https://techdocs.akamai.com/linode-api/reference/get-child-accounts) operation to find the applicable account and store its &#x60;euuid&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostChildAccountToken200Response, Integer, Hash)>] PostChildAccountToken200Response data, response status code and response headers
    def post_child_account_token_with_http_info(api_version, euuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_child_account_token ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_child_account_token"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'euuid' is set
      if @api_client.config.client_side_validation && euuid.nil?
        fail ArgumentError, "Missing the required parameter 'euuid' when calling AccountApi.post_child_account_token"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/child-accounts/{euuid}/token'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'euuid' + '}', CGI.escape(euuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostChildAccountToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_child_account_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_child_account_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an OAuth client
    # Creates an OAuth Client, which can be used to allow users (using their Linode account) to log in to your own application, and optionally grant your application some amount of access to their Linodes or other entities.   <<LB>>  ---   - __CLI__.      ```     linode-cli account client-create \\   --label Test_Client_1 \\   --redirect_uri https://example.org/callback     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostClientRequest] :post_client_request Information about the OAuth Client to create.
    # @return [PostClient200Response]
    def post_client(api_version, opts = {})
      data, _status_code, _headers = post_client_with_http_info(api_version, opts)
      data
    end

    # Create an OAuth client
    # Creates an OAuth Client, which can be used to allow users (using their Linode account) to log in to your own application, and optionally grant your application some amount of access to their Linodes or other entities.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account client-create \\   --label Test_Client_1 \\   --redirect_uri https://example.org/callback     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostClientRequest] :post_client_request Information about the OAuth Client to create.
    # @return [Array<(PostClient200Response, Integer, Hash)>] PostClient200Response data, response status code and response headers
    def post_client_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_client ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_client"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_client_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostClient200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or edit a credit card
    # __Deprecated__ Please run [Add a payment method](https://techdocs.akamai.com/linode-api/reference/post-payment-method).  Adds a credit card Payment Method to your account and sets it as the default method.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_credit_card_request [PostCreditCardRequest] Update the credit card information associated with your Account.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_credit_card(api_version, post_credit_card_request, opts = {})
      data, _status_code, _headers = post_credit_card_with_http_info(api_version, post_credit_card_request, opts)
      data
    end

    # Add or edit a credit card
    # __Deprecated__ Please run [Add a payment method](https://techdocs.akamai.com/linode-api/reference/post-payment-method).  Adds a credit card Payment Method to your account and sets it as the default method.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_credit_card_request [PostCreditCardRequest] Update the credit card information associated with your Account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_credit_card_with_http_info(api_version, post_credit_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_credit_card ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_credit_card"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_credit_card_request' is set
      if @api_client.config.client_side_validation && post_credit_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_credit_card_request' when calling AccountApi.post_credit_card"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/credit-card'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_credit_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_credit_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_credit_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Linode Managed
    # Enables Linode Managed for the entire account and sends a welcome email to the account's associated email address. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. See our [Linode Managed guide](https://www.linode.com/docs/guides/linode-managed/) to learn more.   <<LB>>  ---   - __CLI__.      ```     linode-cli account enable-managed     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_enable_account_managed(api_version, opts = {})
      data, _status_code, _headers = post_enable_account_managed_with_http_info(api_version, opts)
      data
    end

    # Enable Linode Managed
    # Enables Linode Managed for the entire account and sends a welcome email to the account&#39;s associated email address. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. See our [Linode Managed guide](https://www.linode.com/docs/guides/linode-managed/) to learn more.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account enable-managed     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_enable_account_managed_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_enable_account_managed ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_enable_account_managed"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/settings/managed-enable'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_enable_account_managed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_enable_account_managed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an entity transfer
    # __Deprecated__ Please run [Request a service transfer](https://techdocs.akamai.com/linode-api/reference/post-service-transfer).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostEntityTransferRequest] :post_entity_transfer_request The entities to include in this transfer request.
    # @return [PostEntityTransfer200Response]
    def post_entity_transfer(api_version, opts = {})
      data, _status_code, _headers = post_entity_transfer_with_http_info(api_version, opts)
      data
    end

    # Create an entity transfer
    # __Deprecated__ Please run [Request a service transfer](https://techdocs.akamai.com/linode-api/reference/post-service-transfer).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostEntityTransferRequest] :post_entity_transfer_request The entities to include in this transfer request.
    # @return [Array<(PostEntityTransfer200Response, Integer, Hash)>] PostEntityTransfer200Response data, response status code and response headers
    def post_entity_transfer_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_entity_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_entity_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/entity-transfers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_entity_transfer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostEntityTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_entity_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_entity_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark an event as read
    # Marks a single Event as read.   <<LB>>  ---   - __CLI__.      ```     linode-cli events mark-read 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     events:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event to designate as read.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_event_read(api_version, event_id, opts = {})
      data, _status_code, _headers = post_event_read_with_http_info(api_version, event_id, opts)
      data
    end

    # Mark an event as read
    # Marks a single Event as read.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli events mark-read 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     events:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event to designate as read.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_event_read_with_http_info(api_version, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_event_read ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_event_read"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling AccountApi.post_event_read"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/events/{eventId}/read'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_event_read",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_event_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark an event as seen
    # Marks all Events up to and including this Event by ID as seen.   <<LB>>  ---   - __CLI__.      ```     linode-cli events mark-seen 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     events:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event to designate as seen.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_event_seen(api_version, event_id, opts = {})
      data, _status_code, _headers = post_event_seen_with_http_info(api_version, event_id, opts)
      data
    end

    # Mark an event as seen
    # Marks all Events up to and including this Event by ID as seen.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli events mark-seen 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     events:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param event_id [Integer] The ID of the Event to designate as seen.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_event_seen_with_http_info(api_version, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_event_seen ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_event_seen"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling AccountApi.post_event_seen"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/events/{eventId}/seen'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_event_seen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_event_seen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a PayPal payment
    # __Deprecated__ This operation is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](https://www.linode.com/docs/products/platform/billing/guides/payment-methods/).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_execute_pay_pal_payment_request [PostExecutePayPalPaymentRequest] The details of the Payment to execute.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_execute_pay_pal_payment(api_version, post_execute_pay_pal_payment_request, opts = {})
      data, _status_code, _headers = post_execute_pay_pal_payment_with_http_info(api_version, post_execute_pay_pal_payment_request, opts)
      data
    end

    # Execute a PayPal payment
    # __Deprecated__ This operation is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](https://www.linode.com/docs/products/platform/billing/guides/payment-methods/).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_execute_pay_pal_payment_request [PostExecutePayPalPaymentRequest] The details of the Payment to execute.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_execute_pay_pal_payment_with_http_info(api_version, post_execute_pay_pal_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_execute_pay_pal_payment ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_execute_pay_pal_payment"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_execute_pay_pal_payment_request' is set
      if @api_client.config.client_side_validation && post_execute_pay_pal_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_execute_pay_pal_payment_request' when calling AccountApi.post_execute_pay_pal_payment"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payments/paypal/execute'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_execute_pay_pal_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_execute_pay_pal_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_execute_pay_pal_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a default payment method
    # Make the specified Payment Method the default method for automatically processing payments. Removes the default status from any other Payment Method.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can't run this operation. These users don't have access to billing-related operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli payment-methods default 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to make default.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_make_payment_method_default(api_version, payment_method_id, opts = {})
      data, _status_code, _headers = post_make_payment_method_default_with_http_info(api_version, payment_method_id, opts)
      data
    end

    # Set a default payment method
    # Make the specified Payment Method the default method for automatically processing payments. Removes the default status from any other Payment Method.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can&#39;t run this operation. These users don&#39;t have access to billing-related operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli payment-methods default 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param payment_method_id [Integer] The ID of the Payment Method to make default.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_make_payment_method_default_with_http_info(api_version, payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_make_payment_method_default ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_make_payment_method_default"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling AccountApi.post_make_payment_method_default"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payment-methods/{paymentMethodId}/make-default'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'paymentMethodId' + '}', CGI.escape(payment_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_make_payment_method_default",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_make_payment_method_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stage a PayPal payment
    # __Deprecated__ This operation is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](https://www.linode.com/docs/products/platform/billing/guides/payment-methods/).   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_pay_pal_payment_request [PostPayPalPaymentRequest] The amount of the Payment to submit via PayPal.
    # @param [Hash] opts the optional parameters
    # @return [PostPayPalPayment200Response]
    def post_pay_pal_payment(api_version, post_pay_pal_payment_request, opts = {})
      data, _status_code, _headers = post_pay_pal_payment_with_http_info(api_version, post_pay_pal_payment_request, opts)
      data
    end

    # Stage a PayPal payment
    # __Deprecated__ This operation is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](https://www.linode.com/docs/products/platform/billing/guides/payment-methods/).   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_pay_pal_payment_request [PostPayPalPaymentRequest] The amount of the Payment to submit via PayPal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostPayPalPayment200Response, Integer, Hash)>] PostPayPalPayment200Response data, response status code and response headers
    def post_pay_pal_payment_with_http_info(api_version, post_pay_pal_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_pay_pal_payment ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_pay_pal_payment"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_pay_pal_payment_request' is set
      if @api_client.config.client_side_validation && post_pay_pal_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_pay_pal_payment_request' when calling AccountApi.post_pay_pal_payment"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payments/paypal'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_pay_pal_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostPayPalPayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_pay_pal_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_pay_pal_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a payment
    # Makes a Payment to your Account.  - The requested amount is charged to the default Payment Method if no `payment_method_id` is specified.  - A `payment_submitted` event is generated when a payment is successfully submitted.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can't run this operation. These users don't have access to billing-related operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli account payment-create \\   --usd 120.50 \\   --payment_method_id 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_payment_request [PostPaymentRequest] Information about the Payment you are making.
    # @param [Hash] opts the optional parameters
    # @return [PostPayment200Response]
    def post_payment(api_version, post_payment_request, opts = {})
      data, _status_code, _headers = post_payment_with_http_info(api_version, post_payment_request, opts)
      data
    end

    # Make a payment
    # Makes a Payment to your Account.  - The requested amount is charged to the default Payment Method if no &#x60;payment_method_id&#x60; is specified.  - A &#x60;payment_submitted&#x60; event is generated when a payment is successfully submitted.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can&#39;t run this operation. These users don&#39;t have access to billing-related operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account payment-create \\   --usd 120.50 \\   --payment_method_id 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_payment_request [PostPaymentRequest] Information about the Payment you are making.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostPayment200Response, Integer, Hash)>] PostPayment200Response data, response status code and response headers
    def post_payment_with_http_info(api_version, post_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_payment ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_payment"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_payment_request' is set
      if @api_client.config.client_side_validation && post_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_payment_request' when calling AccountApi.post_payment"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payments'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostPayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a payment method
    # Adds a Payment Method to your Account with the option to set it as the default method.  - Adding a default Payment Method removes the default status from any other Payment Method.  - An Account can have up to 6 active Payment Methods.  - Up to 60 Payment Methods can be added each day.  - Prior to adding a Payment Method, ensure that your billing address information is up-to-date with a valid `zip` by running the [Update your account](https://techdocs.akamai.com/linode-api/reference/put-account) operation.  - A `payment_method_add` event is generated when a payment is successfully submitted.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can't run this operation. These users don't have access to billing-related operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli payment-methods add \\   --type credit_card \\   --is_default true \\   --data.card_number 4111111111111111 \\   --data.expiry_month 11 \\   --data.expiry_year 2020 \\   --data.cvv 111     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_payment_method_request [PostPaymentMethodRequest] The details of the Payment Method to add.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def post_payment_method(api_version, post_payment_method_request, opts = {})
      data, _status_code, _headers = post_payment_method_with_http_info(api_version, post_payment_method_request, opts)
      data
    end

    # Add a payment method
    # Adds a Payment Method to your Account with the option to set it as the default method.  - Adding a default Payment Method removes the default status from any other Payment Method.  - An Account can have up to 6 active Payment Methods.  - Up to 60 Payment Methods can be added each day.  - Prior to adding a Payment Method, ensure that your billing address information is up-to-date with a valid &#x60;zip&#x60; by running the [Update your account](https://techdocs.akamai.com/linode-api/reference/put-account) operation.  - A &#x60;payment_method_add&#x60; event is generated when a payment is successfully submitted.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can&#39;t run this operation. These users don&#39;t have access to billing-related operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli payment-methods add \\   --type credit_card \\   --is_default true \\   --data.card_number 4111111111111111 \\   --data.expiry_month 11 \\   --data.expiry_year 2020 \\   --data.cvv 111     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_payment_method_request [PostPaymentMethodRequest] The details of the Payment Method to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_payment_method_with_http_info(api_version, post_payment_method_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_payment_method ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_payment_method"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_payment_method_request' is set
      if @api_client.config.client_side_validation && post_payment_method_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_payment_method_request' when calling AccountApi.post_payment_method"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/payment-methods'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_payment_method_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a promo credit
    # Adds an expiring Promo Credit to your account. The following restrictions apply:  - Your account needs to be less than 90 days old.  - You can't already have a Promo Credit on your account.  - The user making the request needs to be unrestricted. You can run the [Update a user](https://techdocs.akamai.com/linode-api/reference/put-user) operation to change a user's restricted status.  - The `promo_code` needs to be valid and unexpired.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can't run this operation. These users don't have access to billing-related operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli account \\   promo-add \\   --promo-code abcdefABCDEF1234567890     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostPromoCreditRequest] :post_promo_credit_request Enter a Promo Code to add its associated credit to your Account.
    # @return [PostPromoCredit200Response]
    def post_promo_credit(api_version, opts = {})
      data, _status_code, _headers = post_promo_credit_with_http_info(api_version, opts)
      data
    end

    # Add a promo credit
    # Adds an expiring Promo Credit to your account. The following restrictions apply:  - Your account needs to be less than 90 days old.  - You can&#39;t already have a Promo Credit on your account.  - The user making the request needs to be unrestricted. You can run the [Update a user](https://techdocs.akamai.com/linode-api/reference/put-user) operation to change a user&#39;s restricted status.  - The &#x60;promo_code&#x60; needs to be valid and unexpired.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - Child account users can&#39;t run this operation. These users don&#39;t have access to billing-related operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account \\   promo-add \\   --promo-code abcdefABCDEF1234567890     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostPromoCreditRequest] :post_promo_credit_request Enter a Promo Code to add its associated credit to your Account.
    # @return [Array<(PostPromoCredit200Response, Integer, Hash)>] PostPromoCredit200Response data, response status code and response headers
    def post_promo_credit_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_promo_credit ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_promo_credit"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/promo-codes'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_promo_credit_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostPromoCredit200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_promo_credit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_promo_credit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset an OAuth client secret
    # Resets the OAuth Client secret for a client you own, and returns the OAuth Client with the plaintext secret. This secret is not supposed to be publicly known or disclosed anywhere. This can be used to generate a new secret in case the one you have has been leaked, or to get a new secret if you lost the original. The old secret is expired immediately, and logins to your client with the old secret will fail.   <<LB>>  ---   - __CLI__.      ```     linode-cli account client-reset-secret \\   edc6790ea9db4d224c5c     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [PostResetClientSecret200Response]
    def post_reset_client_secret(api_version, client_id, opts = {})
      data, _status_code, _headers = post_reset_client_secret_with_http_info(api_version, client_id, opts)
      data
    end

    # Reset an OAuth client secret
    # Resets the OAuth Client secret for a client you own, and returns the OAuth Client with the plaintext secret. This secret is not supposed to be publicly known or disclosed anywhere. This can be used to generate a new secret in case the one you have has been leaked, or to get a new secret if you lost the original. The old secret is expired immediately, and logins to your client with the old secret will fail.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account client-reset-secret \\   edc6790ea9db4d224c5c     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostResetClientSecret200Response, Integer, Hash)>] PostResetClientSecret200Response data, response status code and response headers
    def post_reset_client_secret_with_http_info(api_version, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_reset_client_secret ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_reset_client_secret"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.post_reset_client_secret"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}/reset-secret'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostResetClientSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_reset_client_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_reset_client_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a service transfer
    # Creates a transfer request for the specified services. A request can contain any of the specified service types and any number of each service type. At this time, only Linodes can be transferred.  When created successfully, a confirmation email is sent to the account that created this transfer containing a transfer token and instructions on completing the transfer.  When a transfer is [accepted](https://techdocs.akamai.com/linode-api/reference/post-accept-service-transfer), the requested services are moved to the receiving account. Linode services will not experience interruptions due to the transfer process. Backups for Linodes are transferred as well.  DNS records that are associated with requested services will not be transferred or updated. Please ensure that associated DNS records have been updated or communicated to the recipient prior to the transfer.  A transfer can take up to three hours to complete once accepted. When a transfer is completed, billing for transferred services ends for the sending account and begins for the receiving account.  This operation can only be accessed by the unrestricted users of an account.  There are several conditions that you need to meet to successfully create a transfer request:  1. The account creating the transfer can't have a past due balance or active Terms of Service violation.  1. The service needs to be owned by the account that is creating the transfer.  1. The service can't be assigned to another Service Transfer that is pending or that's been accepted and is incomplete.  1. Linodes can't:      - be assigned to a NodeBalancer, Firewall, VLAN, VPC, or Managed Service.      - have any attached Block Storage Volumes.      - have any shared IP addresses.      - have any assigned /56, /64, or /116 IPv6 ranges.   <<LB>>  ---   - __CLI__.      ```     linode-cli service-transfers \\   create \\   --entities.linodes 111 \\   --entities.linodes 222     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostServiceTransferRequest] :post_service_transfer_request The services to include in this transfer request.
    # @return [PostServiceTransfer200Response]
    def post_service_transfer(api_version, opts = {})
      data, _status_code, _headers = post_service_transfer_with_http_info(api_version, opts)
      data
    end

    # Request a service transfer
    # Creates a transfer request for the specified services. A request can contain any of the specified service types and any number of each service type. At this time, only Linodes can be transferred.  When created successfully, a confirmation email is sent to the account that created this transfer containing a transfer token and instructions on completing the transfer.  When a transfer is [accepted](https://techdocs.akamai.com/linode-api/reference/post-accept-service-transfer), the requested services are moved to the receiving account. Linode services will not experience interruptions due to the transfer process. Backups for Linodes are transferred as well.  DNS records that are associated with requested services will not be transferred or updated. Please ensure that associated DNS records have been updated or communicated to the recipient prior to the transfer.  A transfer can take up to three hours to complete once accepted. When a transfer is completed, billing for transferred services ends for the sending account and begins for the receiving account.  This operation can only be accessed by the unrestricted users of an account.  There are several conditions that you need to meet to successfully create a transfer request:  1. The account creating the transfer can&#39;t have a past due balance or active Terms of Service violation.  1. The service needs to be owned by the account that is creating the transfer.  1. The service can&#39;t be assigned to another Service Transfer that is pending or that&#39;s been accepted and is incomplete.  1. Linodes can&#39;t:      - be assigned to a NodeBalancer, Firewall, VLAN, VPC, or Managed Service.      - have any attached Block Storage Volumes.      - have any shared IP addresses.      - have any assigned /56, /64, or /116 IPv6 ranges.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli service-transfers \\   create \\   --entities.linodes 111 \\   --entities.linodes 222     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostServiceTransferRequest] :post_service_transfer_request The services to include in this transfer request.
    # @return [Array<(PostServiceTransfer200Response, Integer, Hash)>] PostServiceTransfer200Response data, response status code and response headers
    def post_service_transfer_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_service_transfer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_service_transfer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/service-transfers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_service_transfer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostServiceTransfer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_service_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_service_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user
    # Creates a user on your account. You determine the new user's account access by setting it to restricted or unrestricted and by defining its grants. After completion, the API sends a confirmation message containing password creation and login instructions to the user's `email` address.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - A parent account user can create new parent account users.  - A child account can [update](https://techdocs.akamai.com/linode-api/reference/put-user) the child account parent user (proxy user) to `unrestricted`. This gives the proxy user access to create new child account users.  - A child account user can create new child account users.  - You can't create a proxy user. The proxy user in a child account is predefined when you initially provision the parent-child relationship.   <<LB>>  ---   - __CLI__.      ```     linode-cli users create \\   --username example_user \\   --email example_user@linode.com \\   --restricted true     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostUserRequest] :post_user_request Information about the User to create.
    # @return [PostUser200Response]
    def post_user(api_version, opts = {})
      data, _status_code, _headers = post_user_with_http_info(api_version, opts)
      data
    end

    # Create a user
    # Creates a user on your account. You determine the new user&#39;s account access by setting it to restricted or unrestricted and by defining its grants. After completion, the API sends a confirmation message containing password creation and login instructions to the user&#39;s &#x60;email&#x60; address.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - A parent account user can create new parent account users.  - A child account can [update](https://techdocs.akamai.com/linode-api/reference/put-user) the child account parent user (proxy user) to &#x60;unrestricted&#x60;. This gives the proxy user access to create new child account users.  - A child account user can create new child account users.  - You can&#39;t create a proxy user. The proxy user in a child account is predefined when you initially provision the parent-child relationship.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli users create \\   --username example_user \\   --email example_user@linode.com \\   --restricted true     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostUserRequest] :post_user_request Information about the User to create.
    # @return [Array<(PostUser200Response, Integer, Hash)>] PostUser200Response data, response status code and response headers
    def post_user_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.post_user ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.post_user"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.post_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#post_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update your account
    # Updates contact and billing information related to your account. If you exclude any properties from the request, the operation leaves them unchanged.  __Note__. When updating an account's `country` to `US`, you'll get an error if the account's `zip` is not a valid US zip code.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can't change the `company` for a parent account. Akamai uses this value to set the name for a child account parent user (proxy user) on any child account.  - Child account users can't run this operation. These users don't have access to billing-related operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli account update \\   --address_1 \"123 Main St.\" \\   --address_2 \"Suite 101\" \\   --city Philadelphia \\   --company My Company \\ LLC \\   --country US \\   --email jsmith@mycompany.com \\   --first_name John \\   --last_name Smith \\   --phone 555-555-1212 \\   --state PA \\   --tax_id ATU99999999 \\   --zip 19102     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param put_account_request [PutAccountRequest] Updated contact and billing information.
    # @param [Hash] opts the optional parameters
    # @return [PutAccount200Response]
    def put_account(api_version, put_account_request, opts = {})
      data, _status_code, _headers = put_account_with_http_info(api_version, put_account_request, opts)
      data
    end

    # Update your account
    # Updates contact and billing information related to your account. If you exclude any properties from the request, the operation leaves them unchanged.  __Note__. When updating an account&#39;s &#x60;country&#x60; to &#x60;US&#x60;, you&#39;ll get an error if the account&#39;s &#x60;zip&#x60; is not a valid US zip code.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can&#39;t change the &#x60;company&#x60; for a parent account. Akamai uses this value to set the name for a child account parent user (proxy user) on any child account.  - Child account users can&#39;t run this operation. These users don&#39;t have access to billing-related operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account update \\   --address_1 \&quot;123 Main St.\&quot; \\   --address_2 \&quot;Suite 101\&quot; \\   --city Philadelphia \\   --company My Company \\ LLC \\   --country US \\   --email jsmith@mycompany.com \\   --first_name John \\   --last_name Smith \\   --phone 555-555-1212 \\   --state PA \\   --tax_id ATU99999999 \\   --zip 19102     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param put_account_request [PutAccountRequest] Updated contact and billing information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutAccount200Response, Integer, Hash)>] PutAccount200Response data, response status code and response headers
    def put_account_with_http_info(api_version, put_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_account ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_account"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'put_account_request' is set
      if @api_client.config.client_side_validation && put_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_account_request' when calling AccountApi.put_account"
      end
      # resource path
      local_var_path = '/{apiVersion}/account'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account settings
    # Updates your account settings. For a Longview subscription plan, see [Update a Longview plan](https://techdocs.akamai.com/linode-api/reference/put-longview-plan).   <<LB>>  ---   - __CLI__.      ```     linode-cli account settings-update \\   --network_helper false     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param put_account_settings_request [PutAccountSettingsRequest] Update Account settings information.
    # @param [Hash] opts the optional parameters
    # @return [PutAccountSettings200Response]
    def put_account_settings(api_version, put_account_settings_request, opts = {})
      data, _status_code, _headers = put_account_settings_with_http_info(api_version, put_account_settings_request, opts)
      data
    end

    # Update account settings
    # Updates your account settings. For a Longview subscription plan, see [Update a Longview plan](https://techdocs.akamai.com/linode-api/reference/put-longview-plan).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account settings-update \\   --network_helper false     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param put_account_settings_request [PutAccountSettingsRequest] Update Account settings information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutAccountSettings200Response, Integer, Hash)>] PutAccountSettings200Response data, response status code and response headers
    def put_account_settings_with_http_info(api_version, put_account_settings_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_account_settings ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_account_settings"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'put_account_settings_request' is set
      if @api_client.config.client_side_validation && put_account_settings_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_account_settings_request' when calling AccountApi.put_account_settings"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/settings'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_account_settings_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutAccountSettings200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_account_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an OAuth client
    # Update information about an OAuth Client on your Account. This can be especially useful to update the `redirect_uri` of your client in the event that the callback url changed in your application.   <<LB>>  ---   - __CLI__.      ```     linode-cli account client-update \\   edc6790ea9db4d224c5c \\   --label Test_Client_1     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutClientRequest] :put_client_request The fields to update.
    # @return [PutClient200Response]
    def put_client(api_version, client_id, opts = {})
      data, _status_code, _headers = put_client_with_http_info(api_version, client_id, opts)
      data
    end

    # Update an OAuth client
    # Update information about an OAuth Client on your Account. This can be especially useful to update the &#x60;redirect_uri&#x60; of your client in the event that the callback url changed in your application.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli account client-update \\   edc6790ea9db4d224c5c \\   --label Test_Client_1     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutClientRequest] :put_client_request The fields to update.
    # @return [Array<(PutClient200Response, Integer, Hash)>] PutClient200Response data, response status code and response headers
    def put_client_with_http_info(api_version, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_client ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_client"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.put_client"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_client_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutClient200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the OAuth client's thumbnail
    # Upload a thumbnail for a client you own.  You must upload an image file that will be returned when the thumbnail is retrieved.  This image will be publicly-viewable.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param body [File] The image to set as the thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def put_client_thumbnail(api_version, client_id, body, opts = {})
      data, _status_code, _headers = put_client_thumbnail_with_http_info(api_version, client_id, body, opts)
      data
    end

    # Update the OAuth client&#39;s thumbnail
    # Upload a thumbnail for a client you own.  You must upload an image file that will be returned when the thumbnail is retrieved.  This image will be publicly-viewable.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param client_id [String] The OAuth Client ID to look up.
    # @param body [File] The image to set as the thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def put_client_thumbnail_with_http_info(api_version, client_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_client_thumbnail ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_client_thumbnail"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccountApi.put_client_thumbnail"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountApi.put_client_thumbnail"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/oauth-clients/{clientId}/thumbnail'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['image/png'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_client_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_client_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user
    # Update information about a user on your account, including its restricted status. When setting a user to `restricted`, the API sets no grants for it. You need to set grants so that user can access things on the account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can't edit the `username` or `email` values for the child account parent user (proxy user). These are predefined for the proxy user when you initially provision the parent-child relationship. Only a proxy user's `restricted` status can be modified. This can only be done by an unrestricted child account user.  - A parent account using an unrestricted proxy user in a child account can modify the `username`, `email`, and `restricted` status for an existing child account user.  - A restricted account user--parent or child--can't change their user to `unrestricted`.   <<LB>>  ---   - __CLI__.      ```     linode-cli users update example_user \\   --username example_user \\   --email example@linode.com \\   --restricted true     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutUserRequest] :put_user_request The information to update.
    # @return [PutUser200Response]
    def put_user(api_version, username, opts = {})
      data, _status_code, _headers = put_user_with_http_info(api_version, username, opts)
      data
    end

    # Update a user
    # Update information about a user on your account, including its restricted status. When setting a user to &#x60;restricted&#x60;, the API sets no grants for it. You need to set grants so that user can access things on the account.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - You can&#39;t edit the &#x60;username&#x60; or &#x60;email&#x60; values for the child account parent user (proxy user). These are predefined for the proxy user when you initially provision the parent-child relationship. Only a proxy user&#39;s &#x60;restricted&#x60; status can be modified. This can only be done by an unrestricted child account user.  - A parent account using an unrestricted proxy user in a child account can modify the &#x60;username&#x60;, &#x60;email&#x60;, and &#x60;restricted&#x60; status for an existing child account user.  - A restricted account user--parent or child--can&#39;t change their user to &#x60;unrestricted&#x60;.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli users update example_user \\   --username example_user \\   --email example@linode.com \\   --restricted true     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param [Hash] opts the optional parameters
    # @option opts [PutUserRequest] :put_user_request The information to update.
    # @return [Array<(PutUser200Response, Integer, Hash)>] PutUser200Response data, response status code and response headers
    def put_user_with_http_info(api_version, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_user ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_user"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AccountApi.put_user"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users/{username}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user's grants
    # Update the grants a user has. This can be used to give a user access to new entities or actions, or take access away.  You don't need to include the grant for every entity on the account in this request. Any that are not included remain unchanged.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - No child account user can modify the `account_access` grant for the child account parent user (proxy user).  - An unrestricted child account user can configure all other grants for the proxy user, via `global` object.  - An unrestricted child account user can enable the `account_access` grant for other child account users. However, enabled child users are still subject to child user restrictions--they can't perform write operations for any billing or account information.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param put_user_grants_request [PutUserGrantsRequest] The grants to update. Omitted grants will be left unchanged.
    # @param [Hash] opts the optional parameters
    # @return [PutUserGrants200Response]
    def put_user_grants(api_version, username, put_user_grants_request, opts = {})
      data, _status_code, _headers = put_user_grants_with_http_info(api_version, username, put_user_grants_request, opts)
      data
    end

    # Update a user&#39;s grants
    # Update the grants a user has. This can be used to give a user access to new entities or actions, or take access away.  You don&#39;t need to include the grant for every entity on the account in this request. Any that are not included remain unchanged.  __Note__. This operation can only be accessed by account users with _unrestricted_ access.  __Parent and child accounts__  In a [parent and child account](https://www.linode.com/docs/guides/parent-child-accounts/) environment, the following apply:  - No child account user can modify the &#x60;account_access&#x60; grant for the child account parent user (proxy user).  - An unrestricted child account user can configure all other grants for the proxy user, via &#x60;global&#x60; object.  - An unrestricted child account user can enable the &#x60;account_access&#x60; grant for other child account users. However, enabled child users are still subject to child user restrictions--they can&#39;t perform write operations for any billing or account information.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     account:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param username [String] The username to look up.
    # @param put_user_grants_request [PutUserGrantsRequest] The grants to update. Omitted grants will be left unchanged.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutUserGrants200Response, Integer, Hash)>] PutUserGrants200Response data, response status code and response headers
    def put_user_grants_with_http_info(api_version, username, put_user_grants_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.put_user_grants ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling AccountApi.put_user_grants"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AccountApi.put_user_grants"
      end
      # verify the required parameter 'put_user_grants_request' is set
      if @api_client.config.client_side_validation && put_user_grants_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_user_grants_request' when calling AccountApi.put_user_grants"
      end
      # resource path
      local_var_path = '/{apiVersion}/account/users/{username}/grants'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_user_grants_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutUserGrants200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"AccountApi.put_user_grants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#put_user_grants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
