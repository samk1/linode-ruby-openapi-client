=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class VPCsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a VPC
    # Delete a single VPC and all of its Subnets.  - The User accessing this operation must have `read_write` grants to the VPC. - A successful request triggers a `vpc_delete` event and `subnet_delete` events for each deleted VPC Subnet. - All of the VPC's Subnets must be eligible for deletion. Accordingly, all Configuration Profile Interfaces that each Subnet is assigned to must first be deleted. If those Interfaces are active, the associated Linodes must first be shut down before they can be removed. If any Subnet cannot be deleted, then neither the VPC nor any of its Subnets are deleted.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs delete $vpcId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_vpc(api_version, vpc_id, opts = {})
      data, _status_code, _headers = delete_vpc_with_http_info(api_version, vpc_id, opts)
      data
    end

    # Delete a VPC
    # Delete a single VPC and all of its Subnets.  - The User accessing this operation must have &#x60;read_write&#x60; grants to the VPC. - A successful request triggers a &#x60;vpc_delete&#x60; event and &#x60;subnet_delete&#x60; events for each deleted VPC Subnet. - All of the VPC&#39;s Subnets must be eligible for deletion. Accordingly, all Configuration Profile Interfaces that each Subnet is assigned to must first be deleted. If those Interfaces are active, the associated Linodes must first be shut down before they can be removed. If any Subnet cannot be deleted, then neither the VPC nor any of its Subnets are deleted.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs delete $vpcId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_vpc_with_http_info(api_version, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.delete_vpc ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.delete_vpc"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.delete_vpc"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.delete_vpc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#delete_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a VPC subnet
    # Delete a single VPC Subnet.  The user accessing this operation must have `read_write` grants to the VPC. A successful request triggers a `subnet_delete` event.  __Note__. You need to delete all the Configuration Profile Interfaces that this Subnet is assigned to before you can delete it. If those Interfaces are active, the associated Linode needs to be shut down before they can be removed.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs subnet-delete $vpcId $vpcSubnetId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_vpc_subnet(api_version, vpc_id, vpc_subnet_id, opts = {})
      data, _status_code, _headers = delete_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, opts)
      data
    end

    # Delete a VPC subnet
    # Delete a single VPC Subnet.  The user accessing this operation must have &#x60;read_write&#x60; grants to the VPC. A successful request triggers a &#x60;subnet_delete&#x60; event.  __Note__. You need to delete all the Configuration Profile Interfaces that this Subnet is assigned to before you can delete it. If those Interfaces are active, the associated Linode needs to be shut down before they can be removed.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs subnet-delete $vpcId $vpcSubnetId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.delete_vpc_subnet ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.delete_vpc_subnet"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.delete_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet_id' is set
      if @api_client.config.client_side_validation && vpc_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_id' when calling VPCsApi.delete_vpc_subnet"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/subnets/{vpcSubnetId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'vpcSubnetId' + '}', CGI.escape(vpc_subnet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.delete_vpc_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#delete_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a VPC
    # Get information about a single VPC.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs view $vpcId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @return [GetVpc200Response]
    def get_vpc(api_version, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_with_http_info(api_version, vpc_id, opts)
      data
    end

    # Get a VPC
    # Get information about a single VPC.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs view $vpcId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVpc200Response, Integer, Hash)>] GetVpc200Response data, response status code and response headers
    def get_vpc_with_http_info(api_version, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpc"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpc200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a VPC's IP addresses
    # Returns a paginated list of IP addresses for a single VPC.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs ip-list 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetVpcIps200Response]
    def get_vpc_ips(api_version, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_ips_with_http_info(api_version, vpc_id, opts)
      data
    end

    # List a VPC&#39;s IP addresses
    # Returns a paginated list of IP addresses for a single VPC.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs ip-list 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetVpcIps200Response, Integer, Hash)>] GetVpcIps200Response data, response status code and response headers
    def get_vpc_ips_with_http_info(api_version, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_ips ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpc_ips"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VPCsApi.get_vpc_ips, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpc_ips, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpc_ips, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/ips'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpcIps200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpc_ips",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a VPC subnet
    # Get information about a single VPC Subnet.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs subnet-view $vpcId $vpcSubnetId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param [Hash] opts the optional parameters
    # @return [GetVpcSubnet200Response]
    def get_vpc_subnet(api_version, vpc_id, vpc_subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, opts)
      data
    end

    # Get a VPC subnet
    # Get information about a single VPC Subnet.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs subnet-view $vpcId $vpcSubnetId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVpcSubnet200Response, Integer, Hash)>] GetVpcSubnet200Response data, response status code and response headers
    def get_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_subnet ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpc_subnet"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet_id' is set
      if @api_client.config.client_side_validation && vpc_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_id' when calling VPCsApi.get_vpc_subnet"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/subnets/{vpcSubnetId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'vpcSubnetId' + '}', CGI.escape(vpc_subnet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpcSubnet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpc_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VPC subnets
    # Get information about all VPC Subnets associated with a VPC.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs subnets-list $vpcId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetVpcSubnets200Response]
    def get_vpc_subnets(api_version, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_subnets_with_http_info(api_version, vpc_id, opts)
      data
    end

    # List VPC subnets
    # Get information about all VPC Subnets associated with a VPC.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs subnets-list $vpcId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetVpcSubnets200Response, Integer, Hash)>] GetVpcSubnets200Response data, response status code and response headers
    def get_vpc_subnets_with_http_info(api_version, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_subnets ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpc_subnets"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc_subnets"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VPCsApi.get_vpc_subnets, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpc_subnets, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpc_subnets, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/subnets'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpcSubnets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpc_subnets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_subnets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VPCs
    # Display all VPCs on your account.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetVpcs200Response]
    def get_vpcs(api_version, opts = {})
      data, _status_code, _headers = get_vpcs_with_http_info(api_version, opts)
      data
    end

    # List VPCs
    # Display all VPCs on your account.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetVpcs200Response, Integer, Hash)>] GetVpcs200Response data, response status code and response headers
    def get_vpcs_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpcs ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpcs"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VPCsApi.get_vpcs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpcs, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpcs, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/vpcs'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpcs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpcs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpcs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VPC IP addresses
    # Returns a paginated list of all VPC IP addresses and address ranges on your account.  __Note__. If a Linode has several configuration profiles that include a VPC interface, address information for all of them is listed in the response. Since VPCs can use the same address space, you may see duplicate IP addresses.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs ip list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     ips:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetVpcsIps200Response]
    def get_vpcs_ips(api_version, opts = {})
      data, _status_code, _headers = get_vpcs_ips_with_http_info(api_version, opts)
      data
    end

    # List VPC IP addresses
    # Returns a paginated list of all VPC IP addresses and address ranges on your account.  __Note__. If a Linode has several configuration profiles that include a VPC interface, address information for all of them is listed in the response. Since VPCs can use the same address space, you may see duplicate IP addresses.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs ip list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     ips:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetVpcsIps200Response, Integer, Hash)>] GetVpcsIps200Response data, response status code and response headers
    def get_vpcs_ips_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpcs_ips ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.get_vpcs_ips"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VPCsApi.get_vpcs_ips, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpcs_ips, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCsApi.get_vpcs_ips, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/vpcs/ips'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVpcsIps200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.get_vpcs_ips",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpcs_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VPC
    # Create a new VPC and optionally associated VPC Subnets.  - Users must have the `add_vpc` grant to access this operation. - A successful request triggers a `vpc_create` event and `subnet_create` events for any created VPC Subnets.  Once a VPC is created, it can be attached to a Linode by assigning a VPC Subnet to one of the Linode's Configuration Profile Interfaces. This step can be accomplished with the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config) - [Add a configuration profile interface](https://techdocs.akamai.com/linode-api/reference/post-linode-config-interface)   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs create \\   --description \"A description of my VPC.\" \\   --label cool-vpc \\   --region us-east \\   --subnets.label cool-vpc-subnet \\   --subnets.ipv4 10.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_vpc_request [PostVpcRequest] VPC Create request object.
    # @param [Hash] opts the optional parameters
    # @return [PostVpc200Response]
    def post_vpc(api_version, post_vpc_request, opts = {})
      data, _status_code, _headers = post_vpc_with_http_info(api_version, post_vpc_request, opts)
      data
    end

    # Create a VPC
    # Create a new VPC and optionally associated VPC Subnets.  - Users must have the &#x60;add_vpc&#x60; grant to access this operation. - A successful request triggers a &#x60;vpc_create&#x60; event and &#x60;subnet_create&#x60; events for any created VPC Subnets.  Once a VPC is created, it can be attached to a Linode by assigning a VPC Subnet to one of the Linode&#39;s Configuration Profile Interfaces. This step can be accomplished with the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config) - [Add a configuration profile interface](https://techdocs.akamai.com/linode-api/reference/post-linode-config-interface)   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs create \\   --description \&quot;A description of my VPC.\&quot; \\   --label cool-vpc \\   --region us-east \\   --subnets.label cool-vpc-subnet \\   --subnets.ipv4 10.0.1.0/24     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_vpc_request [PostVpcRequest] VPC Create request object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostVpc200Response, Integer, Hash)>] PostVpc200Response data, response status code and response headers
    def post_vpc_with_http_info(api_version, post_vpc_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.post_vpc ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.post_vpc"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_vpc_request' is set
      if @api_client.config.client_side_validation && post_vpc_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_vpc_request' when calling VPCsApi.post_vpc"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_vpc_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostVpc200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.post_vpc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#post_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VPC subnet
    # Create a VPC Subnet.  - The User accessing this operation must have `read_write` grants to the VPC. - A successful request triggers a `subnet_create` event.  Once a VPC Subnet is created, it can be attached to a Linode by assigning the Subnet to one of the Linode's Configuration Profile Interfaces. This step can be accomplished with the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config) - [Add a configuration profile interface](https://techdocs.akamai.com/linode-api/reference/post-linode-config-interface)   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs subnet-create $vpcId \\   --label cool-vpc-subnet \\   --ipv4 10.0.1.0/24     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param post_vpc_subnet_request [PostVpcSubnetRequest] VPC Subnet Create request object.
    # @param [Hash] opts the optional parameters
    # @return [PostVpcSubnet200Response]
    def post_vpc_subnet(api_version, vpc_id, post_vpc_subnet_request, opts = {})
      data, _status_code, _headers = post_vpc_subnet_with_http_info(api_version, vpc_id, post_vpc_subnet_request, opts)
      data
    end

    # Create a VPC subnet
    # Create a VPC Subnet.  - The User accessing this operation must have &#x60;read_write&#x60; grants to the VPC. - A successful request triggers a &#x60;subnet_create&#x60; event.  Once a VPC Subnet is created, it can be attached to a Linode by assigning the Subnet to one of the Linode&#39;s Configuration Profile Interfaces. This step can be accomplished with the following operations:  - [Create a Linode](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) - [Create a config profile](https://techdocs.akamai.com/linode-api/reference/post-add-linode-config) - [Update a config profile](https://techdocs.akamai.com/linode-api/reference/put-linode-config) - [Add a configuration profile interface](https://techdocs.akamai.com/linode-api/reference/post-linode-config-interface)   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs subnet-create $vpcId \\   --label cool-vpc-subnet \\   --ipv4 10.0.1.0/24     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param post_vpc_subnet_request [PostVpcSubnetRequest] VPC Subnet Create request object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostVpcSubnet200Response, Integer, Hash)>] PostVpcSubnet200Response data, response status code and response headers
    def post_vpc_subnet_with_http_info(api_version, vpc_id, post_vpc_subnet_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.post_vpc_subnet ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.post_vpc_subnet"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.post_vpc_subnet"
      end
      # verify the required parameter 'post_vpc_subnet_request' is set
      if @api_client.config.client_side_validation && post_vpc_subnet_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_vpc_subnet_request' when calling VPCsApi.post_vpc_subnet"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/subnets'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_vpc_subnet_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostVpcSubnet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.post_vpc_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#post_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a VPC
    # Update an existing VPC.  - The User accessing this operation must have `read_write` grants to the VPC. - A successful request triggers a `vpc_update` event.  To update a VPC's Subnet, run the [Update a VPC subnet](https://techdocs.akamai.com/linode-api/reference/put-vpc-subnet) operation.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs update $vpcId \\   --description \"A description of my VPC.\"   --label cool-vpc     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param put_vpc_request [PutVpcRequest] VPC Update request object.
    # @param [Hash] opts the optional parameters
    # @return [PutVpc200Response]
    def put_vpc(api_version, vpc_id, put_vpc_request, opts = {})
      data, _status_code, _headers = put_vpc_with_http_info(api_version, vpc_id, put_vpc_request, opts)
      data
    end

    # Update a VPC
    # Update an existing VPC.  - The User accessing this operation must have &#x60;read_write&#x60; grants to the VPC. - A successful request triggers a &#x60;vpc_update&#x60; event.  To update a VPC&#39;s Subnet, run the [Update a VPC subnet](https://techdocs.akamai.com/linode-api/reference/put-vpc-subnet) operation.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs update $vpcId \\   --description \&quot;A description of my VPC.\&quot;   --label cool-vpc     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param put_vpc_request [PutVpcRequest] VPC Update request object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutVpc200Response, Integer, Hash)>] PutVpc200Response data, response status code and response headers
    def put_vpc_with_http_info(api_version, vpc_id, put_vpc_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.put_vpc ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.put_vpc"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.put_vpc"
      end
      # verify the required parameter 'put_vpc_request' is set
      if @api_client.config.client_side_validation && put_vpc_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_vpc_request' when calling VPCsApi.put_vpc"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_vpc_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutVpc200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.put_vpc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#put_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a VPC subnet
    # Update a VPC Subnet.  - The User accessing this operation must have `read_write` grants to the VPC. - A successful request triggers a `subnet_update` event.   <<LB>>  ---   - __CLI__.      ```     linode-cli vpcs subnet-update $vpcId \\   --label cool-vpc-subnet     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     vpc:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param put_vpc_subnet_request [PutVpcSubnetRequest] VPC Update request object.
    # @param [Hash] opts the optional parameters
    # @return [PutVpcSubnet200Response]
    def put_vpc_subnet(api_version, vpc_id, vpc_subnet_id, put_vpc_subnet_request, opts = {})
      data, _status_code, _headers = put_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, put_vpc_subnet_request, opts)
      data
    end

    # Update a VPC subnet
    # Update a VPC Subnet.  - The User accessing this operation must have &#x60;read_write&#x60; grants to the VPC. - A successful request triggers a &#x60;subnet_update&#x60; event.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli vpcs subnet-update $vpcId \\   --label cool-vpc-subnet     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     vpc:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param vpc_id [Integer] The &#x60;id&#x60; of the VPC.
    # @param vpc_subnet_id [Integer] The &#x60;id&#x60; of the VPC Subnet.
    # @param put_vpc_subnet_request [PutVpcSubnetRequest] VPC Update request object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutVpcSubnet200Response, Integer, Hash)>] PutVpcSubnet200Response data, response status code and response headers
    def put_vpc_subnet_with_http_info(api_version, vpc_id, vpc_subnet_id, put_vpc_subnet_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.put_vpc_subnet ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling VPCsApi.put_vpc_subnet"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.put_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet_id' is set
      if @api_client.config.client_side_validation && vpc_subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_id' when calling VPCsApi.put_vpc_subnet"
      end
      # verify the required parameter 'put_vpc_subnet_request' is set
      if @api_client.config.client_side_validation && put_vpc_subnet_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_vpc_subnet_request' when calling VPCsApi.put_vpc_subnet"
      end
      # resource path
      local_var_path = '/{apiVersion}/vpcs/{vpcId}/subnets/{vpcSubnetId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'vpcId' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'vpcSubnetId' + '}', CGI.escape(vpc_subnet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_vpc_subnet_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutVpcSubnet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"VPCsApi.put_vpc_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#put_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
