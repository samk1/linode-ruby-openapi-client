=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class ImagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an image
    # Deletes a private image you have permission to `read_write`.  > ðŸš§ > > You can't undo this delete action.   <<LB>>  ---   - __CLI__.      ```     linode-cli images delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_image(api_version, image_id, opts = {})
      data, _status_code, _headers = delete_image_with_http_info(api_version, image_id, opts)
      data
    end

    # Delete an image
    # Deletes a private image you have permission to &#x60;read_write&#x60;.  &gt; ðŸš§ &gt; &gt; You can&#39;t undo this delete action.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_image_with_http_info(api_version, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.delete_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.delete_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagesApi.delete_image"
      end
      # resource path
      local_var_path = '/{apiVersion}/images/{imageId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'imageId' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.delete_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#delete_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an image
    # Get information about a single image. An image can be one of two types:  - **Public image**. The `id` for these images begins with `linode/`. These images are generally available to all users. To limit the response to public images, don't include [authentication](https://techdocs.akamai.com/linode-api/reference/get-started#authentication) when calling this operation.  - **Private image**. The `id` for these images begins with `private/`. These images are account-specific and only accessible to users with appropriate [grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants). To view private images, you need to include authentication when calling this operation. The response will also include public images.   <<LB>>  ---   - __CLI__.      ```     linode-cli images view linode/debian9     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param [Hash] opts the optional parameters
    # @return [GetImage200Response]
    def get_image(api_version, image_id, opts = {})
      data, _status_code, _headers = get_image_with_http_info(api_version, image_id, opts)
      data
    end

    # Get an image
    # Get information about a single image. An image can be one of two types:  - **Public image**. The &#x60;id&#x60; for these images begins with &#x60;linode/&#x60;. These images are generally available to all users. To limit the response to public images, don&#39;t include [authentication](https://techdocs.akamai.com/linode-api/reference/get-started#authentication) when calling this operation.  - **Private image**. The &#x60;id&#x60; for these images begins with &#x60;private/&#x60;. These images are account-specific and only accessible to users with appropriate [grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants). To view private images, you need to include authentication when calling this operation. The response will also include public images.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images view linode/debian9     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetImage200Response, Integer, Hash)>] GetImage200Response data, response status code and response headers
    def get_image_with_http_info(api_version, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.get_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.get_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagesApi.get_image"
      end
      # resource path
      local_var_path = '/{apiVersion}/images/{imageId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'imageId' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.get_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#get_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List images
    # Returns a paginated list of images. An image can be one of two types:  - **Public image**. The `id` for these images begins with `linode/`. These images are generally available to all users. To limit the response to public images, don't include [authentication](https://techdocs.akamai.com/linode-api/reference/get-started#authentication) when calling this operation.  - **Private image**. The `id` for these images begins with `private/`. These images are account-specific and only accessible to users with appropriate [grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants). To view private images, you need to include authentication when calling this operation. The response includes both private and public images.   <<LB>>  ---   - __CLI__.      ```     linode-cli images list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetImages200Response]
    def get_images(api_version, opts = {})
      data, _status_code, _headers = get_images_with_http_info(api_version, opts)
      data
    end

    # List images
    # Returns a paginated list of images. An image can be one of two types:  - **Public image**. The &#x60;id&#x60; for these images begins with &#x60;linode/&#x60;. These images are generally available to all users. To limit the response to public images, don&#39;t include [authentication](https://techdocs.akamai.com/linode-api/reference/get-started#authentication) when calling this operation.  - **Private image**. The &#x60;id&#x60; for these images begins with &#x60;private/&#x60;. These images are account-specific and only accessible to users with appropriate [grants](https://techdocs.akamai.com/linode-api/reference/get-user-grants). To view private images, you need to include authentication when calling this operation. The response includes both private and public images.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetImages200Response, Integer, Hash)>] GetImages200Response data, response status code and response headers
    def get_images_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.get_images ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.get_images"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ImagesApi.get_images, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ImagesApi.get_images, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ImagesApi.get_images, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/images'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetImages200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.get_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#get_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an image
    # Captures a private, gold-master image from a Linode disk.  > ðŸ“˜ > > If you create an image from an encrypted disk, the API doesn't encrypt the image. When you rebuild a compute instance from that image, the resulting disk will be automatically encrypted.   <<LB>>  ---   - __CLI__.      ```     linode-cli images create \\   --label this_is_a_label \\   --description \"A longer description \\     of the image\" \\   --disk_id 123     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_write linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostImageRequest] :post_image_request 
    # @return [PostImage200Response]
    def post_image(api_version, opts = {})
      data, _status_code, _headers = post_image_with_http_info(api_version, opts)
      data
    end

    # Create an image
    # Captures a private, gold-master image from a Linode disk.  &gt; ðŸ“˜ &gt; &gt; If you create an image from an encrypted disk, the API doesn&#39;t encrypt the image. When you rebuild a compute instance from that image, the resulting disk will be automatically encrypted.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images create \\   --label this_is_a_label \\   --description \&quot;A longer description \\     of the image\&quot; \\   --disk_id 123     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_write linodes:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostImageRequest] :post_image_request 
    # @return [Array<(PostImage200Response, Integer, Hash)>] PostImage200Response data, response status code and response headers
    def post_image_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.post_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.post_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/images'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.post_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#post_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replicate an image
    # Target an existing image and replicate it to another compute region.  - To also keep the target image in its original compute region, you need to include that `region` in the request's data. If you leave it out, the API removes the image from that region. Run the [Get an image](https://techdocs.akamai.com/linode-api/reference/get-image) operation to see the `regions` where an image currently exists.  - You need to provide at least one region. You can't include an empty array to delete all images. Use the [Delete an image](https://techdocs.akamai.com/linode-api/reference/delete-image) operation.  - Only core compute regions can be used. Currently, distributed compute regions aren't supported.   <<LB>>  ---   - __CLI__.      ```     linode-cli images replicate private/12345/regions \\   --regions \"us-iad\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param post_replicate_image_request [PostReplicateImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PostReplicateImage200Response]
    def post_replicate_image(api_version, image_id, post_replicate_image_request, opts = {})
      data, _status_code, _headers = post_replicate_image_with_http_info(api_version, image_id, post_replicate_image_request, opts)
      data
    end

    # Replicate an image
    # Target an existing image and replicate it to another compute region.  - To also keep the target image in its original compute region, you need to include that &#x60;region&#x60; in the request&#39;s data. If you leave it out, the API removes the image from that region. Run the [Get an image](https://techdocs.akamai.com/linode-api/reference/get-image) operation to see the &#x60;regions&#x60; where an image currently exists.  - You need to provide at least one region. You can&#39;t include an empty array to delete all images. Use the [Delete an image](https://techdocs.akamai.com/linode-api/reference/delete-image) operation.  - Only core compute regions can be used. Currently, distributed compute regions aren&#39;t supported.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images replicate private/12345/regions \\   --regions \&quot;us-iad\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param post_replicate_image_request [PostReplicateImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostReplicateImage200Response, Integer, Hash)>] PostReplicateImage200Response data, response status code and response headers
    def post_replicate_image_with_http_info(api_version, image_id, post_replicate_image_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.post_replicate_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.post_replicate_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagesApi.post_replicate_image"
      end
      # verify the required parameter 'post_replicate_image_request' is set
      if @api_client.config.client_side_validation && post_replicate_image_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_replicate_image_request' when calling ImagesApi.post_replicate_image"
      end
      # resource path
      local_var_path = '/{apiVersion}/images/{imageId}/regions'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'imageId' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_replicate_image_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostReplicateImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.post_replicate_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#post_replicate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an image
    # Creates a new private image instance and returns a URL as the `upload_to` object in the response. Use this URL to upload image data to that instance.  - Ensure the disk is raw disk image (`.img`) format. - Compress it using gzip (`.gz`) format. The maximum compressed file size is 5GB. - Upload the file in a PUT request that includes the `Content-type: application/octet-stream` header.  For example:  ``` curl -v \\   -H \"Content-Type: application/octet-stream\" \\   --upload-file example.img.gz \\   $UPLOAD_URL \\   --progress-bar \\   --output /dev/null ```  > ðŸ“˜ > > - You need to upload image data within 24 hours of creation or the API cancels the upload and deletes the image. > > - If you create an image from an encrypted disk, the API doesn't encrypt the image. When you rebuild a compute instance from that image, the resulting disk will be automatically encrypted. > > - You can create a new image and upload image data using a single process through [Cloud Manager](https://www.linode.com/docs/products/tools/images/guides/upload-an-image/#uploading-an-image-file-through-the-cloud-manager) or the [Linode CLI](https://www.linode.com/docs/products/tools/images/guides/upload-an-image/#uploading-an-image-file-through-the-linode-cli).   <<LB>>  ---   - __CLI__.      ```     # Upload the image file in a single step linode-cli image-upload \\   --description \"Optional details about the Image\" \\   --label \"Example Image\" \\   --region us-east \\   /path/to/image-file.img.gz  # Returns the upload_to URL linode-cli images upload \\   --description \"Optional details about the Image\" \\   --label \"Example Image\" \\   --region us-east     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostUploadImageRequest] :post_upload_image_request The uploaded image details.
    # @return [PostUploadImage200Response]
    def post_upload_image(api_version, opts = {})
      data, _status_code, _headers = post_upload_image_with_http_info(api_version, opts)
      data
    end

    # Upload an image
    # Creates a new private image instance and returns a URL as the &#x60;upload_to&#x60; object in the response. Use this URL to upload image data to that instance.  - Ensure the disk is raw disk image (&#x60;.img&#x60;) format. - Compress it using gzip (&#x60;.gz&#x60;) format. The maximum compressed file size is 5GB. - Upload the file in a PUT request that includes the &#x60;Content-type: application/octet-stream&#x60; header.  For example:  &#x60;&#x60;&#x60; curl -v \\   -H \&quot;Content-Type: application/octet-stream\&quot; \\   --upload-file example.img.gz \\   $UPLOAD_URL \\   --progress-bar \\   --output /dev/null &#x60;&#x60;&#x60;  &gt; ðŸ“˜ &gt; &gt; - You need to upload image data within 24 hours of creation or the API cancels the upload and deletes the image. &gt; &gt; - If you create an image from an encrypted disk, the API doesn&#39;t encrypt the image. When you rebuild a compute instance from that image, the resulting disk will be automatically encrypted. &gt; &gt; - You can create a new image and upload image data using a single process through [Cloud Manager](https://www.linode.com/docs/products/tools/images/guides/upload-an-image/#uploading-an-image-file-through-the-cloud-manager) or the [Linode CLI](https://www.linode.com/docs/products/tools/images/guides/upload-an-image/#uploading-an-image-file-through-the-linode-cli).   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     # Upload the image file in a single step linode-cli image-upload \\   --description \&quot;Optional details about the Image\&quot; \\   --label \&quot;Example Image\&quot; \\   --region us-east \\   /path/to/image-file.img.gz  # Returns the upload_to URL linode-cli images upload \\   --description \&quot;Optional details about the Image\&quot; \\   --label \&quot;Example Image\&quot; \\   --region us-east     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [PostUploadImageRequest] :post_upload_image_request The uploaded image details.
    # @return [Array<(PostUploadImage200Response, Integer, Hash)>] PostUploadImage200Response data, response status code and response headers
    def post_upload_image_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.post_upload_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.post_upload_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/{apiVersion}/images/upload'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_upload_image_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostUploadImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.post_upload_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#post_upload_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an image
    # Updates a private image that you have permission to `read_write`.  > ðŸ“˜ > > You can't update the `regions` with this operation. Use the [Replicate an image](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) operation to modify the existing regions for your image.   <<LB>>  ---   - __CLI__.      ```     linode-cli images update private/12345 \\   --label \"My gold-master image\" \\   --description \"The detailed description \\     of my image.\"     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     images:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param put_image_request [PutImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PutImage200Response]
    def put_image(api_version, image_id, put_image_request, opts = {})
      data, _status_code, _headers = put_image_with_http_info(api_version, image_id, put_image_request, opts)
      data
    end

    # Update an image
    # Updates a private image that you have permission to &#x60;read_write&#x60;.  &gt; ðŸ“˜ &gt; &gt; You can&#39;t update the &#x60;regions&#x60; with this operation. Use the [Replicate an image](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) operation to modify the existing regions for your image.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli images update private/12345 \\   --label \&quot;My gold-master image\&quot; \\   --description \&quot;The detailed description \\     of my image.\&quot;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     images:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param image_id [String] The unique identifier assigned to the image after creation.
    # @param put_image_request [PutImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutImage200Response, Integer, Hash)>] PutImage200Response data, response status code and response headers
    def put_image_with_http_info(api_version, image_id, put_image_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.put_image ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling ImagesApi.put_image"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagesApi.put_image"
      end
      # verify the required parameter 'put_image_request' is set
      if @api_client.config.client_side_validation && put_image_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_image_request' when calling ImagesApi.put_image"
      end
      # resource path
      local_var_path = '/{apiVersion}/images/{imageId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'imageId' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_image_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutImage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"ImagesApi.put_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#put_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
