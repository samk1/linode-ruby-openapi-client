=begin
#Linode API

#[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

The version of the OpenAPI document: 4.177.1
Contact: support@linode.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module LinodeOpenapiClient
  class NodeBalancersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a NodeBalancer
    # Deletes a NodeBalancer.  __This is a destructive action and cannot be undone.__  Deleting a NodeBalancer will also delete all associated Configs and Nodes, although the backend servers represented by the Nodes will not be changed or removed. Deleting a NodeBalancer will cause you to lose access to the IP Addresses assigned to this NodeBalancer.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers delete 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_node_balancer(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = delete_node_balancer_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # Delete a NodeBalancer
    # Deletes a NodeBalancer.  __This is a destructive action and cannot be undone.__  Deleting a NodeBalancer will also delete all associated Configs and Nodes, although the backend servers represented by the Nodes will not be changed or removed. Deleting a NodeBalancer will cause you to lose access to the IP Addresses assigned to this NodeBalancer.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers delete 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_node_balancer_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.delete_node_balancer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.delete_node_balancer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.delete_node_balancer"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.delete_node_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#delete_node_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a config
    # Deletes the Config for a port of this NodeBalancer.  __This cannot be undone.__  Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-delete \\   12345 4567     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_node_balancer_config(api_version, node_balancer_id, config_id, opts = {})
      data, _status_code, _headers = delete_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, opts)
      data
    end

    # Delete a config
    # Deletes the Config for a port of this NodeBalancer.  __This cannot be undone.__  Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers config-delete \\   12345 4567     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.delete_node_balancer_config ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.delete_node_balancer_config"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.delete_node_balancer_config"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.delete_node_balancer_config"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.delete_node_balancer_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#delete_node_balancer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a node balancer's node
    # Deletes a Node from this Config. This backend will no longer receive traffic for the configured port of this NodeBalancer.  This does not change or remove the Linode whose address was used in the creation of this Node.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers node-delete \\   12345 4567 54321     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_node_balancer_config_node(api_version, node_balancer_id, config_id, node_id, opts = {})
      data, _status_code, _headers = delete_node_balancer_config_node_with_http_info(api_version, node_balancer_id, config_id, node_id, opts)
      data
    end

    # Delete a node balancer&#39;s node
    # Deletes a Node from this Config. This backend will no longer receive traffic for the configured port of this NodeBalancer.  This does not change or remove the Linode whose address was used in the creation of this Node.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers node-delete \\   12345 4567 54321     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_node_balancer_config_node_with_http_info(api_version, node_balancer_id, config_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.delete_node_balancer_config_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.delete_node_balancer_config_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.delete_node_balancer_config_node"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.delete_node_balancer_config_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NodeBalancersApi.delete_node_balancer_config_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.delete_node_balancer_config_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#delete_node_balancer_config_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a NodeBalancer
    # Returns a single NodeBalancer you can access.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers view 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [NodeBalancer1]
    def get_node_balancer(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = get_node_balancer_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # Get a NodeBalancer
    # Returns a single NodeBalancer you can access.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers view 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeBalancer1, Integer, Hash)>] NodeBalancer1 data, response status code and response headers
    def get_node_balancer_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NodeBalancer1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a config
    # Returns configuration information for a single port of this NodeBalancer.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-view \\   12345 4567     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param [Hash] opts the optional parameters
    # @return [GetNodeBalancerConfig200Response]
    def get_node_balancer_config(api_version, node_balancer_id, config_id, opts = {})
      data, _status_code, _headers = get_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, opts)
      data
    end

    # Get a config
    # Returns configuration information for a single port of this NodeBalancer.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers config-view \\   12345 4567     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNodeBalancerConfig200Response, Integer, Hash)>] GetNodeBalancerConfig200Response data, response status code and response headers
    def get_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_config ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_config"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_config"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.get_node_balancer_config"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerConfig200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List nodes
    # Returns a paginated list of NodeBalancer nodes associated with this Config. These are the backends that will be sent traffic for this port.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers nodes-list 12345 4567     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the NodeBalancer config to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetNodeBalancerConfigNodes200Response]
    def get_node_balancer_config_nodes(api_version, node_balancer_id, config_id, opts = {})
      data, _status_code, _headers = get_node_balancer_config_nodes_with_http_info(api_version, node_balancer_id, config_id, opts)
      data
    end

    # List nodes
    # Returns a paginated list of NodeBalancer nodes associated with this Config. These are the backends that will be sent traffic for this port.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers nodes-list 12345 4567     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the NodeBalancer config to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetNodeBalancerConfigNodes200Response, Integer, Hash)>] GetNodeBalancerConfigNodes200Response data, response status code and response headers
    def get_node_balancer_config_nodes_with_http_info(api_version, node_balancer_id, config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_config_nodes ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_config_nodes"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_config_nodes"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.get_node_balancer_config_nodes"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NodeBalancersApi.get_node_balancer_config_nodes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancer_config_nodes, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancer_config_nodes, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerConfigNodes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_config_nodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_config_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List configs
    # Returns a paginated list of NodeBalancer Configs associated with this NodeBalancer. NodeBalancer Configs represent individual ports that this NodeBalancer will accept traffic on, one Config per port.  For example, if you wanted to accept standard HTTP traffic, you would need a Config listening on port 80.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers configs-list 12345     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetNodeBalancerConfigs200Response]
    def get_node_balancer_configs(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = get_node_balancer_configs_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # List configs
    # Returns a paginated list of NodeBalancer Configs associated with this NodeBalancer. NodeBalancer Configs represent individual ports that this NodeBalancer will accept traffic on, one Config per port.  For example, if you wanted to accept standard HTTP traffic, you would need a Config listening on port 80.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers configs-list 12345     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetNodeBalancerConfigs200Response, Integer, Hash)>] GetNodeBalancerConfigs200Response data, response status code and response headers
    def get_node_balancer_configs_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_configs ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_configs"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_configs"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NodeBalancersApi.get_node_balancer_configs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancer_configs, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancer_configs, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerConfigs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_configs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List node balancer firewalls
    # View information for Firewalls assigned to this NodeBalancer.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers firewalls $nodeBalancerId     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [GetNodeBalancerFirewalls200Response]
    def get_node_balancer_firewalls(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = get_node_balancer_firewalls_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # List node balancer firewalls
    # View information for Firewalls assigned to this NodeBalancer.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers firewalls $nodeBalancerId     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNodeBalancerFirewalls200Response, Integer, Hash)>] GetNodeBalancerFirewalls200Response data, response status code and response headers
    def get_node_balancer_firewalls_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_firewalls ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_firewalls"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_firewalls"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/firewalls'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerFirewalls200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_firewalls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_firewalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a node balancer's node
    # Returns information about a single Node, a backend for this NodeBalancer's configured port.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers node-view 12345 4567 54321     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [GetNodeBalancerNode200Response]
    def get_node_balancer_node(api_version, node_balancer_id, config_id, node_id, opts = {})
      data, _status_code, _headers = get_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, node_id, opts)
      data
    end

    # Get a node balancer&#39;s node
    # Returns information about a single Node, a backend for this NodeBalancer&#39;s configured port.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers node-view 12345 4567 54321     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNodeBalancerNode200Response, Integer, Hash)>] GetNodeBalancerNode200Response data, response status code and response headers
    def get_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_node"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.get_node_balancer_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NodeBalancersApi.get_node_balancer_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerNode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get node balancer statistics
    # Returns detailed statistics about the requested NodeBalancer.   <<LB>>  ---   - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [GetNodeBalancerStats200Response]
    def get_node_balancer_stats(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = get_node_balancer_stats_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # Get node balancer statistics
    # Returns detailed statistics about the requested NodeBalancer.   &lt;&lt;LB&gt;&gt;  ---   - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNodeBalancerStats200Response, Integer, Hash)>] GetNodeBalancerStats200Response data, response status code and response headers
    def get_node_balancer_stats_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancer_stats ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancer_stats"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.get_node_balancer_stats"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/stats'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancerStats200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancer_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancer_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NodeBalancers
    # Returns a paginated list of NodeBalancers you have access to.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers list     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [GetNodeBalancers200Response]
    def get_node_balancers(api_version, opts = {})
      data, _status_code, _headers = get_node_balancers_with_http_info(api_version, opts)
      data
    end

    # List NodeBalancers
    # Returns a paginated list of NodeBalancers you have access to.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers list     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_only     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of a collection to return. (default to 1)
    # @option opts [Integer] :page_size The number of items to return per page. (default to 100)
    # @return [Array<(GetNodeBalancers200Response, Integer, Hash)>] GetNodeBalancers200Response data, response status code and response headers
    def get_node_balancers_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.get_node_balancers ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.get_node_balancers"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NodeBalancersApi.get_node_balancers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancers, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 25
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NodeBalancersApi.get_node_balancers, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = '/{apiVersion}/nodebalancers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNodeBalancers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.get_node_balancers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#get_node_balancers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a NodeBalancer
    # Creates a NodeBalancer in the requested Region. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with \"NodeBalancers\" in their `capabilities`.  NodeBalancers require a port Config with at least one backend Node to start serving requests.  When using the Linode CLI to create a NodeBalancer, first create a NodeBalancer without any Configs. Then, create Configs and Nodes for that NodeBalancer with the respective [Create a config](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-config) and [Create a node](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-node) operations.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers create \\   --region us-east \\   --label balancer12345 \\   --client_conn_throttle 0     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_node_balancer_request [PostNodeBalancerRequest] Information about the NodeBalancer to create.
    # @param [Hash] opts the optional parameters
    # @return [NodeBalancer5]
    def post_node_balancer(api_version, post_node_balancer_request, opts = {})
      data, _status_code, _headers = post_node_balancer_with_http_info(api_version, post_node_balancer_request, opts)
      data
    end

    # Create a NodeBalancer
    # Creates a NodeBalancer in the requested Region. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with \&quot;NodeBalancers\&quot; in their &#x60;capabilities&#x60;.  NodeBalancers require a port Config with at least one backend Node to start serving requests.  When using the Linode CLI to create a NodeBalancer, first create a NodeBalancer without any Configs. Then, create Configs and Nodes for that NodeBalancer with the respective [Create a config](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-config) and [Create a node](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-node) operations.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers create \\   --region us-east \\   --label balancer12345 \\   --client_conn_throttle 0     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param post_node_balancer_request [PostNodeBalancerRequest] Information about the NodeBalancer to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeBalancer5, Integer, Hash)>] NodeBalancer5 data, response status code and response headers
    def post_node_balancer_with_http_info(api_version, post_node_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.post_node_balancer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.post_node_balancer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'post_node_balancer_request' is set
      if @api_client.config.client_side_validation && post_node_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_node_balancer_request' when calling NodeBalancersApi.post_node_balancer"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_node_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'NodeBalancer5'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.post_node_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#post_node_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a config
    # Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-create 12345 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PostNodeBalancerConfigRequest] :post_node_balancer_config_request Information about the port to configure.
    # @return [PostNodeBalancerConfig200Response]
    def post_node_balancer_config(api_version, node_balancer_id, opts = {})
      data, _status_code, _headers = post_node_balancer_config_with_http_info(api_version, node_balancer_id, opts)
      data
    end

    # Create a config
    # Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers config-create 12345 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \&quot;/test\&quot; \\   --check_body \&quot;it works\&quot; \\   --check_passive true \\   --proxy_protocol \&quot;none\&quot; \\   --ssl_cert \&quot;-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\&quot; \\   --ssl_key \&quot;-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\&quot; \\   --cipher_suite recommended     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param [Hash] opts the optional parameters
    # @option opts [PostNodeBalancerConfigRequest] :post_node_balancer_config_request Information about the port to configure.
    # @return [Array<(PostNodeBalancerConfig200Response, Integer, Hash)>] PostNodeBalancerConfig200Response data, response status code and response headers
    def post_node_balancer_config_with_http_info(api_version, node_balancer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.post_node_balancer_config ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.post_node_balancer_config"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.post_node_balancer_config"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_node_balancer_config_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostNodeBalancerConfig200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.post_node_balancer_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#post_node_balancer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a node
    # Creates a NodeBalancer Node, a backend that can accept traffic for this NodeBalancer Config. Nodes are routed requests on the configured port based on their status.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers node-create \\   12345 4567 \\   --address 192.168.210.120:80 \\   --label node54321 \\   --weight 50 \\   --mode accept     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the NodeBalancer config to access.
    # @param post_node_balancer_node_request [PostNodeBalancerNodeRequest] Information about the Node to create.
    # @param [Hash] opts the optional parameters
    # @return [PostNodeBalancerNode200Response]
    def post_node_balancer_node(api_version, node_balancer_id, config_id, post_node_balancer_node_request, opts = {})
      data, _status_code, _headers = post_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, post_node_balancer_node_request, opts)
      data
    end

    # Create a node
    # Creates a NodeBalancer Node, a backend that can accept traffic for this NodeBalancer Config. Nodes are routed requests on the configured port based on their status.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers node-create \\   12345 4567 \\   --address 192.168.210.120:80 \\   --label node54321 \\   --weight 50 \\   --mode accept     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the NodeBalancer config to access.
    # @param post_node_balancer_node_request [PostNodeBalancerNodeRequest] Information about the Node to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostNodeBalancerNode200Response, Integer, Hash)>] PostNodeBalancerNode200Response data, response status code and response headers
    def post_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, post_node_balancer_node_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.post_node_balancer_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.post_node_balancer_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.post_node_balancer_node"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.post_node_balancer_node"
      end
      # verify the required parameter 'post_node_balancer_node_request' is set
      if @api_client.config.client_side_validation && post_node_balancer_node_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_node_balancer_node_request' when calling NodeBalancersApi.post_node_balancer_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_node_balancer_node_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostNodeBalancerNode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.post_node_balancer_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#post_node_balancer_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rebuild a config
    # Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.  Use this operation to update a NodeBalancer's Config and Nodes with a single request.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-rebuild \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended \\   --nodes '{\"address\":\"192.168.210.120:80\",\"label\":\"node1\",\"weight\":50,\"mode\":\"accept\"}' \\   --nodes '{\"address\":\"192.168.210.122:80\",\"label\":\"node2\",\"weight\":50,\"mode\":\"accept\"}'     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param post_rebuild_node_balancer_config_request [PostRebuildNodeBalancerConfigRequest] Information about the NodeBalancer Config to rebuild.
    # @param [Hash] opts the optional parameters
    # @return [PostRebuildNodeBalancerConfig200Response]
    def post_rebuild_node_balancer_config(api_version, node_balancer_id, config_id, post_rebuild_node_balancer_config_request, opts = {})
      data, _status_code, _headers = post_rebuild_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, post_rebuild_node_balancer_config_request, opts)
      data
    end

    # Rebuild a config
    # Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.  Use this operation to update a NodeBalancer&#39;s Config and Nodes with a single request.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers config-rebuild \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \&quot;/test\&quot; \\   --check_body \&quot;it works\&quot; \\   --check_passive true \\   --proxy_protocol \&quot;none\&quot; \\   --ssl_cert \&quot;-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\&quot; \\   --ssl_key \&quot;-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\&quot; \\   --cipher_suite recommended \\   --nodes &#39;{\&quot;address\&quot;:\&quot;192.168.210.120:80\&quot;,\&quot;label\&quot;:\&quot;node1\&quot;,\&quot;weight\&quot;:50,\&quot;mode\&quot;:\&quot;accept\&quot;}&#39; \\   --nodes &#39;{\&quot;address\&quot;:\&quot;192.168.210.122:80\&quot;,\&quot;label\&quot;:\&quot;node2\&quot;,\&quot;weight\&quot;:50,\&quot;mode\&quot;:\&quot;accept\&quot;}&#39;     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param post_rebuild_node_balancer_config_request [PostRebuildNodeBalancerConfigRequest] Information about the NodeBalancer Config to rebuild.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostRebuildNodeBalancerConfig200Response, Integer, Hash)>] PostRebuildNodeBalancerConfig200Response data, response status code and response headers
    def post_rebuild_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, post_rebuild_node_balancer_config_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.post_rebuild_node_balancer_config ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.post_rebuild_node_balancer_config"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.post_rebuild_node_balancer_config"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.post_rebuild_node_balancer_config"
      end
      # verify the required parameter 'post_rebuild_node_balancer_config_request' is set
      if @api_client.config.client_side_validation && post_rebuild_node_balancer_config_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_rebuild_node_balancer_config_request' when calling NodeBalancersApi.post_rebuild_node_balancer_config"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_rebuild_node_balancer_config_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostRebuildNodeBalancerConfig200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.post_rebuild_node_balancer_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#post_rebuild_node_balancer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a NodeBalancer
    # Updates information about a NodeBalancer you can access.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers update 12345 \\   --label balancer12345 \\   --client_conn_throttle 0     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param node_balancer2 [NodeBalancer2] The information to update.
    # @param [Hash] opts the optional parameters
    # @return [NodeBalancer3]
    def put_node_balancer(api_version, node_balancer_id, node_balancer2, opts = {})
      data, _status_code, _headers = put_node_balancer_with_http_info(api_version, node_balancer_id, node_balancer2, opts)
      data
    end

    # Update a NodeBalancer
    # Updates information about a NodeBalancer you can access.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers update 12345 \\   --label balancer12345 \\   --client_conn_throttle 0     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param node_balancer2 [NodeBalancer2] The information to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeBalancer3, Integer, Hash)>] NodeBalancer3 data, response status code and response headers
    def put_node_balancer_with_http_info(api_version, node_balancer_id, node_balancer2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.put_node_balancer ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.put_node_balancer"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.put_node_balancer"
      end
      # verify the required parameter 'node_balancer2' is set
      if @api_client.config.client_side_validation && node_balancer2.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer2' when calling NodeBalancersApi.put_node_balancer"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(node_balancer2)

      # return_type
      return_type = opts[:debug_return_type] || 'NodeBalancer3'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.put_node_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#put_node_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a config
    # Updates the configuration for a single port on a NodeBalancer.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-update \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param put_node_balancer_config_request [PutNodeBalancerConfigRequest] The fields to update.
    # @param [Hash] opts the optional parameters
    # @return [PutNodeBalancerConfig200Response]
    def put_node_balancer_config(api_version, node_balancer_id, config_id, put_node_balancer_config_request, opts = {})
      data, _status_code, _headers = put_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, put_node_balancer_config_request, opts)
      data
    end

    # Update a config
    # Updates the configuration for a single port on a NodeBalancer.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers config-update \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \&quot;/test\&quot; \\   --check_body \&quot;it works\&quot; \\   --check_passive true \\   --proxy_protocol \&quot;none\&quot; \\   --ssl_cert \&quot;-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\&quot; \\   --ssl_key \&quot;-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\&quot; \\   --cipher_suite recommended     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param put_node_balancer_config_request [PutNodeBalancerConfigRequest] The fields to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutNodeBalancerConfig200Response, Integer, Hash)>] PutNodeBalancerConfig200Response data, response status code and response headers
    def put_node_balancer_config_with_http_info(api_version, node_balancer_id, config_id, put_node_balancer_config_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.put_node_balancer_config ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.put_node_balancer_config"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.put_node_balancer_config"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.put_node_balancer_config"
      end
      # verify the required parameter 'put_node_balancer_config_request' is set
      if @api_client.config.client_side_validation && put_node_balancer_config_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_node_balancer_config_request' when calling NodeBalancersApi.put_node_balancer_config"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_node_balancer_config_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutNodeBalancerConfig200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.put_node_balancer_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#put_node_balancer_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a node
    # Updates information about a Node, a backend for this NodeBalancer's configured port.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers node-update \\   12345 4567 54321 \\   --address 192.168.210.120:80 \\   --label node54321 \\   --weight 50 \\   --mode accept     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param put_node_balancer_node_request [PutNodeBalancerNodeRequest] The fields to update.
    # @param [Hash] opts the optional parameters
    # @return [PutNodeBalancerNode200Response]
    def put_node_balancer_node(api_version, node_balancer_id, config_id, node_id, put_node_balancer_node_request, opts = {})
      data, _status_code, _headers = put_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, node_id, put_node_balancer_node_request, opts)
      data
    end

    # Update a node
    # Updates information about a Node, a backend for this NodeBalancer&#39;s configured port.   &lt;&lt;LB&gt;&gt;  ---   - __CLI__.      &#x60;&#x60;&#x60;     linode-cli nodebalancers node-update \\   12345 4567 54321 \\   --address 192.168.210.120:80 \\   --label node54321 \\   --weight 50 \\   --mode accept     &#x60;&#x60;&#x60;      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __OAuth scopes__.      &#x60;&#x60;&#x60;     nodebalancers:read_write     &#x60;&#x60;&#x60;      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
    # @param api_version [String] __Enum__ Call either the &#x60;v4&#x60; URL, or &#x60;v4beta&#x60; for operations still in Beta.
    # @param node_balancer_id [Integer] The ID of the NodeBalancer to access.
    # @param config_id [Integer] The ID of the Config to access.
    # @param node_id [Integer] The ID of the Node to access.
    # @param put_node_balancer_node_request [PutNodeBalancerNodeRequest] The fields to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutNodeBalancerNode200Response, Integer, Hash)>] PutNodeBalancerNode200Response data, response status code and response headers
    def put_node_balancer_node_with_http_info(api_version, node_balancer_id, config_id, node_id, put_node_balancer_node_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NodeBalancersApi.put_node_balancer_node ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling NodeBalancersApi.put_node_balancer_node"
      end
      # verify enum value
      allowable_values = ["v4", "v4beta"]
      if @api_client.config.client_side_validation && !allowable_values.include?(api_version)
        fail ArgumentError, "invalid value for \"api_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'node_balancer_id' is set
      if @api_client.config.client_side_validation && node_balancer_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_balancer_id' when calling NodeBalancersApi.put_node_balancer_node"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NodeBalancersApi.put_node_balancer_node"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NodeBalancersApi.put_node_balancer_node"
      end
      # verify the required parameter 'put_node_balancer_node_request' is set
      if @api_client.config.client_side_validation && put_node_balancer_node_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_node_balancer_node_request' when calling NodeBalancersApi.put_node_balancer_node"
      end
      # resource path
      local_var_path = '/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}'.sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s)).sub('{' + 'nodeBalancerId' + '}', CGI.escape(node_balancer_id.to_s)).sub('{' + 'configId' + '}', CGI.escape(config_id.to_s)).sub('{' + 'nodeId' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_node_balancer_node_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutNodeBalancerNode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['personalAccessToken', 'oauth']

      new_options = opts.merge(
        :operation => :"NodeBalancersApi.put_node_balancer_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NodeBalancersApi#put_node_balancer_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
